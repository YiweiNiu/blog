<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiwei Niu&#39;s Note</title>
  
  <subtitle>to share, to learn</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://yiweiniu.github.io/blog/"/>
  <updated>2018-07-03T10:50:49.479Z</updated>
  <id>https://yiweiniu.github.io/blog/</id>
  
  <author>
    <name>Yiwei Niu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Remove Contamination of Pokaryotic Organisms in Reads</title>
    <link href="https://yiweiniu.github.io/blog/2018/07/Remove-Contamination-of-Pokaryotic-Organisms-in-Reads/"/>
    <id>https://yiweiniu.github.io/blog/2018/07/Remove-Contamination-of-Pokaryotic-Organisms-in-Reads/</id>
    <published>2018-07-03T10:37:59.000Z</published>
    <updated>2018-07-03T10:50:49.479Z</updated>
    
    <content type="html"><![CDATA[<p>Purpose in short: I wanted to remove potential contaminants in the raw sequencing reads, both Illumina (PE and MPE) and PacBio long reads.</p><p>The main tool for illumina reads I used was <code>BBDuk</code>, which belongs to the <a href="https://sourceforge.net/projects/bbmap/" target="_blank" rel="noopener">BBTools suite</a>. <code>Seal</code> and <code>BBSplit</code> can also do this, but <code>BBDuk</code> is the most suitable for my purpose. See discussions here: <a href="https://www.biostars.org/p/165059/" target="_blank" rel="noopener">Question: How to remove contamination from the transcriptome assembly</a>. <code>BBTools</code> is quite versatile, fast, and convenient! Though now I don’t fully understand every kit in it, the experience was very good from the tools I’ve tried. The author Brian Bushnell is very active and responsive. Here is a handy summary of <code>BBMap</code>: <a href="http://seqanswers.com/forums/showthread.php?t=58221" target="_blank" rel="noopener">Yes … BBMap can do that!</a>.</p><p>But for PacBio long reads, I didn’t find any tools specialized for that. I tried several tools including <code>mapPacBio.sh</code> (based on <code>bbmap</code>, and is tuned for the error profile of long reads.), <code>minimap2</code>, <code>blasr</code>, and <code>MashMap</code>.</p><h2 id="prepare-contamination-library"><a class="markdownIt-Anchor" href="#prepare-contamination-library"></a> Prepare contamination library</h2><ul><li><p>Download all the sequences of bacteria, viral, fungi, protozoa, and archaea using <a href="https://github.com/sschmeier/refseq2kraken" target="_blank" rel="noopener">refseq2kraken</a>. See note ‘Find Contamination in Genome Assembly by Kraken’ for details.</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> folder structures</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls genomes/refseq/</span></span><br><span class="line">archaea  bacteria  fungi  protozoa  viral</span><br></pre></td></tr></table></figure></li><li><p>Merge all the sequences into one single Fasta.</p></li><li><p>Since I’ve got the mitochondrion DNA sequences of the organism, I added it in to remove reads from mtDNA too.</p></li></ul><h2 id="bbduk-for-short-reads"><a class="markdownIt-Anchor" href="#bbduk-for-short-reads"></a> BBDuk for short reads</h2><p><a href="http://seqanswers.com/forums/showthread.php?t=42776" target="_blank" rel="noopener">BBDuk</a> is a member of the <a href="https://sourceforge.net/projects/bbmap/" target="_blank" rel="noopener">BBTools</a> package. “Duk” stands for Decontamination Using Kmers. BBDuk is extremely fast, scalable, and memory-efficient, while maintaining greater sensitivity and specificity than other tools.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PPN=24</span><br><span class="line"></span><br><span class="line">path2bbduk=$TOOLDIR/bbmap/bbduk.sh</span><br><span class="line">contaminants=$ANNODIR/NCBI_contaminants/contaminants.fa</span><br><span class="line"></span><br><span class="line">for sample in 270B 500B 800B 3k_1 5k-1 5k-2 10k</span><br><span class="line">do</span><br><span class="line"><span class="meta">$</span><span class="bash">path2bbduk ref=<span class="variable">$&#123;contaminants&#125;</span> threads=<span class="variable">$&#123;PPN&#125;</span> ordered=t k=31 <span class="keyword">in</span>=<span class="variable">$&#123;DATADIR&#125;</span>/TrimGalore/<span class="variable">$&#123;sample&#125;</span>_R1_val_1.fq.gz in2=<span class="variable">$&#123;DATADIR&#125;</span>/TrimGalore/<span class="variable">$&#123;sample&#125;</span>_R2_val_2.fq.gz out=<span class="variable">$&#123;DATADIR&#125;</span>/bbduk/<span class="variable">$&#123;sample&#125;</span>.R1.fq out2=<span class="variable">$&#123;DATADIR&#125;</span>/bbduk/<span class="variable">$&#123;sample&#125;</span>.R2.fq outm=<span class="variable">$&#123;DATADIR&#125;</span>/bbduk/<span class="variable">$&#123;sample&#125;</span>.bad.R1.fq outm2=<span class="variable">$&#123;DATADIR&#125;</span>/bbduk/<span class="variable">$&#123;sample&#125;</span>.bad.R2.fq</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>The ‘good’ reads will be in <code>${sample}.R*.fq</code>, and the ‘bad’ ones will be in <code>${sample}.bad.R*.fq</code>.</p><h2 id="long-reads"><a class="markdownIt-Anchor" href="#long-reads"></a> Long reads</h2><h3 id="mappacbio"><a class="markdownIt-Anchor" href="#mappacbio"></a> mapPacBio</h3><p><code>mapPacBio.sh</code> is based on <code>bbmap</code>, and is tuned for the error profile of long reads.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PPN=24</span><br><span class="line"></span><br><span class="line">path2bbmap=$TOOLDIR/bbmap</span><br><span class="line">contaminants=$ANNODIR/NCBI_contaminants/contaminants.fa</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">path2bbmap/mapPacBio.sh threads=<span class="variable">$&#123;PPN&#125;</span> ref=<span class="variable">$&#123;contaminants&#125;</span> <span class="keyword">in</span>=third_all.fasta maxlen=6000 out=bbmap.sam</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2bbmap/reformat.sh unmappedonly <span class="keyword">in</span>=bbmap.sam out=good.fa</span></span><br></pre></td></tr></table></figure><p>The output of <code>bbmap</code> or <code>mapPacBio.sh</code> is <code>SAM</code>, and both mapped and unmapped reads are saved in one file. <code>reformat.sh</code> was used to extract mapped reads and transfrom it to <code>FASTA</code>. See this: <a href="https://www.biostars.org/p/233118/" target="_blank" rel="noopener">Question: bbmap command to extract mapped and unmapped pair end reads</a>.</p><p>But <code>mapPacBio</code> was very very very slow, even I used 24 threads.</p><h3 id="minimap2"><a class="markdownIt-Anchor" href="#minimap2"></a> minimap2</h3><p><code>minimap2</code> is a versatile pairwise aligner for genomic and spliced nucleotide sequences created by Heng Li. It’s easy to use and run very fast. See the docs on it <a href="https://github.com/lh3/minimap2" target="_blank" rel="noopener">Git Repo</a> for full instructions.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PPN=24</span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/minimap2-2.8_x64-linux/minimap2 -x map-pb <span class="variable">$contaminants</span> third_all.fasta -t <span class="variable">$PPN</span> -a -Q &gt; minimap.sam</span></span><br></pre></td></tr></table></figure><p><code>-a</code> is to output the SAM format, and <code>-Q</code> is not to output base quality in SAM.</p><p>I had about 60G input, and <code>minimap2</code> was so fast, about 77 CPU hours and 4 real hours.</p><p>The output was huge, and it’s like this (truncated):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m54174_171023_074758/9962478/22561_264544*00**00TGATAATGATATTTATGATAATGATAATTGATAATGATAATTGATAATTATAATTGATAATGATAATTGATAATGAAATTGATATGATAATTGATATGATAAATTTGTAATGATAATTGATAATAGATAATTGATAATGATAATTGATAATGATCATTGATAATGATAATTGATACATGAATAATTGATAATGCTAATTGATAATGATATTGATATTATAATGATATGATAATTGATATGATAATTGAAATTATACTTCGATAATGATACATTGATAATGATCATTGATATGAGAATTGATAATTATAATTGTATAATGATAAGGTCATGATAATTTTGATCATTATAACTTGCTTAAATTCATATTTGATAATGATCACTTGATCATGATAATTTTCACTGCTAATTGATATGAATTGAGTCCTGATAATTTATCATTACATCCTTTATAATTCACTATTTGATACTGTAATCATTGCTCCTGATCCTTGATAATGACATTTTTCTAATGCTCATTTCTCTTCCCTTGCTCATTCTCCTTGCTTTCCTTCTCATTTATACTGCTCATTGCTCCTTCTTTTCTCCTTCTCTTTATCCTTACTCCTTTATCCTTGCTCGTTCTCCCTTATCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCCCTTCCTCCTTTTCTACTTCTCATTTTCTCCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTATCTTTTCTACTTCTGCATTTCTCCTTCTCTTTCGGCCTTATCCTTTGTACCGATCCTTCTCATTTTCCTCCTTACTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTTCCCTCCTTCGCTCCTGCTCTTGCTCCTGCCTCCTTGCTCCGCTCCTTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTACTTGCTCCTGCTCCTTGCTCCTGCCTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCTACTGCTCCTTGCTCCTGCTCCTTGCACTGCTCCTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCTGCTCCCTTGCCCTCCTGTCCTTGCTCCTCTCCTTGCTCCTGCTCCTGCTCTGCCTCCTTGCTCCTGCCCCTTGCCCTGCCCCTTGCTCCTAGCTCCTATGCTCCTGCTCTTGCTCCTGACCCTTGCTCCTGCCCCTTGCTCCTGCTCCTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGATCCGTGCTCCTGCTCCTTGCAGCCTGCCCTTGCTCTGCTCCTTTGCTCCTGCTCTTGCTCCGGCTCCTTGCGCCTGCTCCTTGCTCCTGCTTTGCCCCGGCTCCTTGCTCTGCTCCTTTGCTCCTGGCTCCTTGCTCCTGTCCTTGCTCCTGCTCCTGCTCCTGCTCCTTGCTCCTGGCTCCTTGTCCTGATCCTTGTCCTGCTCCTTGCTCCTGCTACCTTGCTCCTGCCCCTTGCTCCTGCCTCCTTGCTCTGCTCCTTCTCTGCTCCTTGCTCCTGCGCCTTGGCTCCTGCTCCTTGCATCCTCTCCTTGCTCCTGCCTCCTTGCTCTGCTTCCCTTGCTCCTGCTCCTGTCCTGCTCCTTGCTCTGTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCCTCTCCTTGCTCCGGCTACTTGCTCCTGCTCCTTGCTCCTGCTCCCTGGCTCTGGTCCTTTCCTCCTGCTCCTTGCTCCTGCCTCCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTTTGCTCGGCTTCCTATGCTCCTGTCCTTGCTCCTGCTCCTTGGCTCCTGCTCCTTGCTCCTGCTCCTTGTCCTGCTCCTTGCTCCTGCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCGCCTGCTCCTGCTCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTCTCCTGCTCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCCTTGCTCCGCTCCTTGCTCCTAGCCCTCCTTGCCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTGCCTCCTGGCTCCTGCCTCCTGGCTCCTGCTCCTTGCTCCTGCTCCGTGCTCCTGCTCCTTAGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCTCCTTGCTCCGGCTTTGCTCCTTCTCCTTGCTCCTGACATTGCTGCCGGCTCCTTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCCTTGCTCCTGCTACCTGCTCCTTTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTGCGCCTTGCTCCTGCTCATTGCTCCTGCTCCTTTCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCCCTGCTCCGCTACCTTGTACTTGCTCCTTGCTCCTGCTCCTTGCTCCTGGCTCCTTGCTCTGCTCCTTGGCTCCGCTCCTATGCTCCTGCTCCTTGCTCCGCTCCTGCTCCTGCTCCGTGCCTCCTGCCTCCTTGCGCTCCTGCTCAATTGCCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCATCTGCTCCTCTCCTTAGCTCCTGCTCCGTGCTCCTGTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTCTCCTTGCTCCTGCCCATAGCTCCTGCATCCTTGCCTCCTGCTCCGTGCTCCTGCTCATTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCATCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTACCTGCTCCTTGCTCCTGCTCCCTTTCCTGGGGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTGGCTCCTGCTCCGGGCTCCTTCTCCTTGCTCCTGCCTCCTGGCCTCCATGCTCCTGGCTCCTCCCTGCTCCTGCTCCTTGCTCCCATCCGCCTTTCTCCTCTGCTCACTGGATGCTCCTGATCCTTGCTCTGCTCCTTGCTCCTGCTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCCCTTGCTCCATGCTCCTTGCTTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCGTCCTTGCTCCTCTCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGTCGCTCTTGCTCCTGCTCCTTGCTCTGCCCTTGCCTCCTGCCTCCTTGCTCCTGCTCCTTTTTGCTCCTGTCCGTGCCTCTGCTCCTTGCTCCTGCTCCTTCGCTCCCTTCTCCTTGCTCCGCTCCTTGCTCTGCTCCTTGGCCTCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCATTGTCGATCCTTCTCCTTCTCCTGCTCCTGCGCCTGCTCTTGATCCCCTGCCTCCTTGCTCCGGCGCCTTTGCTCCTGCCCTCCTTTGCTCCTGCTCCTGCTCCTGCATCCGCTGCTGTCCTGCGTCCTTCTCCTGCTCCTTTCTCCTGCCCTTGTGCTCCTGCCCTTTGCTCCTGCTCCTGCTCCTGCATCCTTGCTCCGGCTCCTTGCTCCTGCCCTACGCTTGCCATCCTGCTCCTTCTCCGGCCTGCTCCTGCCTCCTTGCGCCTGCTCCTTGCTCCAGCTCCTTGCTCCTGCTCCTGCTCCGCTCCTGCTCCTGCTCTTGCTCCTTGCTCCTTGCTCCTGCTCTTGCTCCTGC*</span><br><span class="line">m54174_171023_074758/9962478/22561_264544*00**00TGATAATGATATTTATGATAATGATAATTGATAATGATAATTGATAATTATAATTGATAATGATAATTGATAATGAAATTGATATGATAATTGATATGATAAATTTGTAATGATAATTGATAATAGATAATTGATAATGATAATTGATAATGATCATTGATAATGATAATTGATACATGAATAATTGATAATGCTAATTGATAATGATATTGATATTATAATGATATGATAATTGATATGATAATTGAAATTATACTTCGATAATGATACATTGATAATGATCATTGATATGAGAATTGATAATTATAATTGTATAATGATAAGGTCATGATAATTTTGATCATTATAACTTGCTTAAATTCATATTTGATAATGATCACTTGATCATGATAATTTTCACTGCTAATTGATATGAATTGAGTCCTGATAATTTATCATTACATCCTTTATAATTCACTATTTGATACTGTAATCATTGCTCCTGATCCTTGATAATGACATTTTTCTAATGCTCATTTCTCTTCCCTTGCTCATTCTCCTTGCTTTCCTTCTCATTTATACTGCTCATTGCTCCTTCTTTTCTCCTTCTCTTTATCCTTACTCCTTTATCCTTGCTCGTTCTCCCTTATCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCCCTTCCTCCTTTTCTACTTCTCATTTTCTCCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTATCTTTTCTACTTCTGCATTTCTCCTTCTCTTTCGGCCTTATCCTTTGTACCGATCCTTCTCATTTTCCTCCTTACTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTTCCCTCCTTCGCTCCTGCTCTTGCTCCTGCCTCCTTGCTCCGCTCCTTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTACTTGCTCCTGCTCCTTGCTCCTGCCTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCTACTGCTCCTTGCTCCTGCTCCTTGCACTGCTCCTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCTGCTCCCTTGCCCTCCTGTCCTTGCTCCTCTCCTTGCTCCTGCTCCTGCTCTGCCTCCTTGCTCCTGCCCCTTGCCCTGCCCCTTGCTCCTAGCTCCTATGCTCCTGCTCTTGCTCCTGACCCTTGCTCCTGCCCCTTGCTCCTGCTCCTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGATCCGTGCTCCTGCTCCTTGCAGCCTGCCCTTGCTCTGCTCCTTTGCTCCTGCTCTTGCTCCGGCTCCTTGCGCCTGCTCCTTGCTCCTGCTTTGCCCCGGCTCCTTGCTCTGCTCCTTTGCTCCTGGCTCCTTGCTCCTGTCCTTGCTCCTGCTCCTGCTCCTGCTCCTTGCTCCTGGCTCCTTGTCCTGATCCTTGTCCTGCTCCTTGCTCCTGCTACCTTGCTCCTGCCCCTTGCTCCTGCCTCCTTGCTCTGCTCCTTCTCTGCTCCTTGCTCCTGCGCCTTGGCTCCTGCTCCTTGCATCCTCTCCTTGCTCCTGCCTCCTTGCTCTGCTTCCCTTGCTCCTGCTCCTGTCCTGCTCCTTGCTCTGTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCCTCTCCTTGCTCCGGCTACTTGCTCCTGCTCCTTGCTCCTGCTCCCTGGCTCTGGTCCTTTCCTCCTGCTCCTTGCTCCTGCCTCCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTTTGCTCGGCTTCCTATGCTCCTGTCCTTGCTCCTGCTCCTTGGCTCCTGCTCCTTGCTCCTGCTCCTTGTCCTGCTCCTTGCTCCTGCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCGCCTGCTCCTGCTCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTCTCCTGCTCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCCTTGCTCCGCTCCTTGCTCCTAGCCCTCCTTGCCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTGCCTCCTGGCTCCTGCCTCCTGGCTCCTGCTCCTTGCTCCTGCTCCGTGCTCCTGCTCCTTAGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCTCCTTGCTCCGGCTTTGCTCCTTCTCCTTGCTCCTGACATTGCTGCCGGCTCCTTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCCTTGCTCCTGCTACCTGCTCCTTTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTGCGCCTTGCTCCTGCTCATTGCTCCTGCTCCTTTCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCCCTGCTCCGCTACCTTGTACTTGCTCCTTGCTCCTGCTCCTTGCTCCTGGCTCCTTGCTCTGCTCCTTGGCTCCGCTCCTATGCTCCTGCTCCTTGCTCCGCTCCTGCTCCTGCTCCGTGCCTCCTGCCTCCTTGCGCTCCTGCTCAATTGCCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCATCTGCTCCTCTCCTTAGCTCCTGCTCCGTGCTCCTGTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTCTCCTTGCTCCTGCCCATAGCTCCTGCATCCTTGCCTCCTGCTCCGTGCTCCTGCTCATTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCATCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTACCTGCTCCTTGCTCCTGCTCCCTTTCCTGGGGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTGGCTCCTGCTCCGGGCTCCTTCTCCTTGCTCCTGCCTCCTGGCCTCCATGCTCCTGGCTCCTCCCTGCTCCTGCTCCTTGCTCCCATCCGCCTTTCTCCTCTGCTCACTGGATGCTCCTGATCCTTGCTCTGCTCCTTGCTCCTGCTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCCCTTGCTCCATGCTCCTTGCTTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCGTCCTTGCTCCTCTCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGTCGCTCTTGCTCCTGCTCCTTGCTCTGCCCTTGCCTCCTGCCTCCTTGCTCCTGCTCCTTTTTGCTCCTGTCCGTGCCTCTGCTCCTTGCTCCTGCTCCTTCGCTCCCTTCTCCTTGCTCCGCTCCTTGCTCTGCTCCTTGGCCTCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCATTGTCGATCCTTCTCCTTCTCCTGCTCCTGCGCCTGCTCTTGATCCCCTGCCTCCTTGCTCCGGCGCCTTTGCTCCTGCCCTCCTTTGCTCCTGCTCCTGCTCCTGCATCCGCTGCTGTCCTGCGTCCTTCTCCTGCTCCTTTCTCCTGCCCTTGTGCTCCTGCCCTTTGCTCCTGCTCCTGCTCCTGCATCCTTGCTCCGGCTCCTTGCTCCTGCCCTACGCTTGCCATCCTGCTCCTTCTCCGGCCTGCTCCTGCCTCCTTGCGCCTGCTCCTTGCTCCAGCTCCTTGCTCCTGCTCCTGCTCCGCTCCTGCTCCTGCTCTTGCTCCTTGCTCCTTGCTCCTGCTCTTGCTCCTGC*</span><br><span class="line">m54174_171023_074758/9962478/22561_2645416kraken:taxid|1094466|NC_017025.1130457113661S5M2D6M4I8M1D4M1D13M1D11M1I16M1D13M1D13M1D27M1D4M1D4M2I4M2D12M2D9M1D2M1D13M1D12M1D14M1D13M1D6M2I7M1D7M*00GCAGGAGCAAGAGCAGGAGCAAGGAGCAAGGAGCAAGAGCAGGAGCAGGAGCGGAGCAGGAGCAGGAGCAAGGAGCTGGAGCAAGGAGCAGGCGCAAGGAGGCAGGAGCAGGCCGGAGAAGGAGCAGGATGGCAAGCGTAGGGCAGGAGCAAGGAGCCGGAGCAAGGATGCAGGAGCAGGAGCAGGAGCAAAGGGCAGGAGCACAAGGGCAGGAGAAAGGAGCAGGAGAAGGACGCAGGACAGCAGCGGATGCAGGAGCAGGAGCAGGAGCAAAGGAGGGCAGGAGCAAAGGCGCCGGAGCAAGGAGGCAGGGGATCAAGAGCAGGCGCAGGAGCAGGAGAAGGAGAAGGATCGACAATGAGCAGGAGCAAGGAGAAGGAGCAAGGAGCAGGAGCAAGGAGAGGAGAGGCCAAGGAGCAGAGCAAGGAGCGGAGCAAGGAGAAGGGAGCGAAGGAGCAGGAGCAAGGAGCAGAGGCACGGACAGGAGCAAAAAGGAGCAGGAGCAAGGAGGCAGGAGGCAAGGGCAGAGCAAGGAGCAGGAGCAAGAGCGACAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAGGAGAGAGGAGCAAGGACGCAGAGCAAGGAGCAGGAGGCAAGGAGCAGGAAGCAAGGAGCATGGAGCAAGGGGAGCAGGAGCAAGGAGCAGGAGCAAGGAAGCAGGAGCAAGGAGCAGAGCAAGGATCAGGAGCATCCAGTGAGCAGAGGAGAAAGGCGGATGGGAGCAAGGAGCAGGAGCAGGGAGGAGCCAGGAGCATGGAGGCCAGGAGGCAGGAGCAAGGAGAAGGAGCCCGGAGCAGGAGCCAGGAGCAGGAGGCAAGGAGCAGGAGCAAGGAGCCCCAGGAAAGGGAGCAGGAGCAAGGAGCAGGTAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGATGCAAGGCGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAATGAGCAGGAGCACGGAGCAGGAGGCAAGGATGCAGGAGCTATGGGCAGGAGCAAGGAGAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAACAGGAGCACGGAGCAGGAGCTAAGGAGAGGAGCAGATGAGCAGGAGCAAGGGCAGGAGCAAGGAGCAGGAGCACGGAGCAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGGCAATTGAGCAGGAGCGCAAGGAGGCAGGAGGCACGGAGCAGGAGCAGGAGCGGAGCAAGGAGCAGGAGCATAGGAGCGGAGCCAAGGAGCAGAGCAAGGAGCCAGGAGCAAGGAGCAGGAGCAAGGAGCAAGTACAAGGTAGCGGAGCAGGGAGCAGGAGCAAGGAGAAGGAGCAAGGAGCAGGAGCACGGAGCAGGAGAAAGGAGCAGGAGCAATGAGCAGGAGCAAGGCGCAGGAGCAAGGAGCAGAGCAAGGAGCAGGAGCAAGGAAAGGAGCAGGTAGCAGGAGCAAGGAGCAGGAGCAAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAAAGGAGCCGGCAGCAATGTCAGGAGCAAGGAGAAGGAGCAAAGCCGGAGCAAGGAGCAGAGCAAGGAGCAGGAGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCTAAGGAGCAGGAGCACGGAGCAGGAGCAAGGAGCAGGAGCCAGGAGGCAGGAGCCAGGAGGCAGGAGCAAGGAGCAGGAGCAAGGAGAGGAGGCAAGGAGGGCTAGGAGCAAGGAGCGGAGCAAGGGAGCAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGAGCAGGAGAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGAGCAGGAGCAGGCGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAGGAGCAGGAGCAAGGAGCAGGACAAGGAGCAGGAGCAAGGAGCAGGAGCCAAGGAGCAGGAGCAAGGACAGGAGCATAGGAAGCCGAGCAAAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGGAGGCAGGAGCAAGGAGCAGGAGGAAAGGACCAGAGCCAGGGAGCAGGAGCAAGGAGCAGGAGCAAGTAGCCGGAGCAAGGAGAGGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAATGACAGAGCAAGGAGCAGGACAGGAGCAGGAGCAAGGGAAGCAGAGCAAGGAGGCAGGAGCAAGGAGAGGATGCAAGGAGCAGGAGCCAAGGCGCAGGAGCAAGGAGCAGAGAAGGAGCAGAGCAAGGAGGCAGGAGCAAGGGGCAGGAGCAAGGTAGCAGGAGCAAGGAGCAGGACAAGGATCAGGACAAGGAGCCAGGAGCAAGGAGCAGGAGCAGGAGCAGGAGCAAGGACAGGAGCAAGGAGCCAGGAGCAAAGGAGCAGAGCAAGGAGCCGGGGCAAAGCAGGAGCAAGGAGCAGGCGCAAGGAGCCGGAGCAAGAGCAGGAGCAAAGGAGCAGAGCAAGGGCAGGCTGCAAGGAGCAGGAGCACGGATCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAAGGAGCAGGAGCAAGGGGCAGGAGCAAGGGTCAGGAGCAAGAGCAGGAGCATAGGAGCTAGGAGCAAGGGGCAGGGCAAGGGGCAGGAGCAAGGAGGCAGAGCAGGAGCAGGAGCAAGGAGAGGAGCAAGGACAGGAGGGCAAGGGAGCAGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAGGAGCAGTGCAAGGAGCAGGAGCAAGGAGCAGTAGCAAGGCGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAATGAGGCAGGAGCAAGGAGCAGGAGCAAGTAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAAGGAGCGGAGCAAGGAGGCAGGAGCAAGAGCAGGAGCGAAGGAGGGAAGGAGCAAGGAGCAGAGCAAGGAGCAGGAGCAAGGAGTAAGGAGGAAAATGAGAAGGATCGGTACAAAGGATAAGGCCGAAAGAGAAGGAGAAATGCAGAAGTAGAAAAGATAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGGAGAAAATGAGAAGTAGAAAAGGAGGAAGGGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGATAAGGGAGAACGAGCAAGGATAAAGGAGTAAGGATAAAGAGAAGGAGAAAAGAAGGAGCAATGAGCAGTATAAATGAGAAGGAAAGCAAGGAGAATGAGCAAGGGAAGAGAAATGAGCATTAGAAAAATGTCATTATCAAGGATCAGGAGCAATGATTACAGTATCAAATAGTGAATTATAAAGGATGTAATGATAAATTATCAGGACTCAATTCATATCAATTAGCAGTGAAAATTATCATGATCAAGTGATCATTATCAAATATGAATTTAAGCAAGTTATAATGATCAAAATTATCATGACCTTATCATTATACAATTATAATTATCAATTCTCATATCAATGATCATTATCAATGTATCATTATCGAAGTATAATTTCAATTATCATATCAATTATCATATCATTATAATATCAATATCATTATCAATTAGCATTATCAATTATTCATGTATCAATTATCATTATCAATGATCATTATCAATTATCATTATCAATTATCTATTATCAATTATCATTACAAATTTATCATATCAATTATCATATCAATTTCATTATCAATTATCATTATCAATTATAATTATCAATTATCATTATCAATTATCATTATCATAAATATCATTATCA*NM:i:43ms:i:220AS:i:220nn:i:0tp:A:Pcm:i:3s1:i:40s2:i:0dv:f:0.0200</span><br><span class="line">m54174_171023_074758/9962478/22561_264544*00**00TGATAATGATATTTATGATAATGATAATTGATAATGATAATTGATAATTATAATTGATAATGATAATTGATAATGAAATTGATATGATAATTGATATGATAAATTTGTAATGATAATTGATAATAGATAATTGATAATGATAATTGATAATGATCATTGATAATGATAATTGATACATGAATAATTGATAATGCTAATTGATAATGATATTGATATTATAATGATATGATAATTGATATGATAATTGAAATTATACTTCGATAATGATACATTGATAATGATCATTGATATGAGAATTGATAATTATAATTGTATAATGATAAGGTCATGATAATTTTGATCATTATAACTTGCTTAAATTCATATTTGATAATGATCACTTGATCATGATAATTTTCACTGCTAATTGATATGAATTGAGTCCTGATAATTTATCATTACATCCTTTATAATTCACTATTTGATACTGTAATCATTGCTCCTGATCCTTGATAATGACATTTTTCTAATGCTCATTTCTCTTCCCTTGCTCATTCTCCTTGCTTTCCTTCTCATTTATACTGCTCATTGCTCCTTCTTTTCTCCTTCTCTTTATCCTTACTCCTTTATCCTTGCTCGTTCTCCCTTATCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTCTCCTTTCTCCCCTTCCTCCTTTTCTACTTCTCATTTTCTCCCTTCTCCTTTCTCCTTCTCCTTTCTCCTTATCTTTTCTACTTCTGCATTTCTCCTTCTCTTTCGGCCTTATCCTTTGTACCGATCCTTCTCATTTTCCTCCTTACTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTTCCCTCCTTCGCTCCTGCTCTTGCTCCTGCCTCCTTGCTCCGCTCCTTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTACTTGCTCCTGCTCCTTGCTCCTGCCTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCTACTGCTCCTTGCTCCTGCTCCTTGCACTGCTCCTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCTGCTCCCTTGCCCTCCTGTCCTTGCTCCTCTCCTTGCTCCTGCTCCTGCTCTGCCTCCTTGCTCCTGCCCCTTGCCCTGCCCCTTGCTCCTAGCTCCTATGCTCCTGCTCTTGCTCCTGACCCTTGCTCCTGCCCCTTGCTCCTGCTCCTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGATCCGTGCTCCTGCTCCTTGCAGCCTGCCCTTGCTCTGCTCCTTTGCTCCTGCTCTTGCTCCGGCTCCTTGCGCCTGCTCCTTGCTCCTGCTTTGCCCCGGCTCCTTGCTCTGCTCCTTTGCTCCTGGCTCCTTGCTCCTGTCCTTGCTCCTGCTCCTGCTCCTGCTCCTTGCTCCTGGCTCCTTGTCCTGATCCTTGTCCTGCTCCTTGCTCCTGCTACCTTGCTCCTGCCCCTTGCTCCTGCCTCCTTGCTCTGCTCCTTCTCTGCTCCTTGCTCCTGCGCCTTGGCTCCTGCTCCTTGCATCCTCTCCTTGCTCCTGCCTCCTTGCTCTGCTTCCCTTGCTCCTGCTCCTGTCCTGCTCCTTGCTCTGTCATTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCCTCTCCTTGCTCCGGCTACTTGCTCCTGCTCCTTGCTCCTGCTCCCTGGCTCTGGTCCTTTCCTCCTGCTCCTTGCTCCTGCCTCCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTTTGCTCGGCTTCCTATGCTCCTGTCCTTGCTCCTGCTCCTTGGCTCCTGCTCCTTGCTCCTGCTCCTTGTCCTGCTCCTTGCTCCTGCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCGCCTGCTCCTGCTCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTCTCCTGCTCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCCTTGCTCCGCTCCTTGCTCCTAGCCCTCCTTGCCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTGCCTCCTGGCTCCTGCCTCCTGGCTCCTGCTCCTTGCTCCTGCTCCGTGCTCCTGCTCCTTAGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCTCCTTGCTCCGGCTTTGCTCCTTCTCCTTGCTCCTGACATTGCTGCCGGCTCCTTTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCCTTGCTCCTGCTACCTGCTCCTTTCCTTGCTCCTGCTCCTTGCTCTGCTCCTTGCTCCTGCGCCTTGCTCCTGCTCATTGCTCCTGCTCCTTTCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCCCTGCTCCGCTACCTTGTACTTGCTCCTTGCTCCTGCTCCTTGCTCCTGGCTCCTTGCTCTGCTCCTTGGCTCCGCTCCTATGCTCCTGCTCCTTGCTCCGCTCCTGCTCCTGCTCCGTGCCTCCTGCCTCCTTGCGCTCCTGCTCAATTGCCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCTTGCTCCTGCTCCGTGCTCCTGCTCCTTGCTCCTGCCCTTGCTCCTGCTCATCTGCTCCTCTCCTTAGCTCCTGCTCCGTGCTCCTGTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTCTCCTTGCTCCTGCCCATAGCTCCTGCATCCTTGCCTCCTGCTCCGTGCTCCTGCTCATTGATCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCGCCTTGCATCCTGCCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGCTCCTTGCTACCTGCTCCTTGCTCCTGCTCCCTTTCCTGGGGCTCCTTGCTCCTGCTCCTTGCCTCCTGCTCCTGGCTCCTGCTCCGGGCTCCTTCTCCTTGCTCCTGCCTCCTGGCCTCCATGCTCCTGGCTCCTCCCTGCTCCTGCTCCTTGCTCCCATCCGCCTTTCTCCTCTGCTCACTGGATGCTCCTGATCCTTGCTCTGCTCCTTGCTCCTGCTTCCTTGCTCCTGCTCCTTGCTCCTGCTCCCCTTGCTCCATGCTCCTTGCTTCCTGCTCCTTGCCTCCTGCTCCTTGCTCTGCGTCCTTGCTCCTCTCTCCTTGCTCCCTGCTCCTTGCTCCTGCTCCTTGCTCCTGTCGCTCTTGCTCCTGCTCCTTGCTCTGCCCTTGCCTCCTGCCTCCTTGCTCCTGCTCCTTTTTGCTCCTGTCCGTGCCTCTGCTCCTTGCTCCTGCTCCTTCGCTCCCTTCTCCTTGCTCCGCTCCTTGCTCTGCTCCTTGGCCTCTCCTCTCCTTGCTCCTGCTCCTTGCTCCTTCTCCTTGCTCCTGCTCATTGTCGATCCTTCTCCTTCTCCTGCTCCTGCGCCTGCTCTTGATCCCCTGCCTCCTTGCTCCGGCGCCTTTGCTCCTGCCCTCCTTTGCTCCTGCTCCTGCTCCTGCATCCGCTGCTGTCCTGCGTCCTTCTCCTGCTCCTTTCTCCTGCCCTTGTGCTCCTGCCCTTTGCTCCTGCTCCTGCTCCTGCATCCTTGCTCCGGCTCCTTGCTCCTGCCCTACGCTTGCCATCCTGCTCCTTCTCCGGCCTGCTCCTGCCTCCTTGCGCCTGCTCCTTGCTCCAGCTCCTTGCTCCTGCTCCTGCTCCGCTCCTGCTCCTGCTCTTGCTCCTTGCTCCTTGCTCCTGCTCTTGCTCCTGC*</span><br><span class="line">m54174_171023_074758/9962478/22561_2645416kraken:taxid|1323664|NZ_CP012748.121984441903S12M1I12M1I12M1I4M1I6M1I2M1I12M1I39M1I9M1I6M5I4M4I7M1I2M1I5M1D6M1I12M1I12M1I12M1I13M1I11M2I5M1D8M2I22M1I13M1I23M1I12M1I12M1I10M1I3M2I10M3I5M1I6M1I3M1I16M1D6M1I12M2I6M1D3M1I2M1I7M1D4M1I5M1I7M1I12M1I6M7I3M1I3M1D6M1I11M1I12M1I12M2464S*00GCAGGAGCAAGAGCAGGAGCAAGGAGCAAGGAGCAAGAGCAGGAGCAGGAGCGGAGCAGGAGCAGGAGCAAGGAGCTGGAGCAAGGAGCAGGCGCAAGGAGGCAGGAGCAGGCCGGAGAAGGAGCAGGATGGCAAGCGTAGGGCAGGAGCAAGGAGCCGGAGCAAGGATGCAGGAGCAGGAGCAGGAGCAAAGGGCAGGAGCACAAGGGCAGGAGAAAGGAGCAGGAGAAGGACGCAGGACAGCAGCGGATGCAGGAGCAGGAGCAGGAGCAAAGGAGGGCAGGAGCAAAGGCGCCGGAGCAAGGAGGCAGGGGATCAAGAGCAGGCGCAGGAGCAGGAGAAGGAGAAGGATCGACAATGAGCAGGAGCAAGGAGAAGGAGCAAGGAGCAGGAGCAAGGAGAGGAGAGGCCAAGGAGCAGAGCAAGGAGCGGAGCAAGGAGAAGGGAGCGAAGGAGCAGGAGCAAGGAGCAGAGGCACGGACAGGAGCAAAAAGGAGCAGGAGCAAGGAGGCAGGAGGCAAGGGCAGAGCAAGGAGCAGGAGCAAGAGCGACAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAGGAGAGAGGAGCAAGGACGCAGAGCAAGGAGCAGGAGGCAAGGAGCAGGAAGCAAGGAGCATGGAGCAAGGGGAGCAGGAGCAAGGAGCAGGAGCAAGGAAGCAGGAGCAAGGAGCAGAGCAAGGATCAGGAGCATCCAGTGAGCAGAGGAGAAAGGCGGATGGGAGCAAGGAGCAGGAGCAGGGAGGAGCCAGGAGCATGGAGGCCAGGAGGCAGGAGCAAGGAGAAGGAGCCCGGAGCAGGAGCCAGGAGCAGGAGGCAAGGAGCAGGAGCAAGGAGCCCCAGGAAAGGGAGCAGGAGCAAGGAGCAGGTAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGATGCAAGGCGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAATGAGCAGGAGCACGGAGCAGGAGGCAAGGATGCAGGAGCTATGGGCAGGAGCAAGGAGAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAACAGGAGCACGGAGCAGGAGCTAAGGAGAGGAGCAGATGAGCAGGAGCAAGGGCAGGAGCAAGGAGCAGGAGCACGGAGCAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGGCAATTGAGCAGGAGCGCAAGGAGGCAGGAGGCACGGAGCAGGAGCAGGAGCGGAGCAAGGAGCAGGAGCATAGGAGCGGAGCCAAGGAGCAGAGCAAGGAGCCAGGAGCAAGGAGCAGGAGCAAGGAGCAAGTACAAGGTAGCGGAGCAGGGAGCAGGAGCAAGGAGAAGGAGCAAGGAGCAGGAGCACGGAGCAGGAGAAAGGAGCAGGAGCAATGAGCAGGAGCAAGGCGCAGGAGCAAGGAGCAGAGCAAGGAGCAGGAGCAAGGAAAGGAGCAGGTAGCAGGAGCAAGGAGCAGGAGCAAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAAAGGAGCCGGCAGCAATGTCAGGAGCAAGGAGAAGGAGCAAAGCCGGAGCAAGGAGCAGAGCAAGGAGCAGGAGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCTAAGGAGCAGGAGCACGGAGCAGGAGCAAGGAGCAGGAGCCAGGAGGCAGGAGCCAGGAGGCAGGAGCAAGGAGCAGGAGCAAGGAGAGGAGGCAAGGAGGGCTAGGAGCAAGGAGCGGAGCAAGGGAGCAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGAGCAGGAGAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGAGCAGGAGCAGGCGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAGGAGCAGGAGCAAGGAGCAGGACAAGGAGCAGGAGCAAGGAGCAGGAGCCAAGGAGCAGGAGCAAGGACAGGAGCATAGGAAGCCGAGCAAAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGGAGGCAGGAGCAAGGAGCAGGAGGAAAGGACCAGAGCCAGGGAGCAGGAGCAAGGAGCAGGAGCAAGTAGCCGGAGCAAGGAGAGGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAATGACAGAGCAAGGAGCAGGACAGGAGCAGGAGCAAGGGAAGCAGAGCAAGGAGGCAGGAGCAAGGAGAGGATGCAAGGAGCAGGAGCCAAGGCGCAGGAGCAAGGAGCAGAGAAGGAGCAGAGCAAGGAGGCAGGAGCAAGGGGCAGGAGCAAGGTAGCAGGAGCAAGGAGCAGGACAAGGATCAGGACAAGGAGCCAGGAGCAAGGAGCAGGAGCAGGAGCAGGAGCAAGGACAGGAGCAAGGAGCCAGGAGCAAAGGAGCAGAGCAAGGAGCCGGGGCAAAGCAGGAGCAAGGAGCAGGCGCAAGGAGCCGGAGCAAGAGCAGGAGCAAAGGAGCAGAGCAAGGGCAGGCTGCAAGGAGCAGGAGCACGGATCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAAGGAGCAGGAGCAAGGGGCAGGAGCAAGGGTCAGGAGCAAGAGCAGGAGCATAGGAGCTAGGAGCAAGGGGCAGGGCAAGGGGCAGGAGCAAGGAGGCAGAGCAGGAGCAGGAGCAAGGAGAGGAGCAAGGACAGGAGGGCAAGGGAGCAGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAGGAGCAGTGCAAGGAGCAGGAGCAAGGAGCAGTAGCAAGGCGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAATGAGGCAGGAGCAAGGAGCAGGAGCAAGTAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAAGGAGCGGAGCAAGGAGGCAGGAGCAAGAGCAGGAGCGAAGGAGGGAAGGAGCAAGGAGCAGAGCAAGGAGCAGGAGCAAGGAGTAAGGAGGAAAATGAGAAGGATCGGTACAAAGGATAAGGCCGAAAGAGAAGGAGAAATGCAGAAGTAGAAAAGATAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGGAGAAAATGAGAAGTAGAAAAGGAGGAAGGGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGAGAAGGAGAAAGGATAAGGGAGAACGAGCAAGGATAAAGGAGTAAGGATAAAGAGAAGGAGAAAAGAAGGAGCAATGAGCAGTATAAATGAGAAGGAAAGCAAGGAGAATGAGCAAGGGAAGAGAAATGAGCATTAGAAAAATGTCATTATCAAGGATCAGGAGCAATGATTACAGTATCAAATAGTGAATTATAAAGGATGTAATGATAAATTATCAGGACTCAATTCATATCAATTAGCAGTGAAAATTATCATGATCAAGTGATCATTATCAAATATGAATTTAAGCAAGTTATAATGATCAAAATTATCATGACCTTATCATTATACAATTATAATTATCAATTCTCATATCAATGATCATTATCAATGTATCATTATCGAAGTATAATTTCAATTATCATATCAATTATCATATCATTATAATATCAATATCATTATCAATTAGCATTATCAATTATTCATGTATCAATTATCATTATCAATGATCATTATCAATTATCATTATCAATTATCTATTATCAATTATCATTACAAATTTATCATATCAATTATCATATCAATTTCATTATCAATTATCATTATCAATTATAATTATCAATTATCATTATCAATTATCATTATCATAAATATCATTATCA*NM:i:95ms:i:432AS:i:432nn:i:0tp:A:Pcm:i:4s1:i:49s2:i:77dv:f:0.0701SA:Z:kraken:taxid|1323664|NZ_CP012748.1,2198449,-,1461S464M47I1921S,15,95;kraken:taxid|1323664|NZ_CP012748.1,2198443,-,1853S470M47I1523S,1,95;kraken:taxid|1323664|NZ_CP012748.1,2198444,-,683S469M51I2690S,4,106;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,2305S464M17I1107S,16,105;kraken:taxid|1323664|NZ_CP012748.1,2198456,-,2607S450M11I825S,22,93;kraken:taxid|1323664|NZ_CP012748.1,2198451,-,430S460M63I2940S,3,105;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,13S464M94I3322S,11,133;</span><br><span class="line">m54174_171023_074758/9962478/22561_264542064kraken:taxid|1323664|NZ_CP012748.12198449151461H7M1I12M1I7M1D4M1I12M1I4M1D10M1I10M1D24M1I18M2I9M1I8M1I12M2I9M1I2M6I7M1I13M5I5M1I7M1D4M1I10M1I2M1I12M1I12M1I12M2I13M1I11M1I11M1I5M1I7M1I5M1I8M1I12M1I5M1D4M1I2M1I4M2I2M1I7M5D5M1D7M2I21M1I24M4I8M1I12M1I12M1I4M1I20M1I12M1921H*00CAGGAGCAAGGCGCAGGAGCAAGGAGCAGAGCAAGGAGCAGGAGCAAGGAAAGGAGCAGGTAGCAGGAGCAAGGAGCAGGAGCAAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGATCAAAGGAGCCGGCAGCAATGTCAGGAGCAAGGAGAAGGAGCAAAGCCGGAGCAAGGAGCAGAGCAAGGAGCAGGAGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCTAAGGAGCAGGAGCACGGAGCAGGAGCAAGGAGCAGGAGCCAGGAGGCAGGAGCCAGGAGGCAGGAGCAAGGAGCAGGAGCAAGGAGAGGAGGCAAGGAGGGCTAGGAGCAAGGAGCGGAGCAAGGGAGCAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGAGCAGGAGAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGAGCAGGAGCAGGCGCAAGGAGCAGGAGC*NM:i:95ms:i:420AS:i:420nn:i:0tp:A:Pcm:i:6s1:i:80s2:i:0dv:f:0.0526SA:Z:kraken:taxid|1323664|NZ_CP012748.1,2198444,-,903S469M57I2464S,1,95;kraken:taxid|1323664|NZ_CP012748.1,2198443,-,1853S470M47I1523S,1,95;kraken:taxid|1323664|NZ_CP012748.1,2198444,-,683S469M51I2690S,4,106;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,2305S464M17I1107S,16,105;kraken:taxid|1323664|NZ_CP012748.1,2198456,-,2607S450M11I825S,22,93;kraken:taxid|1323664|NZ_CP012748.1,2198451,-,430S460M63I2940S,3,105;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,13S464M94I3322S,11,133;</span><br><span class="line">m54174_171023_074758/9962478/22561_26454272kraken:taxid|1323664|NZ_CP012748.1219844501010S9M1I2M1I4M1I8M1I12M1I5M1D6M1I12M1I39M1I11M2I3M1I10M1I22M1I13M1I23M1I12M1I12M1I10M1I3M2I11M1I1M2I3M1I6M1I3M1I16M1D6M1I13M4D7M1D5M2I7M1D4M1I5M1I6M1I13M1I6M1I9M1I2M1D7M1I11M1I10M1I15M1I10M1I13M1I12M1I12M1I7M1D4M1I13M2386S*00**   NM:i:86ms:i:418AS:i:418nn:i:0tp:A:Scm:i:6s1:i:77dv:f:0.0589</span><br><span class="line">m54174_171023_074758/9962478/22561_264542064kraken:taxid|1323664|NZ_CP012748.1219844311853H19M1I22M4I8M1I12M1I38M1I18M2I9M1I3M1I5M1I12M1I24M1I12M2I24M2I3M1I3M1D5M3I12M1I13M2I3M1I8M1I11M2I8M1D3M1I2M1I11M1I12M1I12M1I5M1D3M1D2M1I12M1I12M1I13M2I1M3I4M1I10M1D14M2I2M1I4M1D4M1I4M1I8M1I5M1D4M1I2M1I12M2I12M1I7M1D10M1523H*00CAGGAGCAAGAGCAGGAGCAAGGAGCAGGAGCAAGAGCAGGAGAGGGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGGCAGGAGCAGGAGCAGGCGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGGAGCAAGGAGCAGGAGCAAGGAGCAGGACAAGGAGCAGGAGCAAGGAGCAGGAGCCAAGGAGCAGGAGCAAGGACAGGAGCATAGGAAGCCGAGCAAAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGGAGGCAGGAGCAAGGAGCAGGAGGAAAGGACCAGAGCCAGGGAGCAGGAGCAAGGAGCAGGAGCAAGTAGCCGGAGCAAGGAGAGGGCAAGGAGCAGGAGCAAGGAGCAGGAGCAAGGAGCAGGAGCAATGACAGAGCAAGGAGCAGGACAGGAGCAGGAGCAAGGGAAGCAGAGCAAGGAGGCAGGAGCAAGGAGAGGATGCAAGGAGCAGGAGCCAAGGCGCAGGAGCAAGGAGCAGAGAAGGAGC*NM:i:95ms:i:414AS:i:414nn:i:0tp:A:Pcm:i:7s1:i:60s2:i:97dv:f:0.0466SA:Z:kraken:taxid|1323664|NZ_CP012748.1,2198444,-,903S469M57I2464S,1,95;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,1461S464M47I1921S,15,95;kraken:taxid|1323664|NZ_CP012748.1,2198444,-,683S469M51I2690S,4,106;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,2305S464M17I1107S,16,105;kraken:taxid|1323664|NZ_CP012748.1,2198456,-,2607S450M11I825S,22,93;kraken:taxid|1323664|NZ_CP012748.1,2198451,-,430S460M63I2940S,3,105;kraken:taxid|1323664|NZ_CP012748.1,2198449,-,13S464M94I3322S,11,133;</span><br></pre></td></tr></table></figure><p>As can be seen, the same sequence had been mapped to different reference sequences, and it’s been reported several times, with the exactly same line content.</p><p>This is a limitation of <code>minimap2</code>, as reported: <a href="https://github.com/lh3/minimap2/issues/164" target="_blank" rel="noopener">Multiple empty hits?</a> and <a href="https://github.com/lh3/minimap2/issues/141" target="_blank" rel="noopener">How does using a multi part index affect the accuracy?</a>.</p><p>So to handle the output of <code>minimap</code> can be very troublesome, though people already gave preliminary solutions.</p><h3 id="blasr"><a class="markdownIt-Anchor" href="#blasr"></a> blasr</h3><p><a href="https://github.com/PacificBiosciences/blasr" target="_blank" rel="noopener">blasr</a> is the first official PacBio® long read aligner.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/anaconda2/bin/blasr third_all.fasta <span class="variable">$contaminants</span> --nproc <span class="variable">$PPN</span> --out blasr.bad --unaligned blasr.good</span></span><br></pre></td></tr></table></figure><p>Related: <a href="https://github.com/PacificBiosciences/blasr/issues/347" target="_blank" rel="noopener">output unmapped reads</a>.</p><p>But it went wrong:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] 2018-07-02T18:56:18 [blasr] started.</span><br><span class="line">ERROR! Reading fasta files greater than 4Gbytes is not supported.</span><br></pre></td></tr></table></figure><p>What?! My fasta is about 60G. If I wanted use <code>blasr</code>, I had to split the input into small ones, but, I didn’t want to.</p><h3 id="mashmap"><a class="markdownIt-Anchor" href="#mashmap"></a> MashMap</h3><p><code>MashMap</code> is a fast approximate aligner for long DNA sequences. It’s very fast and easy to use.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PPN=8</span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/mashmap-Linux64-v2.0/mashmap -r <span class="variable">$contaminants</span> -q third_all.fasta -s 500 -t <span class="variable">$PPN</span> --pi 70 -o mashmap1.out</span></span><br></pre></td></tr></table></figure><p><code>-s</code> is the minimum query length, and <code>--pi</code> is the minimum identity to be reported.</p><p>The output of <code>MashMap</code> is like this. Separated by space, it is <code>query name, length, 0-based start, end, strand, target name, length, start, end and mapping nucleotide identity</code> in turn.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m161109_080520_42256_c101052872550000001823247601061737_s1_p0/104/24935_31494 6559 0 4999 - NC_037282.1 2038340 596479 601478 82.1711</span><br><span class="line">m161109_080520_42256_c101052872550000001823247601061737_s1_p0/357/31541_41029 9488 0 4999 - NC_004326.2 1343557 117176 122175 81.9933</span><br><span class="line">m161109_080520_42256_c101052872550000001823247601061737_s1_p0/562/0_12626 12626 7626 12625 + NC_001224.1 85779 50909 55908 82.2314</span><br></pre></td></tr></table></figure><p>Since <code>MashMap</code> only outputs the sequences that can be aligned to the library, it’s more in line with my needs.</p><p>Here is also a thread that talking about contamination: <a href="https://github.com/marbl/MashMap/issues/6" target="_blank" rel="noopener">Decontamination of bacterial sequences in an assembly</a>. The author suggested that “One more thing that may be helpful for you is to include the representative genome (corresponding to your assembly) in the database as well. This would help improve the specificity of the method for correct portions of your assembly.”</p><h2 id="in-summary"><a class="markdownIt-Anchor" href="#in-summary"></a> In summary</h2><p>In summary, I removed contaminants in reads by the following steps:</p><ul><li>Prepare contamination library (bacteria, viral, fungi, protozoa, and archaea from Refseq and mtDNAs).</li><li>Use <code>BBDuc</code> to remove contaminants from illumina short reads.</li><li>Use <code>MashMap</code> to remove contaminants from PacBio long reads.</li></ul><p>And for the long reads, the tools I’ve tried:</p><ul><li>mapPacBio: very slow.</li><li>minimap2: fast, but the results were not so easy to use for my purpose.</li><li>blasr: cannot handle files large than 4G.</li><li>MashMap: meet my needs.</li></ul><p>There are some other long-reads mapper, and people also try to tune the parameters of short-reads aligner to work with long-reads. There are some threads/posts talking about this:</p><ul><li><a href="https://www.biostars.org/p/116696/" target="_blank" rel="noopener">Question: Long read alignment</a></li><li><a href="https://www.biostars.org/p/130978/" target="_blank" rel="noopener">https://www.biostars.org/p/130978/</a></li><li><a href="https://davetang.org/muse/2012/10/12/mapping-long-reads-with-bowtie/" target="_blank" rel="noopener">Mapping long reads with Bowtie</a></li><li><a href="https://groups.google.com/forum/#!searchin/rna-star/starlong/rna-star/-2mBTPWRCJY/PKSPCNcade8J" target="_blank" rel="noopener">STAR: segmentation fault when using long reads</a></li></ul><p>I don’t really understand the “mapping” things now, but I expect that there will be several dominant tools for long-reads mapping, just as short-reads mapping.</p><h2 id="useful-links"><a class="markdownIt-Anchor" href="#useful-links"></a> Useful links</h2><ul><li><a href="https://www.biostars.org/p/244912/" target="_blank" rel="noopener">Question: Removing contaminations from PacBio reads</a></li><li><a href="https://www.ncbi.nlm.nih.gov/genome/doc/ftpfaq/#allcomplete" target="_blank" rel="noopener">How can I download RefSeq data for all complete bacterial genomes?</a></li><li><a href="http://seqanswers.com/forums/showthread.php?t=41288" target="_blank" rel="noopener">Introducing BBSplit: Read Binning Tool for Metagenomes and Contaminated Libraries</a></li><li><a href="http://seqanswers.com/forums/showthread.php?t=58221" target="_blank" rel="noopener">Yes … BBMap can do that!</a></li><li><a href="https://github.com/HRGV/DGHM2017_assembly/wiki/From-raw-reads-to-assembly---STEP-by-STEP" target="_blank" rel="noopener">From raw reads to assembly STEP by STEP</a></li><li><a href="http://seqanswers.com/forums/showthread.php?t=78397" target="_blank" rel="noopener">Removing contamination with BBDUK</a></li><li><a href="https://www.biostars.org/p/143019/" target="_blank" rel="noopener">Question: Tool to separate human and mouse rna seq reads</a></li></ul><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180628: create the note.</li><li>20180703: complete the note.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Purpose in short: I wanted to remove potential contaminants in the raw sequencing reads, both Illumina (PE and MPE) and PacBio long reads
      
    
    </summary>
    
      <category term="reads" scheme="https://yiweiniu.github.io/blog/categories/reads/"/>
    
      <category term="contamination" scheme="https://yiweiniu.github.io/blog/categories/reads/contamination/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="contamination" scheme="https://yiweiniu.github.io/blog/tags/contamination/"/>
    
      <category term="reads" scheme="https://yiweiniu.github.io/blog/tags/reads/"/>
    
      <category term="BBDuk" scheme="https://yiweiniu.github.io/blog/tags/BBDuk/"/>
    
      <category term="MashMap" scheme="https://yiweiniu.github.io/blog/tags/MashMap/"/>
    
      <category term="long-reads" scheme="https://yiweiniu.github.io/blog/tags/long-reads/"/>
    
      <category term="long-reads alignment" scheme="https://yiweiniu.github.io/blog/tags/long-reads-alignment/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: wtdbg</title>
    <link href="https://yiweiniu.github.io/blog/2018/06/Genome-Assembly-Pipeline-wtdbg/"/>
    <id>https://yiweiniu.github.io/blog/2018/06/Genome-Assembly-Pipeline-wtdbg/</id>
    <published>2018-06-30T07:16:55.000Z</published>
    <updated>2018-07-03T10:49:59.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p><code>wtdbg</code> has two git repos: <a href="https://github.com/ruanjue/wtdbg" target="_blank" rel="noopener">wtdbg</a> and <a href="https://github.com/ruanjue/wtdbg-1.2.8" target="_blank" rel="noopener">wtdbg-1.2.8</a>, and the author Jue Ruan (who also developed <a href="https://github.com/ruanjue/smartdenovo" target="_blank" rel="noopener">SMARTdenovo</a>) introduces them as:</p><blockquote><p>wtdbg: A fuzzy Bruijn graph approach to long noisy reads assembly. wtdbg is desiged to assemble huge genomes in very limited time, it requires a PowerPC with multiple-cores and very big RAM (1Tb+). wtdbg can assemble a 100 X human pacbio dataset within one day.</p></blockquote><blockquote><p>wtdbg-1.2.8: Important update of wtdbg</p></blockquote><p>Jue Ruan <a href="https://github.com/ruanjue/wtdbg-1.2.8/issues/2#issuecomment-372202134" target="_blank" rel="noopener">preferred <code>wtdbg-1.2.8</code></a>.</p><blockquote><p>In personal feeling, I like wtdbg-1.2.8 more than SMARTdenovo and wtdbg-1.1.006.</p></blockquote><p>This tool hasn’t been published now (20180307), and I found it in an evaluation paper from BIB:</p><blockquote><p>Jayakumar V, Sakakibara Y. Comprehensive evaluation of non-hybrid genome assembly tools for third-generation PacBio long-read sequence data. Briefings in Bioinformatics. 2017 Nov 3:bbx147-bbx147. doi:10.1093/bib/bbx147</p></blockquote><p>My feelings:</p><ul><li>very fast</li><li>easy to install</li><li>easy to use</li><li>docs and discussions about this tool is limited.</li><li>aggressive</li><li>good N50 (at least in our two genome projects, an insect and a plant)</li><li>relatively bad completeness</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><p>Because <code>wtdbg</code> has two different versions and I didn’t know which one is more suitable for me, I just tried both.</p><h3 id="wtdbg-v11006"><a class="markdownIt-Anchor" href="#wtdbg-v11006"></a> wtdbg v1.1.006</h3><h4 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h4><p>I got <a href="https://github.com/ruanjue/wtdbg/issues/4" target="_blank" rel="noopener">a problem</a> when compile the software. The issue is caused by the <code>CPATH</code> of our OS, and eventually solved with the help of Jue Ruan.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ruanjue/wtdbg.git &amp;&amp; cd wtdbg</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h4 id="examples-in-the-doc"><a class="markdownIt-Anchor" href="#examples-in-the-doc"></a> Examples in the doc</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> assembly of contigs</span></span><br><span class="line">wtdbg-1.1.006 -t 96 -i pb-reads.fa -o dbg -H -k 21 -S 1.02 -e 3 2&gt;&amp;1 | tee log.wtdbg</span><br><span class="line"><span class="meta">#</span><span class="bash"> -t: number of threads, please <span class="built_in">type</span> <span class="string">'wtdbg-1.1.006 -h'</span> to get a document</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -i: you can <span class="built_in">set</span> more than one sequences files, such as -i 1.fa. -i 2.fq -i 3.fa.gz -i 4.fq.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o: the prefix of results</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -S: 1.01 will use all kmers, 1.02 will use half by sumsampling, 1.04 will use 1/4, and so on</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     2.01 will use half by picking minimizers, but not fully tested</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e: <span class="keyword">if</span> too low coverage(&lt; 30 X), try to <span class="built_in">set</span> -e 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> please note that dbg.ctg.fa is full of errors from raw reads</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> first round of polishment</span></span><br><span class="line">wtdbg-cns -t 96 -i dbg.ctg.lay -o dbg.ctg.lay.fa -k 15 2&gt;&amp;1 | tee log.cns.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> dbg.ctg.lay.fa is the polished contigs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> possible, further polishment</span></span><br><span class="line">minimap -t 96 -L 100 dbg.ctg.lay.fa pb-reads.fa 2&gt; &gt;(tee log.minimap) | best_minimap_hit.pl | awk '&#123;print $6"\t"$8"\t"$9"\t"$1"\t"$5"\t"$3"\t"$4&#125;' &gt;dbg.map</span><br><span class="line">map2dbgcns dbg.ctg.lay.fa pb-reads.fa dbg.map &gt;dbg.map.lay</span><br><span class="line">wtdbg-cns -t 96 -i dbg.map.lay -o dbg.map.lay.fa -k 13 2&gt;&amp;1 | tee log.cns.2</span><br><span class="line"><span class="meta">#</span><span class="bash"> you need to concat all reads into one file <span class="keyword">for</span> minimap and map2dbgcns</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dbg.map.lay.fa is the final contigs</span></span><br></pre></td></tr></table></figure><h3 id="wtdbg-v128"><a class="markdownIt-Anchor" href="#wtdbg-v128"></a> wtdbg v1.2.8</h3><h4 id="install-2"><a class="markdownIt-Anchor" href="#install-2"></a> Install</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git https://github.com/ruanjue/wtdbg-1.2.8.git &amp;&amp; cd wtdbg-1.2.8</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>For higher error rate long sequences</strong></p><ul><li>Decrease <code>-p</code>. Try <code>-p 19</code> or <code>-p 17</code></li><li>Decrease <code>-S.</code> Try <code>-S</code> 2 or <code>-S</code> 1</li></ul><p>Both will increase computing time.</p><p><strong>For very high coverage</strong></p><ul><li>Increase <code>--edge-min</code>. Try <code>--edge-min 4</code>, or higher.</li></ul><p><strong>For low coverage</strong></p><ul><li>Decrease <code>--edge-min</code>. Try <code>--edge-min 2 --rescue-low-cov-edges</code>.</li></ul><p><strong>Filter reads</strong></p><ul><li><code>--tidy-reads 5000</code>. Will filtered shorter sequences. If names in format of <code>\/\d+_\d+$</code>, will selected the longest subread.</li></ul><p><strong>Consensus</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wtdbg-cns -t 64 -i dbg.ctg.lay -o dbg.ctg.lay.fa</span><br></pre></td></tr></table></figure><p>The output file <code>dbg.ctg.lay.fa</code> is ready for further polished by <code>PILON</code> or <code>QUIVER</code>.</p><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><p>I’ve tried two versions of <code>wtdbg</code> and diferent parameter combinations in two genome assembly projects. The parameters and the logs/stats received are as follows:</p><h3 id="an-insect"><a class="markdownIt-Anchor" href="#an-insect"></a> An insect</h3><ul><li>The species: high heterogeneity, high AT, high repetition.</li><li>Genome size: male 790M, female 830M.</li><li>Data used：about 70X PacBio long-reads.</li><li>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</li></ul><h4 id="wtdbg-v11006-2"><a class="markdownIt-Anchor" href="#wtdbg-v11006-2"></a> wtdbg v1.1.006</h4><h5 id="run1-with-h-k-21-s-102-e-3"><a class="markdownIt-Anchor" href="#run1-with-h-k-21-s-102-e-3"></a> run1, with <code>-H -k 21 -S 1.02 -e 3</code>:</h5><p>stats：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total base: 607971510</span><br><span class="line">%GC: 32.21</span><br><span class="line">num: 4655</span><br><span class="line">min: 2700</span><br><span class="line">max: 6594103</span><br><span class="line">avg: 130606</span><br><span class="line">N50: 573208</span><br><span class="line">N90: 46228</span><br></pre></td></tr></table></figure><h4 id="wtdbg-v128-2"><a class="markdownIt-Anchor" href="#wtdbg-v128-2"></a> wtdbg v1.2.8</h4><h5 id="run1-with-defalult-k-0-p-21-s-4"><a class="markdownIt-Anchor" href="#run1-with-defalult-k-0-p-21-s-4"></a> run1, with defalult <code>-k 0 -p 21 -S 4</code>:</h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total base: 757804309</span><br><span class="line">%GC: 32.37</span><br><span class="line">num: 20960</span><br><span class="line">min: 2247</span><br><span class="line">max: 3846453</span><br><span class="line">avg: 36154</span><br><span class="line">N50: 103681</span><br><span class="line">N90: 12128</span><br></pre></td></tr></table></figure><h5 id="run2-with-edge-min-2-rescue-low-cov-edges-tidy-reads-5000-because-median-node-depth-6-less-than-20"><a class="markdownIt-Anchor" href="#run2-with-edge-min-2-rescue-low-cov-edges-tidy-reads-5000-because-median-node-depth-6-less-than-20"></a> run2, with <code>--edge-min 2 --rescue-low-cov-edges --tidy-reads 5000</code> (Because median node depth = 6, less than 20)</h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total base: 845834770</span><br><span class="line">%GC: 32.51</span><br><span class="line">num: 19555</span><br><span class="line">min: 2030</span><br><span class="line">max: 2025061</span><br><span class="line">avg: 43254</span><br><span class="line">N50: 158013</span><br><span class="line">N90: 14248</span><br></pre></td></tr></table></figure><h5 id="run3-with-k-15-p-0-s-1-rescue-low-cov-edges-tidy-reads-5000"><a class="markdownIt-Anchor" href="#run3-with-k-15-p-0-s-1-rescue-low-cov-edges-tidy-reads-5000"></a> run3, with <code>-k 15 -p 0 -S 1 --rescue-low-cov-edges --tidy-reads 5000</code></h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN795503989</span><br><span class="line">Size_withoutN795503989</span><br><span class="line">Seq_Num12557</span><br><span class="line">Mean_Size63351</span><br><span class="line">Median_Size15690</span><br><span class="line">Longest_Seq7257493</span><br><span class="line">Shortest_Seq2277</span><br><span class="line">GC_Content32.44</span><br><span class="line">N50308340</span><br><span class="line">N9021383</span><br></pre></td></tr></table></figure><h5 id="run4-with-k-0-p-19-s-2-rescue-low-cov-edges-tidy-reads-5000"><a class="markdownIt-Anchor" href="#run4-with-k-0-p-19-s-2-rescue-low-cov-edges-tidy-reads-5000"></a> run4, with <code>-k 0 -p 19 -S 2 --rescue-low-cov-edges --tidy-reads 5000</code></h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN780618272</span><br><span class="line">Size_withoutN780618272</span><br><span class="line">Seq_Num11722</span><br><span class="line">Mean_Size66594</span><br><span class="line">Median_Size16335</span><br><span class="line">Longest_Seq8184393</span><br><span class="line">Shortest_Seq2547</span><br><span class="line">GC_Content32.4</span><br><span class="line">N50294217</span><br><span class="line">N9023008</span><br></pre></td></tr></table></figure><h5 id="run5-with-tidy-reads-5000-k-21-p-0-s-2-rescue-low-cov-edges"><a class="markdownIt-Anchor" href="#run5-with-tidy-reads-5000-k-21-p-0-s-2-rescue-low-cov-edges"></a> run5, with <code>--tidy-reads 5000 -k 21 -p 0 -S 2 --rescue-low-cov-edges</code></h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN843085698</span><br><span class="line">Size_withoutN843085698</span><br><span class="line">Seq_Num26341</span><br><span class="line">Mean_Size32006</span><br><span class="line">Median_Size18982</span><br><span class="line">Longest_Seq491063</span><br><span class="line">Shortest_Seq2992</span><br><span class="line">GC_Content32.51</span><br><span class="line">N5054544</span><br><span class="line">N9013737</span><br></pre></td></tr></table></figure><h5 id="run6-with-k-0-p-21-s-4-aln-noskip"><a class="markdownIt-Anchor" href="#run6-with-k-0-p-21-s-4-aln-noskip"></a> run6, with <code>-k 0 -p 21 -S 4 --aln-noskip</code></h5><p>After discussion with the author, he suggested me to use <code>--aln-noskip</code>.</p><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN726925732</span><br><span class="line">Size_withoutN726925732</span><br><span class="line">Seq_Num15983</span><br><span class="line">Mean_Size45481</span><br><span class="line">Median_Size12714</span><br><span class="line">Longest_Seq2523944</span><br><span class="line">Shortest_Seq2290</span><br><span class="line">GC_Content32.21</span><br><span class="line">N50164635</span><br><span class="line">N9014464</span><br></pre></td></tr></table></figure><h5 id="run7-with-k-15-p-0-s-1-rescue-low-cov-edges-tidy-reads-5000-aln-noskip"><a class="markdownIt-Anchor" href="#run7-with-k-15-p-0-s-1-rescue-low-cov-edges-tidy-reads-5000-aln-noskip"></a> run7, with <code>-k 15 -p 0 -S 1 --rescue-low-cov-edges --tidy-reads 5000 --aln-noskip</code></h5><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN762713695</span><br><span class="line">Size_withoutN762713695</span><br><span class="line">Seq_Num9803</span><br><span class="line">Mean_Size77804</span><br><span class="line">Median_Size15366</span><br><span class="line">Longest_Seq11163143</span><br><span class="line">Shortest_Seq2449</span><br><span class="line">GC_Content32.22</span><br><span class="line">N50488952</span><br><span class="line">N9025913</span><br></pre></td></tr></table></figure><p>After all the experiments, I’m not sure what to do next (try more or move on). As suggeested by Jue Ruan, N50 contig of ~500kb is good enough for scaffolding and genomic analysis. So I should try to evaluate the assembly and improve it while trying other tools.</p><h3 id="a-plant"><a class="markdownIt-Anchor" href="#a-plant"></a> A plant</h3><ul><li>The species: high heterogeneity, high repetition.</li><li>Genome size: 2.1G.</li><li>Data used：more than 100X PacBio long reads.</li><li>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</li></ul><h4 id="wtdbg-v11006-3"><a class="markdownIt-Anchor" href="#wtdbg-v11006-3"></a> wtdbg v1.1.006</h4><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run1, version 1.1.006</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/wtdbg/wtdbg -t <span class="variable">$PPN</span> -i <span class="variable">$WORKDIR</span>/data/Pacbio/all.fq.gz -o run1 -H -k 21 -S 1.02 -e 3 2&gt;&amp;1 | tee log.run1</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/wtdbg/wtdbg-cns -t <span class="variable">$PPN</span> -i run1.ctg.lay -o run1.ctg.lay.fa -k 15 2&gt;&amp;1 | tee log.run1.cns.1</span></span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN2105945650</span><br><span class="line">Size_withoutN2105945650</span><br><span class="line">Seq_Num21871</span><br><span class="line">Mean_Size96289</span><br><span class="line">Median_Size48435</span><br><span class="line">Longest_Seq2968570</span><br><span class="line">Shortest_Seq2531</span><br><span class="line">GC_Content38.27</span><br><span class="line">N50194480</span><br><span class="line">L502523</span><br><span class="line">N9040454</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><h4 id="wtdbg-v128-3"><a class="markdownIt-Anchor" href="#wtdbg-v128-3"></a> wtdbg  v1.2.8</h4><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run2, version 1.2.8</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/wtdbg-1.2.8/wtdbg-1.2.8 -t <span class="variable">$PPN</span> -i <span class="variable">$WORKDIR</span>/data/Pacbio/all.fq.gz -o run2</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/wtdbg-1.2.8/wtdbg-cns -t <span class="variable">$PPN</span> -i run2.ctg.lay -o run2.ctg.lay.fa</span></span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN1924031835</span><br><span class="line">Size_withoutN1924031835</span><br><span class="line">Seq_Num37933</span><br><span class="line">Mean_Size50721</span><br><span class="line">Median_Size14836</span><br><span class="line">Longest_Seq2424157</span><br><span class="line">Shortest_Seq2006</span><br><span class="line">GC_Content38.75</span><br><span class="line">N50184177</span><br><span class="line">L502391</span><br><span class="line">N9017404</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><h3 id="where-to-go-next"><a class="markdownIt-Anchor" href="#where-to-go-next"></a> Where to go next?</h3><p>I asked Jue Ruan that <a href="https://github.com/ruanjue/wtdbg-1.2.8/issues/5" target="_blank" rel="noopener">if it is necessary to run consensus tools on the results of <code>wtdbg</code> or <code>smartdenovo</code></a>, he said:</p><blockquote><p>The inside consensus tool <code>wtdbg-cns</code> aims to provide a quick way to reduce sequencing errors. It is suggested to use <code>Quiver</code> and/or <code>Pilon</code> to polish the consensus sequences after you feel happy with the assembly. Usually, <code>wtdbg-cns</code> can reduce error rate down to less than 1%, which can be well-aligned by short reads.</p></blockquote><h2 id="useful-links"><a class="markdownIt-Anchor" href="#useful-links"></a> Useful links</h2><ul><li><a href="https://github.com/ruanjue/wtdbg-1.2.8/issues/2" target="_blank" rel="noopener">Discussions about “Optimisation of parameters”</a></li><li><a href="https://github.com/ruanjue/wtdbg-1.2.8/issues/5" target="_blank" rel="noopener">if it is necessary to run consensus tools on the results of wtdbg or smartdenovo</a></li></ul><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180307: create the note.</li><li>20180630: add the ‘A plant’ part.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;wtdbg&lt;/code&gt; has two git repos: &lt;a h
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="TGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/TGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly/"/>
    
      <category term="TGS genome assembly" scheme="https://yiweiniu.github.io/blog/tags/TGS-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Find Contamination in Genome Assembly by Kraken</title>
    <link href="https://yiweiniu.github.io/blog/2018/06/Find-Contamination-in-Genome-Assembly-by-Kraken/"/>
    <id>https://yiweiniu.github.io/blog/2018/06/Find-Contamination-in-Genome-Assembly-by-Kraken/</id>
    <published>2018-06-28T05:45:10.000Z</published>
    <updated>2018-06-30T07:11:24.726Z</updated>
    
    <content type="html"><![CDATA[<p>Purpose in short: I want to remove potential contaminants in the genome assembly, and Kraken is a tool designed for that.</p><h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p>From <a href="http://ccb.jhu.edu/software/kraken" target="_blank" rel="noopener">its webpage</a>:</p><blockquote><p>Kraken is a system for assigning taxonomic labels to short DNA sequences, usually obtained through metagenomic studies. Previous attempts by other bioinformatics software to accomplish this task have often used sequence alignment or machine learning techniques that were quite slow, leading to the development of less sensitive but much faster abundance estimation programs. Kraken aims to achieve high sensitivity and high speed by utilizing exact alignments of k-mers and a novel classification algorithm.<br><br>In its fastest mode of operation, for a simulated metagenome of 100 bp reads, Kraken processed over 4 million reads per minute on a single core, over 900 times faster than Megablast and over 11 times faster than the abundance estimation program MetaPhlAn. Kraken’s accuracy is comparable with Megablast, with slightly lower sensitivity and very high precision.<br><br>Kraken is written in C++ and Perl, and is designed for use with the Linux operating system. We have also successfully compiled and run it under the Mac OS.</p></blockquote><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><p>See <a href="https://github.com/DerrickWood/kraken/blob/master/docs/MANUAL.markdown" target="_blank" rel="noopener">Kraken manual</a> for full instructions.</p><h3 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h3><p>Download the latest <a href="https://github.com/DerrickWood/kraken/releases" target="_blank" rel="noopener">release</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> unzip kraken-1.1.zip &amp;&amp; <span class="built_in">cd</span> kraken-1.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./install_kraken.sh /software/kraken.1.1</span></span><br></pre></td></tr></table></figure><p>If you want to build your own dabase, <a href="http://www.cbcb.umd.edu/software/jellyfish/" target="_blank" rel="noopener">jellyfish</a> <strong>version 1</strong> should be in your <code>PATH</code>.</p><h3 id="build-standard-kraken-database"><a class="markdownIt-Anchor" href="#build-standard-kraken-database"></a> Build standard Kraken database</h3><p>The standard Kraken database includes bacterial, archeal, and viral genomes in Refseq at the time of the build.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> bioBrain</span></span><br><span class="line">TOOLDIR=/software</span><br><span class="line">path2kraken=$TOOLDIR/kraken.1.1</span><br><span class="line"></span><br><span class="line">DBNAME=/Kraken_DB</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">path2kraken/kraken-build --standard --threads 16 --db <span class="variable">$DBNAME</span></span></span><br></pre></td></tr></table></figure><p>If any step (including the initial downloads) fails, the build process will abort. However, kraken-build will produce checkpoints throughout the installation process, and will restart the build at the last incomplete step if you attempt to run the same command again on a partially-built database.</p><h3 id="build-custom-kraken-database"><a class="markdownIt-Anchor" href="#build-custom-kraken-database"></a> Build custom Kraken database</h3><p>Because the standard Kraken database does not include fungi and protozoa, which I want to include in my analysis.</p><p>I found <a href="https://github.com/sschmeier/refseq2kraken" target="_blank" rel="noopener">refseq2kraken</a>, which facilitates the downloading and preparation of Kraken database.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TOOLDIR=/software</span><br><span class="line">path2kraken=$TOOLDIR/kraken.1.1</span><br><span class="line"></span><br><span class="line">DBNAME=Kraken_DB_201806</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install refseq2kraken</span></span><br><span class="line">git clone https://github.com/sschmeier/refseq2kraken.git refseq2kraken</span><br><span class="line">cd refseq2kraken</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Download refseq =&gt; here only <span class="string">"Complete Genome"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> assemblies, e.g. the default</span></span><br><span class="line">python getRefseqGenomic.py -p 8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> convert to kraken format =&gt; again only <span class="string">"Complete Genome"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> assemblies here, e.g. the default</span></span><br><span class="line">python getKrakenFna.py -p 8 $DBNAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> build a new minikraken database</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> download taxonomy</span></span><br><span class="line">kraken-build --download-taxonomy --db $DBNAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> each branch, add all fna <span class="keyword">in</span> the directory to the database</span></span><br><span class="line">for dir in bacteria viral archaea fungi protozoa ; do</span><br><span class="line">    find $DBNAME/$dir/ -name '*.fna' -print0 | xargs -0 -I&#123;&#125; -n1 -P8 kraken-build --add-to-library &#123;&#125; --db $DBNAME;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> build the actual database</span></span><br><span class="line">kraken-build --build --db $DBNAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> remove intermediate files</span></span><br><span class="line">kraken-build --clean --db $DBNAME</span><br></pre></td></tr></table></figure><p>This post <a href="http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/" target="_blank" rel="noopener">Download refseq-genomic data and prepare it for Kraken</a> is also helpful.</p><h3 id="classify-contigs"><a class="markdownIt-Anchor" href="#classify-contigs"></a> Classify contigs</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> classify</span></span><br><span class="line">kraken --db $Kraken_DB --threads 24 --fasta-input /canu/run_1/beetle.contigs.fasta --classified-out classified.fa --unclassified-out unclassified.fa &gt; bettle.kraken</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> report</span></span><br><span class="line">kraken-report --db $Kraken_DB bettle.kraken &gt; bettle_kraken.report</span><br></pre></td></tr></table></figure><p>The ‘classified’ sequences will be saved in ‘classified.fa’, and the ‘unclassified.fa’ will be the ‘clean’ one, which can be used for downstream analysis.</p><p>But when I looked over the ‘report’, the result quite disappointed me.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -5 bettle_kraken.report</span></span><br><span class="line"> 24.5351445144U0unclassified</span><br><span class="line"> 75.4715830773-1root</span><br><span class="line"> 56.1311772336-131567  cellular organisms</span><br><span class="line"> 50.3610563858D2    Bacteria</span><br><span class="line"> 23.20486651P1224      Proteobacteria</span><br></pre></td></tr></table></figure><p>This means about 25% contigs were contaminated!</p><p>My collaborator asked me to give him a assembly draft for meta-genomic study, which a ‘clean’ one was needed. Removing all the contaminated sequences was not feasible, since there would be few contigs left.</p><p>Then I checked the file ‘bettle.kraken’, which contained the detailed information of each contig:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -3 bettle.kraken</span></span><br><span class="line">Ctig00000621118110531160:3562 118110:7 2:7 131567:1 1:19 1727164:1 0:1495 1580580:1 0:18 118110:3 1:3 118110:1 0:5 1:1 456320:1 0:8 307461:2 0:1 1580580:1 0:3 379529:1 0:4 1783272:1 273035:1 1:23 456320:1 0:109 2:2 1:25 1783272:2 1898474:2 2:1 131567:2 118110:3 0:93 273035:1 0:20219 456320:1 0:1 1313292:1 0:27453</span><br><span class="line">Ctig00000630287380310:9202 523794:2 1:7 131567:1 2151:1 2:1 0:58 251749:1 0:1 287:3 1236:3 0:62 1783272:2 1:6 2:3 33990:1 0:285 1307:1 1:22 1307:2 0:28337</span><br><span class="line">Ctig000006311224498520:14729 39640:1 1:24 2:2 444612:1 0:1357 1:46 0:31014 118110:1 1:8 0:2639</span><br></pre></td></tr></table></figure><p>Because Kraken uses a k-mer mapping strategy to locate potential contaminants, there would be many contigs within which only a small part could be aligned to bacteria/virul sequences. So I retrieved the precise k-mers that mapped to contamination, and masked them with ‘N’. I discussed this with another guy: <a href="https://www.biostars.org/p/321334/#321479" target="_blank" rel="noopener">Questions about de novo genome assembly from mixed DNA samples</a>, and he also thought it’s a vivid approach.</p><p><a href="./mask_N_kraken_res.py">Here</a> is the <code>Python</code> script I used.</p><p>I then used <code>R</code> to visualize the relationship between contig lengths and the contaminated lengths. There were 20974 contigs, among which 18869 (89.9%) contigs, 2075 (9.89%) contigs and 30 contigs has a contaminated rate of blow 1%, between 1% and 10%, and more than 10% respectively.</p><img src="/blog/2018/06/Find-Contamination-in-Genome-Assembly-by-Kraken/contamination_ratio.png" title="contamination_ratio"><p><a href="./contaminant_ratio.R">Here</a> is the <code>R</code> script I used.</p><p>But I began to think how the contaminanted sequences would affect the assembly process, and maybe removing contaminants from raw data is a good way. See discussions here: <a href="https://www.researchgate.net/post/Filtering_for_contamination_when_assembling_a_genome_before_or_after_assemby" target="_blank" rel="noopener">Filtering for contamination when assembling a genome, before or after assemby?</a>.</p><h2 id="useful-links"><a class="markdownIt-Anchor" href="#useful-links"></a> Useful links</h2><ul><li><a href="http://ccb.jhu.edu/software/kraken" target="_blank" rel="noopener">Kraken official site</a></li><li><a href="https://github.com/DerrickWood/kraken/" target="_blank" rel="noopener">Kraken Git repository</a></li><li><a href="https://github.com/sschmeier/refseq2kraken" target="_blank" rel="noopener">refseq2kraken: download refseq-genomic data and prepare it for Kraken</a></li><li><a href="http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/" target="_blank" rel="noopener">Download refseq-genomic data and prepare it for Kraken</a></li><li><a href="https://www.biostars.org/p/321334" target="_blank" rel="noopener">Questions about de novo genome assembly from mixed DNA samples</a></li><li><a href="https://www.molecularecologist.com/2017/01/handling-microbial-contamination-in-ngs-data/" target="_blank" rel="noopener">Handling microbial contamination in NGS data</a></li><li><a href="https://www.biostars.org/p/237168/" target="_blank" rel="noopener">Question: Contamination in assembly</a></li><li><a href="https://www.researchgate.net/post/Filtering_for_contamination_when_assembling_a_genome_before_or_after_assemby" target="_blank" rel="noopener">Filtering for contamination when assembling a genome, before or after assemby?</a></li><li><a href="https://www.biostars.org/p/165059/" target="_blank" rel="noopener">Question: How to remove contamination from the transcriptome assembly</a></li></ul><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180424: create the note.</li><li>20180620: add the “refseq2kraken” part.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Purpose in short: I want to remove potential contaminants in the genome assembly, and Kraken is a tool designed for that.&lt;/p&gt;
&lt;h2 id=&quot;int
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="contamination" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/contamination/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly/"/>
    
      <category term="contamination" scheme="https://yiweiniu.github.io/blog/tags/contamination/"/>
    
  </entry>
  
  <entry>
    <title>Viral Expression in RNA-seq data</title>
    <link href="https://yiweiniu.github.io/blog/2018/05/Viral-Expression-in-RNA-seq-data/"/>
    <id>https://yiweiniu.github.io/blog/2018/05/Viral-Expression-in-RNA-seq-data/</id>
    <published>2018-05-04T02:21:23.000Z</published>
    <updated>2018-06-30T07:06:11.480Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I wanted to check viral expression from RNA-seq data.</p><p>I found two good examples:</p><blockquote><p>Cao S, Strong MJ, Wang X, Moss WN, Concha M, Lin Z, O’Grady T, Baddoo M, Fewell C, Renne R, et al. 2015. High-Throughput RNA Sequencing-Based Virome Analysis of 50 Lymphoma Cell Lines from the Cancer Cell Line Encyclopedia Project. J. Virol. 89:713–729. doi:10.1128/JVI.02570-14.<br><br>Wang Zheng, Hao Y, Zhang C, Wang Zhiliang, Liu X, Li G, Sun L, Liang J, Luo J, Zhou D, et al. 2017. The Landscape of Viral Expression Reveals Clinically Relevant Viruses with Potential Capability of Promoting Malignancy in Lower-Grade Glioma. Clinical Cancer Research 23:2177–2185.</p></blockquote><p>Also some useful discussions:</p><ul><li><a href="https://groups.google.com/forum/#!topic/rna-star/QJxXmDzvJXU" target="_blank" rel="noopener">using STAR to map against 100 viral species</a></li><li><a href="https://groups.google.com/forum/#!msg/rna-star/cLpf7BuDnGY/nLXTE_pHDHgJ" target="_blank" rel="noopener">slow mapping to a small genome</a></li></ul><p>Alex (the author of <code>STAR</code>) suggested to combine human genome and viruses. But I already mapped the <code>FASTQ</code> to human genome (hg38), and saved unmapped reads to seperated <code>FASTQ</code> files.</p><p>Step 1, download all virul genomes from <a href="ftp://ftp.ncbi.nih.gov/refseq/release/viral/" target="_blank" rel="noopener">NCBI Refseq Viral Release</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget ftp://ftp.ncbi.nih.gov/refseq/release/viral/viral.1.1.genomic.fna.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget ftp://ftp.ncbi.nih.gov/refseq/release/viral/viral.2.1.genomic.fna.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gzip -d *</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat viral.1.1.genomic.fna viral.2.1.genomic.fna &gt; viral.refseq.180424.fa</span></span><br></pre></td></tr></table></figure><p>Step 2, build <code>STAR</code> index.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir STARgenomes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> /software/STAR-2.5.3a/bin/Linux_x86_64_static/STAR --runThreadN 10 --genomeDir ./STARgenomes --runMode genomeGenerate --genomeFastaFiles viral.refseq.180424.fa</span></span><br></pre></td></tr></table></figure><p>Step 3, align unmapped reads to viral genomes.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for sample in x1 x2 ...</span><br><span class="line">do</span><br><span class="line">    $TOOLDIR/STAR-2.5.3a/bin/Linux_x86_64_static/STAR --runMode alignReads --runThreadN 24 --genomeDir $STARindex --outSAMtype BAM SortedByCoordinate --outSAMattributes All --readFilesIn $WORKDIR/STAR_out/$&#123;sample&#125;_Unmapped.out.mate1.gz $WORKDIR/STAR_out/$&#123;sample&#125;_Unmapped.out.mate2.gz --readFilesCommand zcat --outFileNamePrefix $WORKDIR/Viral_expression/$&#123;sample&#125;_</span><br><span class="line">    $TOOLDIR/samtools.1.3.1/bin/samtools index $WORKDIR/Viral_expression/$&#123;sample&#125;_Aligned.sortedByCoord.out.bam</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>Step 4, compute viral expression.</p><p>I wanted to use existing read-counting software to quantify the viruses, so I had to create a fake annotation (a fake GTF file).</p><p>The tiny script to create GTF from FASTA file was like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/evn python</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">purpose: to calculate read count of virus, I want to make a fake GTF of virus fasta.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">usage: python xxx.py virus.fa &gt; virus.gtf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 1: read the fasta and put it into a dict</span></span><br><span class="line">seq_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'r'</span>) <span class="keyword">as</span> fin:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fin:</span><br><span class="line">line = line.strip()</span><br><span class="line"><span class="keyword">if</span> line.startswith(<span class="string">'&gt;'</span>):</span><br><span class="line">seqID = line.split()[<span class="number">0</span>].replace(<span class="string">'&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">seqName = <span class="string">' '</span>.join(line.split(<span class="string">','</span>)[<span class="number">0</span>].split()[<span class="number">1</span>:])</span><br><span class="line">seq_dict[seqID] = [seqName, <span class="string">''</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">seq_dict[seqID][<span class="number">1</span>] += line</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: traverse the dict and generate GTF. Use the whole virus as a exon.</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> seq_dict:</span><br><span class="line">seqLen = len(seq_dict[key][<span class="number">1</span>])</span><br><span class="line">tmp_list = [key, <span class="string">'Virus'</span>, <span class="string">'exon'</span>, <span class="string">'1'</span>, str(seqLen), <span class="string">'.'</span>, <span class="string">'+'</span>, <span class="string">'.'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\t'</span>.join(tmp_list) + <span class="string">'\t'</span> + <span class="string">'gene_id "'</span> + key + <span class="string">'"; gene_name "'</span> + seq_dict[key][<span class="number">0</span>] + <span class="string">'";'</span></span><br></pre></td></tr></table></figure><p>And the output looked like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -3 viral.refseq.180424.fake.gtf</span></span><br><span class="line">NC_003747.2Virusexon14212.+.gene_id "NC_003747.2"; gene_name "Ryegrass mottle virus isolate MAFF. No. 307043 from Japan";</span><br><span class="line">NC_011500.2Virusexon11614.+.gene_id "NC_011500.2"; gene_name "Rotavirus A segment 5";</span><br><span class="line">NC_007737.1Virusexon13055.+.gene_id "NC_007737.1"; gene_name "Liao ning virus segment 2";</span><br></pre></td></tr></table></figure><p>Then I used <code>featureCounts</code> function from <code>Rsubread</code> R package to count the reads of viruses (non-strand specific, 'cause not knowing the transcription direction), and used <code>rpkm</code> function of <code>edgeR</code> to normalize the raw count to viral “FPKM”.</p><p><strong>Note</strong>:</p><ul><li>The expression is a estimation. There maybe lots of errors. Be careful to interpret the results.</li></ul><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180424: create the note.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I wanted to check viral expression from RNA-seq data.&lt;/p&gt;
&lt;p&gt;I found two good examples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cao S, Strong MJ, Wa
      
    
    </summary>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/"/>
    
      <category term="viral expression" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/viral-expression/"/>
    
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/tags/RNA-seq/"/>
    
      <category term="virus" scheme="https://yiweiniu.github.io/blog/tags/virus/"/>
    
      <category term="viral expression" scheme="https://yiweiniu.github.io/blog/tags/viral-expression/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: SMARTdenovo</title>
    <link href="https://yiweiniu.github.io/blog/2018/04/Genome-Assembly-Pipeline-SMARTdenovo/"/>
    <id>https://yiweiniu.github.io/blog/2018/04/Genome-Assembly-Pipeline-SMARTdenovo/</id>
    <published>2018-04-23T11:59:54.000Z</published>
    <updated>2018-06-30T07:11:58.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2><p>From <a href="https://github.com/ruanjue/smartdenovo" target="_blank" rel="noopener">its git repo</a>:</p><blockquote><p>SMARTdenovo is a <em>de novo</em> assembler for PacBio and Oxford Nanopore (ONT) data. It produces an assembly from all-vs-all raw read alignments without an error correction stage. It also provides tools to generate accurate consensus sequences, though a platform dependent consensus polish tools (e.g. Quiver for PacBio or Nanopolish for ONT) are still required for higher accuracy.<br><br>SMARTdenovo consists of several separate command line tools: <strong>wtzmo</strong> for read overlapping, <strong>wtgbo</strong> to rescue missing overlaps, <strong>wtclp</strong> for identifying low-quality regions and chimaera, and <strong>wtcns</strong> or <strong>wtmsa</strong> to produce better unitig consensus. The <code>smartdenovo.pl</code> script provides a convenient interface to call these programs in one go.</p></blockquote><p>This tool has not been published yet. (20180313)</p><p>My feelings:</p><ul><li>easy to install/use</li><li>not as fast as <code>wtdbg</code>, but fast</li><li>comparatively good results (at least in my case)</li><li>docs and discussions about this tool is limited.</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Download sample PacBio from the PBcR website</span><br><span class="line">wget -O- http://www.cbcb.umd.edu/software/PBcR/data/selfSampleData.tar.gz | tar zxf -</span><br><span class="line">awk &apos;NR%4==1||NR%4==2&apos; selfSampleData/pacbio_filtered.fastq | sed &apos;s/^@/&gt;/g&apos; &gt; reads.fa</span><br><span class="line"># Install SMARTdenovo</span><br><span class="line">git clone https://github.com/ruanjue/smartdenovo.git &amp;&amp; (cd smartdenovo; make)</span><br><span class="line"># Assemble (raw unitigs in wtasm.lay.utg; consensus unitigs: wtasm.cns)</span><br><span class="line">smartdenovo/smartdenovo.pl -c 1 reads.fa &gt; wtasm.mak</span><br><span class="line">make -f wtasm.mak</span><br></pre></td></tr></table></figure><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><ul><li>Data used：the PacBio long-reads were used.</li><li>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</li></ul><p>commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path2perl=$TOOLDIR/perl.5.24.0/bin/perl</span><br><span class="line"></span><br><span class="line">DATADIR=/data</span><br><span class="line"></span><br><span class="line">PPN=24</span><br><span class="line"></span><br><span class="line"># run1, default</span><br><span class="line">$path2perl $TOOLDIR/smartdenovo/smartdenovo.pl -t $PPN -c 1 -p run1 $DATADIR/third/third_all.fasta &gt; run1.mak</span><br><span class="line">make -f run1.mak</span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN756816708</span><br><span class="line">Size_withoutN756816708</span><br><span class="line">Seq_Num6135</span><br><span class="line">Mean_Size123360</span><br><span class="line">Median_Size55901</span><br><span class="line">Longest_Seq5704487</span><br><span class="line">Shortest_Seq10769</span><br><span class="line">GC_Content31.72</span><br><span class="line">N50240010</span><br><span class="line">N9044546</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><p><code>SMARTdenovo</code> can also use <code>zmo</code> overlapper. I also test this option, but it generated about 17G genome! (The estimated genome size is about 850M.)</p><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180423: create the note.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; Introduction&lt;/h2&gt;
&lt;p&gt;From &lt;a href=&quot;https://github.com/ruanjue/s
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="TGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/TGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly/"/>
    
      <category term="long-read genome assembly" scheme="https://yiweiniu.github.io/blog/tags/long-read-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Identify circRNAs and Fusions from RNA-seq Using STARChip</title>
    <link href="https://yiweiniu.github.io/blog/2018/04/Identify-circRNAs-and-Fusions-from-RNA-seq-Using-STARChip/"/>
    <id>https://yiweiniu.github.io/blog/2018/04/Identify-circRNAs-and-Fusions-from-RNA-seq-Using-STARChip/</id>
    <published>2018-04-23T08:56:25.000Z</published>
    <updated>2018-06-30T07:05:31.079Z</updated>
    
    <content type="html"><![CDATA[<p>I want to find out some <a href="https://en.wikipedia.org/wiki/Circular_RNA" target="_blank" rel="noopener">circRNAs</a> from RNA-seq data (total RNA-seq, not poly-A enriched).</p><p>There are many tools for this mission. Here is a good review paper <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> talking about computational methods for analyzing circRNAs, both identification and downstream analysis. Also another review paper about identifying circRNAs <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. There are also two evaluation papers for the identification tools <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.</p><p>From all the tools I know, <code>CIRCexplorer2</code> <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> and <code>CIRI</code> <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> are well matained. But I want to try something new: <code>STARChip</code> <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>.</p><blockquote><p>STARChip is short for Star Chimeric Post, written by Dr. Nicholas Kipp Akers as part of his work in Bojan Losic’s group at the Icahn Institute of Genomics and Multiscale Biology at Mount Sinai School of Medicine<br><br>This software is designed to take the chimeric output from the STAR alignment tool and discover high confidence <strong>fusions</strong> and <strong>circular RNA</strong> in the data. Before running, you must have used a recent version of STAR with chimeric output turned on, to align your RNA-Seq data.</p></blockquote><p>So, it can <strong>identify fusions and circRNAs at the same time</strong>. According to its paper, for circRNA detection, “STARChip achieves the best precision of all tools tested and nearly the best sensitivity. This does not appear to come at an increased resource cost. Both CIRI and CIRCexplorer had competitive precision and sensitivity values; STARChip required 43 and 179% of the runtimes of these packages, respectively, and ∼72% of the memory requirements.”; for fusions, “With STARChip, we have attempted to emphasize precision at the expense of sensitivity in these particular gold-standard studies, reasoning that such hyper-tuning inflates type I error in mining novel datasets.”</p><p>I’ve discussed with the author Kipp Akers about the precision: <a href="https://github.com/LosicLab/starchip/issues/9#issuecomment-381181507" target="_blank" rel="noopener">https://github.com/LosicLab/starchip/issues/9#issuecomment-381181507</a>.  He said:</p><blockquote><p>To your final question, my goal with STARChip was to develop a tool that focused on precision. There are a dozen fusion finders out there that sacrifice everything to get the highest sensitivity. For my projects, this was not too helpful. However, STARChip’s read requirement settings can be set manually and because it runs so quickly, it’s easy to play with the settings to turn up sensitivity and turn down precision and see what you get. Feel free to do so, and let me know what you find!</p></blockquote><p>I agree with the designing purpose of <code>STARChip</code>, so I decide to give it a shot.</p><p>There are two main modules in <code>STARChip</code>:</p><ul><li>starchip-fusions is for fusion detection. It runs on individual samples.<ul><li><code>/path/to/starchip/starchip-fusions.pl output_seed Chimeric.out.junction Paramters.txt</code></li></ul></li><li>starchip-circles is for circRNA detection. It runs on groups of samples.<ul><li><code>/path/to/starchip/starchip-circles.pl STARdirs.txt Parameters.txt</code></li><li><code>/path/to/starchip/starchip-circles.pl fastq_files.txt parameters.txt</code></li></ul></li></ul><p>Notes below are more for my own convenience. See its <a href="https://github.com/LosicLab/starchip" target="_blank" rel="noopener">git repo</a> for full usage.</p><h2 id="prepare"><a class="markdownIt-Anchor" href="#prepare"></a> prepare</h2><blockquote><p>STARChip is written to be an extension of the STAR read aligner. It is optional for STARChip to run STAR on your samples. In most instances to run STARChip you must first run star on each of your samples. See the STAR documentation for installation, as well as building or downloading a STAR genome index. It is absolutely critical however, that you follow the STAR manual’s instructions and build a genome using all chromosomes plus unplaced contigs. Not doing so will strongly inflate your false positives rate, because reads that map perfectly to an unplaced contig will instead find the next best alignment, often a chimeric alignment. Run STAR with the following parameters required for chimeric output: –chimSegmentMin X –chimJunctionOverhangMin X (where X is an integer). Your project will have it’s own requirements, but a good starting point for your star alignments might look like:<br><br><code>STAR --genomeDir /path/to/starIndex/ --readFilesIn file1_1.fastq.gz file1_2.fastq.gz --runThreadN 11 --outReadsUnmapped Fastx --quantMode GeneCounts --chimSegmentMin 15 --chimJunctionOverhangMin 15 --outSAMstrandField intronMotif --readFilesCommand zcat --outSAMtype BAM Unsorted</code></p></blockquote><h3 id="referencebed-files"><a class="markdownIt-Anchor" href="#referencebed-files"></a> reference/BED files</h3><blockquote><p>STARChip makes use of gtf files for annotating fusions and circRNA with gene names.</p></blockquote><p>First, download the package and prepare annotation files:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/LosicLab/starchip.git &amp;&amp; <span class="built_in">cd</span> starchip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir starchip_ref &amp;&amp; ./setup.sh ~/RefData/Homo_sapiens/GENCODE_v27/gencode.v27.annotation.gtf ~/RefData/Homo_sapiens/GRCh38_no_alt/genome.fa ./starchip_ref</span></span><br></pre></td></tr></table></figure><h3 id="additional-files-for-fusions"><a class="markdownIt-Anchor" href="#additional-files-for-fusions"></a> additional files for Fusions</h3><p><code>starchip-fusions</code> filters using the location of known repeats in bed format as well. Following the instructions in the picture to download repeats from UCSC genome browser.</p><ol><li>Go to <a href="http://genome.ucsc.edu/cgi-bin/hgTables" target="_blank" rel="noopener">http://genome.ucsc.edu/cgi-bin/hgTables</a></li><li>Change ‘genome’ to your desired genome</li><li>Change the following settings:<ol><li>group: Repeat</li><li>track: RepeatMasker</li><li>region: genome</li><li>output format: BED</li><li>output file: some reasonable name.bed</li></ol></li><li>Click ‘get output’ to download your bed file.</li><li>On your local machine sort the bed file: <code>sort -k1,1 -k2,2n repeats.bed &gt; repeats.sorted.bed</code></li></ol><p><strong>If you’re working on <code>hg19</code> or <code>hg38</code>, you don’t have to do the following things</strong>. The files needed are already included in the directory of <code>STARChip</code>.</p><p><code>starchip-fusions</code> can also make use of known antibody parts, and copy number variants. These files come with starchip for human hg19 and hg38 in the reference directory. For other species you can create your own in the simple format: <code>Chromosome StartPosition EndPosition</code></p><p>Finally, starchip-fusions uses known gene families and known/common false-positive pairs to filter out fusions which are likely mapping errors or PCR artifacts. Family data can be downloaded from ensembl biomart:</p><ol><li>Go to <a href="http://www.ensembl.org/biomart/martview" target="_blank" rel="noopener">http://www.ensembl.org/biomart/martview</a></li><li>Database: Ensembl Genes</li><li>Dataset: Your species</li><li>Click Attributes on the left hand side.<ol><li>Under GENE dropdown, select only “Gene Name”</li><li>Under PROTEIN FAMILIES AND DOMAINS dropdown select Ensembl Protein Family ID.</li></ol></li><li>Click Results at the top.</li><li>Export the file. It should have two columns, Family ID and Gene ID.</li></ol><p>Known false positives are stored within data/pseudogenes.txt. In practice, we’ve found that pseudogenes and tissue specific highly expressed genes are commonly “fused” via PCR template switching errors. Feel free to put add any additional lines that result from your data to this file in the format: <code>Gene1Name Gene2Name</code></p><h2 id="run-starchip"><a class="markdownIt-Anchor" href="#run-starchip"></a> run STARChip</h2><p>Since my previous run of <code>STAR</code> didn’t use parameters <code>--chimSegmentMin</code> and <code>--chimJunctionOverhangMin</code>, I have to start with <code>Fastq</code> files.</p><p><code>starchip-circles</code> can run from <code>Fastq</code> files, but <code>starchip-fusions</code> starts from <code>Chimeric.out.junction</code>. I’ll first run <code>starchip-circles</code> then run <code>starchip-fusions</code>.</p><p>First of all, I prepare dirs for <code>STARChip</code> under my WORKDIR like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">STARChip/</span><br><span class="line">├── STARChip-circRNA</span><br><span class="line">│   ├── starchip-circles.fastqfiles        # the fastq files</span><br><span class="line">│   └── starchip-circles.params            # starchip-circles parameters</span><br><span class="line">└── STARChip-fusions</span><br><span class="line">    └── starchip-fusions.param              # starchip-fusions parameters</span><br></pre></td></tr></table></figure><h3 id="run-starchip-circles"><a class="markdownIt-Anchor" href="#run-starchip-circles"></a> run starchip-circles</h3><p>The parameter file and <code>Fastq</code> file:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat starchip-circles.params </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Parameters for starchimp-circles</span></span></span><br><span class="line">readsCutoff = 5</span><br><span class="line">minSubjectLimit = 10</span><br><span class="line">cpus = 20</span><br><span class="line">do_splice = True</span><br><span class="line">cpmCutoff = 0</span><br><span class="line">subjectCPMcutoff = 0 </span><br><span class="line">annotate = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Reference Files</span></span><br><span class="line">refbed = /software/starchip/starchip_ref/gencode.v27.annotation.gtf.bed  #use setup.sh to create this from a gtf. </span><br><span class="line">refFasta = /RefData/Homo_sapiens/GRCh38_no_alt/genome.fa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">STAR Parameters</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Do you use a prefix for your STAR output?</span></span></span><br><span class="line">starprefix =  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Are you starting from fastq and need to run STAR alignment? </span></span></span><br><span class="line">runSTAR = True</span><br><span class="line">STARgenome = /RefData/Homo_sapiens/GRCh38_no_alt/STARgenomes  #not necassary if runSTAR != True</span><br><span class="line">STARreadcommand = zcat   #cat for fastq, zcat for fastq.gz etc. not necassaryif runSTAR != True</span><br><span class="line">IDstepsback = 1 ## this is the position from the right of your path of the name of your files.  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#for example: /path/to/sample1/star/2.4.2/output/Chimeric.out.junction </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#sample1 is 4 steps back.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#or /path/to/star/2.4.2/sample1/Chimeric.out.junction</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">sample1 is 1 step back.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> head -3 starchip-circles.fastqfiles </span></span><br><span class="line">XJ-3-1-25_R1.fastq.gz  XJ-3-1-25_R2.fastq.gz</span><br><span class="line">XJ-2-1-25_R1.fastq.gz  XJ-2-1-25_R2.fastq.gz</span><br><span class="line">XJ-7-1-25_R1.fastq.gz  XJ-7-1-25_R2.fastq.gz</span><br></pre></td></tr></table></figure><p>Then go into the <code>$WORKDIR/STARChip/STARChip-circRNA</code> and run <code>starchip-circles</code> to generate scripts:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="variable">$path2circles</span> starchip-circles.fastqfiles starchip-circles.params</span></span><br><span class="line">Using the following parameters: Circular RNA must have at least 5 reads in at least 10 subjects/output files.  Using 20 CPUs.</span><br><span class="line">Rscript must be callable.  Requiring 0 subjects/outputs with 0 Counts per million circular reads to count a given circular RNA</span><br><span class="line">Other requirements are bedtools (&gt;= 2.24.0)</span><br><span class="line">You have indicated you would like STARChip to perform STAR alignments.  starchip-circles.fastqfiles should contain a list of fastq files; 1 sample per line, multiple files separated by a comma, and paired end files separated by a space.</span><br><span class="line">STARChip run scripts generated, please run ./Step1.sh through Step4.sh to detect and quantify circRNA</span><br></pre></td></tr></table></figure><p>There will be four scripts:</p><ul><li><code>Step1.sh</code>: align</li><li><code>Step2.sh</code>: discover circRNA</li><li><code>Step3.sh</code>: re-align</li><li><code>Step4.sh</code>: quantify/annotate</li></ul><p><code>Step2.sh</code> and <code>Step3.sh</code> use <code>STAR</code> in the system <code>PATH</code>, but I want to use another one:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i '3,$s|^|/software/STAR-2.5.3a/bin/Linux_x86_64_static/|g' Step1.sh</span><br><span class="line">sed -i '3,$s|^|/software/STAR-2.5.3a/bin/Linux_x86_64_static/|g' Step3.sh</span><br></pre></td></tr></table></figure><p>I’m working on a PBS grid system, then I create a script to submit these scripts:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -j eo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -N STARChip-circles</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -q Blade</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -l nodes=1:ppn=20</span></span><br><span class="line"></span><br><span class="line">echo Start time is `date +%Y/%m/%d--%H:%M`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> work dir</span></span><br><span class="line">WORKDIR=/STARChip/STARChip-circRNA</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> starchip-circles</span></span><br><span class="line">sh Step1.sh</span><br><span class="line">sh Step2.sh</span><br><span class="line">sh Step3.sh</span><br><span class="line">sh Step4.sh</span><br><span class="line"></span><br><span class="line">echo Finish time is `date +%Y/%m/%d--%H:%M`</span><br></pre></td></tr></table></figure><p>In my samples, only four circRNAs were identified by <code>STARChip-circles</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat circRNA.5reads.10ind.countmatrix</span><br><span class="line">8_4-10_R1.fastq.gz8_4-11_R1.fastq.gz8_4-3_R1.fastq.gz8_4-4_R1.fastq.gz8_4-5_R1.fastq.gz8_4-6_R1.fastq.gz8_4-7_R1.fastq.gz8_4-8_R1.fastq.gz   8_4-9_R1.fastq.gzXJ-10-1-25_R1.fastq.gzXJ-11-1-25_R1.fastq.gzXJ-1-1-25_R1.fastq.gzXJ-12-1-25_R1.fastq.gzXJ-13-1-25_R1.fastq.gzXJ-2-1-25_R1.fastq.gzXJ-3-1-25_R1.fastq.gXJ-4-1-25_R1.fastq.gzXJ-5-1-25_R1.fastq.gzXJ-6-1-25_R1.fastq.gzXJ-7-1-25_R1.fastq.gzXJ-8-1-25_R1.fastq.gzXJ-9-1-25_R1.fastq.gz</span><br><span class="line">chr1:117402186-11744232500020040638004322200   3</span><br><span class="line">chr15:101213315-10121667800382080000002600586018122523  0</span><br><span class="line">chr15:90217439-90219891040100001010520102019   4</span><br><span class="line">chr9:111786793-111787947003318623000010100052942141515  0</span><br></pre></td></tr></table></figure><h3 id="run-starchip-fusions"><a class="markdownIt-Anchor" href="#run-starchip-fusions"></a> run starchip-fusions</h3><p>The parameter file:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Parameters for fusions-from-star.pl</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Describing Your Data:</span></span></span><br><span class="line"></span><br><span class="line">pairedend = TRUE  #TRUE means paired end data.  any other value means single end. $spancutoff should be 0 if data is single end.</span><br><span class="line">consensus = TRUE  # anything but TRUE will make this skip the consensus sequence generation for each fusion.</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Filters, Cutoffs </span></span></span><br><span class="line"></span><br><span class="line">splitReads = auto # number of minimum read support at jxn.  Minimum 2.  Greatly impacts running time. Other options are: "auto" , "highsensitivity" , and "highprecision"   </span><br><span class="line">uniqueReads = 2 # number of unique read support values (higher indicates more likely to be real. lower is more likely amplification artifact).</span><br><span class="line">spancutoff = 1 #minimum number of non-split reads support.  If single end data, this must be 0 or auto.  Other options are: "auto" , "highsensitivity" , and "highprecision"</span><br><span class="line">wiggle = 500  #number of base-pairs of 'wiggle-room' when determining the location of a fusion (for spanning read counts)</span><br><span class="line">overlapLimit = 5 #wiggle room for joining very closely called fusion sites.</span><br><span class="line">samechrom_wiggle = 20000 #this is the distance that fusions have to be from each other if on the same chromosome.  Set to 0 if you want no filtering of same-chromosome pr</span><br><span class="line">lopsidedupper = 10 # (topsidereads + 0.1) / (bottomsidereads + 0.1) must be below this value. set very high to disable.  Reccomended setting 5</span><br><span class="line">lopsidedlower = 0.1 # (topsidereads + 0.1) / (bottomsidereads + 0.1) must be above this value. set to 0 to disable. Reccomended setting 0.2</span><br><span class="line">cnvwiggle = 1000 #we skip fusions that can be explained by known cnvs.  how close to the edges of the cnv must our fusion be?</span><br><span class="line">circlesize = 100000 #we skip fusions that look more like circular rna/backsplices.  how big (bp) could a circle be?    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Local Reference Files:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">refbed is a bed format version of a gtf.  This should probably be derived from the same GTF that STAR aligned with using setup.sh.   </span></span><br><span class="line">refbed=/software/starchip/starchip_ref/gencode.v27.annotation.gtf.bed</span><br><span class="line">        # a bed format list of known repeats</span><br><span class="line">repeatbed=/RefData/RepeatMasker/hg38.ucsc.180414.rmsk.sorted.bed</span><br><span class="line">        # fasta reference.  should be indexed (run 'samtools faidx file.fa')</span><br><span class="line">refFasta = /RefData/Homo_sapiens/GRCh38_no_alt/genome.fa</span><br><span class="line">abparts = reference/hg38.abparts</span><br><span class="line">cnvs = reference/conrad_hg38.cnvs</span><br><span class="line">familyfile = reference/ensfams.txt</span><br><span class="line">falsepositives = reference/knownFP.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Scoring Parameters (feel free to tweak).</span></span><br><span class="line">splitscoremod = 10</span><br><span class="line">spanscoremod = 20</span><br><span class="line">skewpenalty = 4</span><br><span class="line">repeatpenalty = 0.5  # score = score*(repeatpenalty^repeats)  --&gt; a fusion can have 0,1,or 2 sites fall into repeat regions.</span><br></pre></td></tr></table></figure><p>Based on the output of previous <code>STAR</code> running for <code>starchip-circles</code>, the script to run <code>starchip-fusions</code> contains:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -j eo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -N STARChip-fusions</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -q Blade</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -l nodes=1:ppn=2</span></span><br><span class="line"></span><br><span class="line">echo Start time is `date +%Y/%m/%d--%H:%M`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> work dir</span></span><br><span class="line">WORKDIR=/STARChip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> starchip-fusions</span></span><br><span class="line">TOOLDIR=/software</span><br><span class="line">path2fusions=$TOOLDIR/starchip/starchip-fusions.pl</span><br><span class="line"></span><br><span class="line">for sample in for sample in XJ-3-1-25 XJ-2-1-25 XJ-7-1-25 XJ-4-1-25 XJ-5-1-25 XJ-6-1-25 XJ-1-1-25 XJ-10-1-25 XJ-9-1-25 XJ-13-1-25 XJ-11-1-25 XJ-12-1-25 XJ-8-1-25 8_4-3 8_4-4 8_4-5 8_4-6 8_4-7 8_4-8 8_4-9 8_4-10 8_4-11</span><br><span class="line">do</span><br><span class="line">/usr/bin/perl $path2fusions $sample $WORKDIR/STARChip-circRNA/STARout/$&#123;sample&#125;_R1.fastq.gz/Chimeric.out.junction starchip-fusions.param</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo Finish time is `date +%Y/%m/%d--%H:%M`</span><br></pre></td></tr></table></figure><p>In my samples, no fusions were found by <code>STARChip-fusions</code>, and I don’t want to tweak parameters to improve sensitivity.</p><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180413: create the note.</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Gao Y, Zhao F. 2018 Jan 12. Computational Strategies for Exploring Circular RNAs. Trends in Genetics. doi:10.1016/j.tig.2017.12.016. [accessed 2018 Jan 15]. <a href="https://www.sciencedirect.com/science/article/pii/S0168952517302366" target="_blank" rel="noopener">https://www.sciencedirect.com/science/article/pii/S0168952517302366</a>. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Szabo L, Salzman J. 2016. Detecting circular RNAs: bioinformatic and experimental challenges. Nat Rev Genet 17:679–692. doi:10.1038/nrg.2016.114. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Hansen TB, Ven? MT, Damgaard CK, Kjems J. 2016. Comparison of circular RNA prediction tools. Nucleic Acids Research 44:e58–e58. doi:10.1093/nar/gkv1458. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Zeng X, Lin W, Guo M, Zou Q. 2017. A comprehensive overview and evaluation of circular RNA detection tools. PLOS Computational Biology 13:e1005420. doi:10.1371/journal.pcbi.1005420. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>Zhang X-O, Dong R, Zhang Y, Zhang J-L, Luo Z, Zhang J, Chen L-L, Yang L. 2016. Diverse alternative back-splicing and alternative splicing landscape of circular RNAs. Genome Res. 26:1277–1287. doi:10.1101/gr.202895.115. <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>Gao Y, Wang J, Zhao F. 2015. CIRI: an efficient and unbiased algorithm for de novo circular RNA identification. Genome Biology 16:4. doi:10.1186/s13059-014-0571-3. <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p>Akers NK, Schadt EE, Losic B. 2018 Feb 20. STAR Chimeric Post for rapid detection of circular RNA and fusion transcripts. Bioinformatics:bty091–bty091. doi:10.1093/bioinformatics/bty091. <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I want to find out some &lt;a href=&quot;https://en.wikipedia.org/wiki/Circular_RNA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;circRNAs&lt;/a&gt; from RNA-seq dat
      
    
    </summary>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/"/>
    
      <category term="circRNA" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/circRNA/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/tags/RNA-seq/"/>
    
      <category term="circRNA" scheme="https://yiweiniu.github.io/blog/tags/circRNA/"/>
    
  </entry>
  
  <entry>
    <title>How to Install Perl Modules</title>
    <link href="https://yiweiniu.github.io/blog/2018/04/How-to-install-perl-modules/"/>
    <id>https://yiweiniu.github.io/blog/2018/04/How-to-install-perl-modules/</id>
    <published>2018-04-13T15:28:04.000Z</published>
    <updated>2018-07-02T02:20:01.764Z</updated>
    
    <content type="html"><![CDATA[<p>Installing <code>perl</code> modules can be a troublesome work, especially when you are not a ROOT user. After a lot of “pain”, I decide to document the two ways to install <code>perl</code> modules (it’s not my creation, just for a memo).</p><h2 id="check-installed"><a class="markdownIt-Anchor" href="#check-installed"></a> Check installed</h2><p>First, check if the module has been installed:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> system perl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> perl</span></span><br><span class="line">/usr/bin/perl</span><br><span class="line"><span class="meta">$</span><span class="bash"> perl -e <span class="string">'use DBD::Oracle; print $DBD::Oracle::VERSION;'</span></span></span><br><span class="line">Can't locate DBD/Oracle.pm in @INC (@INC contains: /home/niuyw/software/perl.5.24.0/lib/site_perl/5.24.0/x86_64-linux /home/software/lib64/perl5 /home/software/share/perl5/ /home/software/vcftools-0.1.15/src/perl /home/niuyw/bin/perl_lib/share/perl5 /home/software/lib64/perl5 /home/software/share/perl5/ /home/software/vcftools-0.1.15/src/perl /home/niuyw/bin/perl_lib/share/perl5 /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at -e line 1.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> perl installed under my own dirctory</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/software/perl.5.24.0/bin/perl -e <span class="string">'use DBD::Oracle; print $DBD::Oracle::VERSION;'</span></span></span><br><span class="line">Can't locate DBD/Oracle.pm in @INC (you may need to install the DBD::Oracle module) (@INC contains: /home/niuyw/software/perl.5.24.0/lib/site_perl/5.24.0/x86_64-linux /home/software/lib64/perl5 /home/software/share/perl5/ /home/software/vcftools-0.1.15/src/perl /home/niuyw/bin/perl_lib/share/perl5 /home/software/lib64/perl5 /home/software/share/perl5/ /home/software/vcftools-0.1.15/src/perl /home/niuyw/bin/perl_lib/share/perl5 /home/niuyw/software/perl.5.24.0/lib/site_perl/5.24.0/x86_64-linux /home/niuyw/software/perl.5.24.0/lib/site_perl/5.24.0 /home/niuyw/software/perl.5.24.0/lib/5.24.0/x86_64-linux /home/niuyw/software/perl.5.24.0/lib/5.24.0 .) at -e line 1.</span><br><span class="line">BEGIN failed--compilation aborted at -e line 1.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> the module has been installed</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/software/perl.5.24.0/bin/perl -e <span class="string">'use URI::Escape; print $URI::Escape::VERSION;\n'</span></span></span><br><span class="line">3.31</span><br></pre></td></tr></table></figure><h2 id="scenario-1-you-are-a-root-user-or-use-your-own-perl"><a class="markdownIt-Anchor" href="#scenario-1-you-are-a-root-user-or-use-your-own-perl"></a> Scenario 1: you are a ROOT user OR use your own perl</h2><p>In this case, the installation is simple.</p><h3 id="use-cpan-i-module_name"><a class="markdownIt-Anchor" href="#use-cpan-i-module_name"></a> Use <code>cpan -i module_name</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/software/perl.5.24.0/bin/cpan -i Net::Server</span></span><br></pre></td></tr></table></figure><h3 id="use-perl-mcpan-e-shell"><a class="markdownIt-Anchor" href="#use-perl-mcpan-e-shell"></a> Use <code>perl -MCPAN -e shell</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/software/perl.5.24.0/bin/perl -MCPAN -e shell</span></span><br><span class="line">Terminal does not support AddHistory.</span><br><span class="line"></span><br><span class="line">cpan shell -- CPAN exploration and modules installation (v2.16)</span><br><span class="line">Enter 'h' for help.</span><br><span class="line"></span><br><span class="line"><span class="meta">cpan[1]&gt;</span><span class="bash"> h</span></span><br><span class="line"></span><br><span class="line">Display Information                                                  (ver 2.16)</span><br><span class="line"> command  argument          description</span><br><span class="line"> a,b,d,m  WORD or /REGEXP/  about authors, bundles, distributions, modules</span><br><span class="line"> i        WORD or /REGEXP/  about any of the above</span><br><span class="line"> ls       AUTHOR or GLOB    about files in the author's directory</span><br><span class="line">    (with WORD being a module, bundle or author name or a distribution</span><br><span class="line">    name of the form AUTHOR/DISTRIBUTION)</span><br><span class="line"></span><br><span class="line">Download, Test, Make, Install...</span><br><span class="line"> get      download                     clean    make clean</span><br><span class="line"> make     make (implies get)           look     open subshell in dist directory</span><br><span class="line"> test     make test (implies make)     readme   display these README files</span><br><span class="line"> install  make install (implies test)  perldoc  display POD documentation</span><br><span class="line"></span><br><span class="line">Upgrade installed modules</span><br><span class="line"> r        WORDs or /REGEXP/ or NONE    report updates for some/matching/all</span><br><span class="line"> upgrade  WORDs or /REGEXP/ or NONE    upgrade some/matching/all modules</span><br><span class="line"></span><br><span class="line">Pragmas</span><br><span class="line"> force  CMD    try hard to do command  fforce CMD    try harder</span><br><span class="line"> notest CMD    skip testing</span><br><span class="line"></span><br><span class="line">Other</span><br><span class="line"> h,?           display this menu       ! perl-code   eval a perl command</span><br><span class="line"> o conf [opt]  set and query options   q             quit the cpan shell</span><br><span class="line"> reload cpan   load CPAN.pm again      reload index  load newer indices</span><br><span class="line"> autobundle    Snapshot                recent        latest CPAN uploads</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> search modules using keyword</span></span><br><span class="line"><span class="meta">cpan[2]&gt;</span><span class="bash"> i /scws/</span></span><br><span class="line">Distribution    XUERON/Text-Scws-0.01.tar.gz</span><br><span class="line">Module  &lt; Text::Scws             (XUERON/Text-Scws-0.01.tar.gz)</span><br><span class="line">2 items found</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install modules</span></span><br><span class="line"><span class="meta">cpan[3]&gt;</span><span class="bash"> install Net::Server</span></span><br><span class="line">Net::Server is up to date (2.009).</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> quit</span></span><br><span class="line"><span class="meta">cpan[5]&gt;</span><span class="bash"> q/quit/<span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><h2 id="scenario-2-you-are-a-common-user-but-want-to-use-the-system-perl"><a class="markdownIt-Anchor" href="#scenario-2-you-are-a-common-user-but-want-to-use-the-system-perl"></a> Scenario 2: you are a common user but want to use the system perl</h2><p>This process can be tedious, especially if the modules you want to install depend on other modules.</p><p>Sometimes, even we have installed own <code>perl</code>, but still need to use the <code>perl</code> under <code>/usr/bin/perl</code>. For example, many scripts told me <code>This Perl not built to support threads</code>.</p><p>First, create a directory for <code>perl</code> modules.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/niuyw/bin/perl_lib</span><br></pre></td></tr></table></figure><p>Second, download a module and install it from source code locally. Go <a href="https://www.cpan.org/" target="_blank" rel="noopener">CPAN</a> to search and download the modules you want to install.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar zxf Capture-Tiny-0.46.tar.gz &amp;&amp; <span class="built_in">cd</span> Capture-Tiny-0.46</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> perl</span></span><br><span class="line">/usr/bin/perl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> specify the path to install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> perl Makefile.PL PREFIX=/home/niuyw/bin/perl_lib</span></span><br><span class="line">Checking if your kit is complete...</span><br><span class="line">Looks good</span><br><span class="line">Generating a Unix-style Makefile</span><br><span class="line">Writing Makefile for Capture::Tiny</span><br><span class="line">Writing MYMETA.yml and MYMETA.json</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line">cp lib/Capture/Tiny.pm blib/lib/Capture/Tiny.pm</span><br><span class="line">Manifying 1 pod document</span><br><span class="line">Manifying 1 pod document</span><br><span class="line">Appending installation info to /home/niuyw/bin/perl_lib/lib64/perl5/perllocal.pod</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> perl -e <span class="string">'use Capture::Tiny; print $Capture::Tiny::VERSION;'</span></span></span><br><span class="line">0.46</span><br></pre></td></tr></table></figure><p>Third, add the path above to your <code>.bashrc</code>. <strong>Notice the format</strong>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PERL5LIB=$PERL5LIB:/home/niuyw/bin/perl_lib/share/perl5:/home/niuyw/bin/perl_lib/lib64/perl5</span><br></pre></td></tr></table></figure><p>Thanks Quan Kang for teaching me how to install perl modules from source code.</p><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180413: create the note.</li><li>20180414: change the setting of <code>PERL5LIB</code>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Installing &lt;code&gt;perl&lt;/code&gt; modules can be a troublesome work, especially when you are not a ROOT user. After a lot of “pain”, I decide 
      
    
    </summary>
    
      <category term="mixture" scheme="https://yiweiniu.github.io/blog/categories/mixture/"/>
    
    
      <category term="perl" scheme="https://yiweiniu.github.io/blog/tags/perl/"/>
    
      <category term="install" scheme="https://yiweiniu.github.io/blog/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: Flye</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-Flye/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-Flye/</id>
    <published>2018-03-29T16:33:08.000Z</published>
    <updated>2018-07-02T01:34:06.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>From <a href="https://github.com/fenderglass/Flye" target="_blank" rel="noopener">its git repo</a>:</p><blockquote><p>Flye is a de novo assembler for long and noisy reads, such as those produced by PacBio and Oxford Nanopore Technologies. The algorithm uses an A-Bruijn graph to find the overlaps between reads and does not require them to be error-corrected. After the initial assembly, Flye performs an extra repeat classification and analysis step to improve the structural accuracy of the resulting sequence. The package also includes a polisher module, which produces the final assembly of high nucleotide-level quality.</p></blockquote><p>This tool is now on biRxiv:</p><blockquote><p>Kolmogorov M, Yuan J, Lin Y, Pevzner P. Assembly of Long Error-Prone Reads Using Repeat Graphs. bioRxiv. 2018 Jan 12:247148. doi:10.1101/247148</p></blockquote><p>My feelings:</p><ul><li>easy to use</li><li>comparatively good results, good N50, good completeness</li><li>not too many parameters to be tested</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># install</span><br><span class="line">git clone https://github.com/fenderglass/Flye Flye-2.3.3</span><br><span class="line">cd Flye-2.3.3</span><br><span class="line">python setup.py build</span><br><span class="line"></span><br><span class="line"># usage</span><br><span class="line">$ ./bin/flye -h</span><br><span class="line">usage: flye (--pacbio-raw | --pacbio-corr | --nano-raw |</span><br><span class="line">       --nano-corr | --subassemblies) file1 [file_2 ...]</span><br><span class="line">       --genome-size size --out-dir dir_path [--threads int]</span><br><span class="line">       [--iterations int] [--min-overlap int] [--resume]</span><br><span class="line">       [--debug] [--version] [--help]</span><br><span class="line"></span><br><span class="line">Assembly of long and error-prone reads</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --pacbio-raw path [path ...]</span><br><span class="line">                        PacBio raw reads</span><br><span class="line">  --pacbio-corr path [path ...]</span><br><span class="line">                        PacBio corrected reads</span><br><span class="line">  --nano-raw path [path ...]</span><br><span class="line">                        ONT raw reads</span><br><span class="line">  --nano-corr path [path ...]</span><br><span class="line">                        ONT corrected reads</span><br><span class="line">  --subassemblies path [path ...]</span><br><span class="line">                        high-quality contig-like input</span><br><span class="line">  -g size, --genome-size size</span><br><span class="line">                        estimated genome size (for example, 5m or 2.6g)</span><br><span class="line">  -o path, --out-dir path</span><br><span class="line">                        Output directory</span><br><span class="line">  -t int, --threads int</span><br><span class="line">                        number of parallel threads (default: 1)</span><br><span class="line">  -i int, --iterations int</span><br><span class="line">                        number of polishing iterations (default: 1)</span><br><span class="line">  -m int, --min-overlap int</span><br><span class="line">                        minimum overlap between reads (default: auto)</span><br><span class="line">  --resume              resume from the last completed stage</span><br><span class="line">  --resume-from stage_name</span><br><span class="line">                        resume from a custom stage</span><br><span class="line">  --debug               enable debug output</span><br><span class="line">  -v, --version         show program&apos;s version number and exit</span><br><span class="line"></span><br><span class="line">Input reads could be in FASTA or FASTQ format, uncompressed</span><br><span class="line">or compressed with gz. Currenlty, raw and corrected reads</span><br><span class="line">from PacBio and ONT are supported. Additionally, --subassemblies</span><br><span class="line">option does a consensus assembly of high-quality input contigs.</span><br><span class="line">You may specify multiple fles with reads (separated by spaces).</span><br><span class="line">Mixing different read types is not yet supported.</span><br><span class="line"></span><br><span class="line">You must provide an estimate of the genome size as input,</span><br><span class="line">which is used for solid k-mers selection. The estimate could</span><br><span class="line">be rough (e.g. withing 0.5x-2x range) and does not affect</span><br><span class="line">the other assembly stages. Standard size modificators are</span><br><span class="line">supported (e.g. 5m or 2.6g)</span><br><span class="line"></span><br><span class="line"># E. coli P6-C4 PacBio data</span><br><span class="line">wget https://zenodo.org/record/1172816/files/E.coli_PacBio_40x.fasta</span><br><span class="line">flye --pacbio-raw E.coli_PacBio_40x.fasta --out-dir out_pacbio --genome-size 5m --threads 4</span><br><span class="line"></span><br><span class="line"># E. coli Oxford Nanopore Technologies data</span><br><span class="line">wget https://zenodo.org/record/1172816/files/Loman_E.coli_MAP006-1_2D_50x.fasta</span><br><span class="line">flye --nano-raw Loman_E.coli_MAP006-1_2D_50x.fasta --out-dir out_nano --genome-size 5m --threads 4</span><br></pre></td></tr></table></figure><p>See <a href="https://github.com/fenderglass/Flye/blob/flye/docs/USAGE.md" target="_blank" rel="noopener">Flye manual</a> for full usage.</p><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><h3 id="an-insect"><a class="markdownIt-Anchor" href="#an-insect"></a> An insect</h3><ul><li>The species: high heterogeneity, high AT, high repetition.</li><li>Genome size: male 790M, female 830M.</li><li>Data used：about 70X PacBio long-reads.</li><li>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</li></ul><h4 id="version-232-gd46edb7"><a class="markdownIt-Anchor" href="#version-232-gd46edb7"></a> version 2.3.2-gd46edb7</h4><ul><li><code>Flye</code> version: 2.3.2-gd46edb7</li></ul><p>I didn’t test all the parameters. Below is the results based on default settings.</p><p>command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flye --pacbio-raw $DATADIR/third/third_all.fasta --out-dir run1 --genome-size 850m --threads 24</span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># contig</span><br><span class="line">Size_includeN 724744485</span><br><span class="line">Size_withoutN 724744485</span><br><span class="line">Seq_Num 17602</span><br><span class="line">Mean_Size 41173</span><br><span class="line">Median_Size 17572</span><br><span class="line">Longest_Seq 1648999</span><br><span class="line">Shortest_Seq  55</span><br><span class="line">GC_Content  31.55</span><br><span class="line">N50 91066</span><br><span class="line">N90 17456</span><br><span class="line">Gap 0.0</span><br><span class="line"></span><br><span class="line"># scaffold</span><br><span class="line">Size_includeN 724753785</span><br><span class="line">Size_withoutN 724744485</span><br><span class="line">Seq_Num 17509</span><br><span class="line">Mean_Size 41393</span><br><span class="line">Median_Size 17532</span><br><span class="line">Longest_Seq 1648999</span><br><span class="line">Shortest_Seq  55</span><br><span class="line">GC_Content  31.55</span><br><span class="line">N50 92367</span><br><span class="line">N90 17530</span><br><span class="line">Gap 0.0</span><br></pre></td></tr></table></figure><h4 id="version-233-g47cdd0b"><a class="markdownIt-Anchor" href="#version-233-g47cdd0b"></a> Version 2.3.3-g47cdd0b</h4><p><code>Flye</code> 2.3.3 have two updates appealing to me:</p><ul><li>Automatic selection of minimum overlap parameter based on read length</li><li>Minimap2 updated</li></ul><p>Because I’ve run <code>Canu</code> before, and <code>Flye</code> can start from raw data and corrected data, I’ll test <code>Flye</code> for both.</p><h5 id="from-raw-data"><a class="markdownIt-Anchor" href="#from-raw-data"></a> From raw data</h5><p>Commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/Flye-2.3.3/bin/flye --pacbio-raw third_all.fasta --out-dir run2 --genome-size 830m --threads 40</span></span><br></pre></td></tr></table></figure><p>Stats:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> contigs</span></span><br><span class="line">Size_includeN 787629166</span><br><span class="line">Size_withoutN 787629166</span><br><span class="line">Seq_Num 14846</span><br><span class="line">Mean_Size 53053</span><br><span class="line">Median_Size 20542</span><br><span class="line">Longest_Seq 1636300</span><br><span class="line">Shortest_Seq  12</span><br><span class="line">GC_Content  31.6</span><br><span class="line">N50 121564</span><br><span class="line">L50 1699</span><br><span class="line">N90 25419</span><br><span class="line">Gap 0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffolds</span></span><br><span class="line">Size_includeN 787632766</span><br><span class="line">Size_withoutN 787629166</span><br><span class="line">Seq_Num 14810</span><br><span class="line">Mean_Size 53182</span><br><span class="line">Median_Size 20465</span><br><span class="line">Longest_Seq 1692734</span><br><span class="line">Shortest_Seq  12</span><br><span class="line">GC_Content  31.6</span><br><span class="line">N50 122313</span><br><span class="line">L50 1680</span><br><span class="line">N90 25437</span><br><span class="line">Gap 0.0</span><br></pre></td></tr></table></figure><h5 id="from-corrected-data-from-canu-about-33x"><a class="markdownIt-Anchor" href="#from-corrected-data-from-canu-about-33x"></a> From corrected data from <code>Canu</code> (about 33X)</h5><p>Commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/Flye-2.3.3/bin/flye --pacbio-corr canu.correctedReads.fasta.gz --out-dir run3 --genome-size 830m --threads 40</span></span><br></pre></td></tr></table></figure><p>Stats:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> contigs</span></span><br><span class="line">Size_includeN 833065987</span><br><span class="line">Size_withoutN 833065987</span><br><span class="line">Seq_Num 17536</span><br><span class="line">Mean_Size 47506</span><br><span class="line">Median_Size 26593</span><br><span class="line">Longest_Seq 1145994</span><br><span class="line">Shortest_Seq  518</span><br><span class="line">GC_Content  31.47</span><br><span class="line">N50 88680</span><br><span class="line">L50 2594</span><br><span class="line">N90 22129</span><br><span class="line">Gap 0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffolds</span></span><br><span class="line">Size_includeN 833070387</span><br><span class="line">Size_withoutN 833065987</span><br><span class="line">Seq_Num 17492</span><br><span class="line">Mean_Size 47625</span><br><span class="line">Median_Size 26602</span><br><span class="line">Longest_Seq 1145994</span><br><span class="line">Shortest_Seq  518</span><br><span class="line">GC_Content  31.47</span><br><span class="line">N50 89165</span><br><span class="line">L50 2581</span><br><span class="line">N90 22242</span><br><span class="line">Gap 0.0</span><br></pre></td></tr></table></figure><h3 id="a-plant"><a class="markdownIt-Anchor" href="#a-plant"></a> A plant</h3><ul><li>The species: high heterogeneity, high repetition.</li><li>Genome size: 2.1G.</li><li>Data used：more than 100X PacBio long reads.</li><li>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</li></ul><h4 id="run1-more-than-100x-data"><a class="markdownIt-Anchor" href="#run1-more-than-100x-data"></a> run1, more than 100X data</h4><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">path2flye --pacbio-raw <span class="variable">$WORKDIR</span>/data/Pacbio/all.fasta --out-dir run1 --genome-size 2g --threads 30</span></span><br></pre></td></tr></table></figure><p>But I came across a memory issue: <a href="https://github.com/fenderglass/Flye/issues/46" target="_blank" rel="noopener">ERROR: Caught unhandled exception: std::bad_alloc in both 2.3.2 and 2.3.3</a>. And the author suggested me to downsample the data.</p><p>And I asked him that what’s the difference: using all raw data (say 100X) and using downsampling data (say longest 50X)? He said “You might have extra connectivity information in these 100x reads (you can resolve more repeats, for example). But some studies suggest (Canu paper, for example) that you don’t really need more than 40x in general (but it, of course, also depends on the genome complexity, ploidy etc…). Plus, extra coverage helps to get a good final consensus.”</p><h4 id="run2-with-about-50x-data"><a class="markdownIt-Anchor" href="#run2-with-about-50x-data"></a> run2, with about 50X data</h4><p>I used <a href="https://github.com/yechengxi/AssemblyUtility" target="_blank" rel="noopener">SelectLongestReads</a> to downsample about 50X data and ran <code>Flye</code> again.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run1.1, extract 50X data</span></span><br><span class="line">SelectLongestReads sum 100000000000 longest 1 o Pacbio_50x.fasta f all.fasta</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> remove @ from the fasta</span></span><br><span class="line">replace_@_in_fasta_header.py Pacbio_50x.fasta &gt; Pacbio_50x_no_@.fasta</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">path2flye --pacbio-raw Pacbio_50x_no_@.fasta --out-dir run1.1 --genome-size 2g --threads 30 --resume</span></span><br></pre></td></tr></table></figure><p>The reason why I removed the <code>@</code> from the headers was because I encountered another problem: <a href="https://github.com/fenderglass/Flye/issues/48" target="_blank" rel="noopener">ERROR: parse error in 1-consensus/consensus.fasta on line 1: empty sequence</a>. It seemed that <code>Flye</code> would ignore these headers.</p><p>And the stats I got:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> contigs</span></span><br><span class="line">Size_includeN 1640872256</span><br><span class="line">Size_withoutN 1640872256</span><br><span class="line">Seq_Num 9843</span><br><span class="line">Mean_Size 166704</span><br><span class="line">Median_Size 72841</span><br><span class="line">Longest_Seq 8808184</span><br><span class="line">Shortest_Seq  139</span><br><span class="line">GC_Content  37.78</span><br><span class="line">N50 398108</span><br><span class="line">L50 1119</span><br><span class="line">N90 83615</span><br><span class="line">Gap 0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffolds</span></span><br><span class="line">Size_includeN 1640874656</span><br><span class="line">Size_withoutN 1640872256</span><br><span class="line">Seq_Num 9819</span><br><span class="line">Mean_Size 167112</span><br><span class="line">Median_Size 72812</span><br><span class="line">Longest_Seq 8808184</span><br><span class="line">Shortest_Seq  139</span><br><span class="line">GC_Content  37.78</span><br><span class="line">N50 399898</span><br><span class="line">L50 1114</span><br><span class="line">N90 83809</span><br><span class="line">Gap 0.0</span><br></pre></td></tr></table></figure><p>Not bad.</p><h4 id="run3-with-corrected-data-from-canu-about-37x"><a class="markdownIt-Anchor" href="#run3-with-corrected-data-from-canu-about-37x"></a> run3, with corrected data from <code>Canu</code> (about 37X)</h4><p>The <code>Canu</code> version was <code>1.7</code>.</p><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run2, pacbio corrected by canu, defalut</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2flye --pacbio-corr canu.correctedReads.fasta.gz --out-dir run2 --genome-size 2g --threads 30</span></span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> contigs</span></span><br><span class="line">Size_includeN 1886541389</span><br><span class="line">Size_withoutN 1886541389</span><br><span class="line">Seq_Num 13177</span><br><span class="line">Mean_Size 143169</span><br><span class="line">Median_Size 70083</span><br><span class="line">Longest_Seq 2690265</span><br><span class="line">Shortest_Seq  110</span><br><span class="line">GC_Content  38.01</span><br><span class="line">N50 310885</span><br><span class="line">L50 1669</span><br><span class="line">N90 70697</span><br><span class="line">Gap 0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffolds</span></span><br><span class="line">Size_includeN 1886554189</span><br><span class="line">Size_withoutN 1886541389</span><br><span class="line">Seq_Num 13049</span><br><span class="line">Mean_Size 144574</span><br><span class="line">Median_Size 70202</span><br><span class="line">Longest_Seq 2690265</span><br><span class="line">Shortest_Seq  110</span><br><span class="line">GC_Content  38.01</span><br><span class="line">N50 315687</span><br><span class="line">L50 1648</span><br><span class="line">N90 71378</span><br><span class="line">Gap 0.0</span><br></pre></td></tr></table></figure><h2 id="useful-links"><a class="markdownIt-Anchor" href="#useful-links"></a> Useful links</h2><ul><li><a href="https://github.com/fenderglass/Flye/blob/flye/docs/USAGE.md" target="_blank" rel="noopener">Flye manual</a></li></ul><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180314: create the note.</li><li>20180428: test version 2.3.3, and run from corrected reads of <code>Canu</code></li><li>20180630: add the part of ‘A plant’.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h2&gt;
&lt;p&gt;From &lt;a href=&quot;https://github.com/fenderglass/Flye&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="TGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/TGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="TGS genome assembly" scheme="https://yiweiniu.github.io/blog/tags/TGS-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: miniasm &amp; Racon</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-miniasm-Racon/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-miniasm-Racon/</id>
    <published>2018-03-29T16:23:24.000Z</published>
    <updated>2018-04-23T09:06:23.924Z</updated>
    
    <content type="html"><![CDATA[<p><code>miniasm + Racon</code> is a long-read <em>de novo</em> genome assembly pipeline.</p><h2 id="miniasm-racon-assembly-pipeline"><a class="markdownIt-Anchor" href="#miniasm-racon-assembly-pipeline"></a> miniasm + Racon assembly pipeline</h2><p>There are two good examples:</p><ul><li><a href="http://inf-biox121.readthedocs.io/en/2017/Assembly/practicals/07_Assembly_using_minasm+racon.html" target="_blank" rel="noopener">Assembly using miniasm+racon</a></li><li><a href="http://onsnetwork.org/kubu4/2017/10/04/genome-assembly-minimapminiasmracon-overview/" target="_blank" rel="noopener">Genome Assembly – minimap/miniasm/racon Overview</a></li></ul><p>and a paper based on <code>miniasm</code>, actually, it is a consensus tool called <a href="https://github.com/isovic/racon" target="_blank" rel="noopener">Racon</a> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>The <code>miniasm + Racon</code> pipeline consists of the following steps:</p><ul><li>using <code>minimap</code>/<code>minimap2</code> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> for fast all-vs-all overlap of raw reads (<code>Minimap</code> for overlap detection, Overlap)</li><li>using <code>miniasm</code>, this “simply concatenates pieces of read sequences to generate the final sequences. Thus the per-base error rate is similar to the raw input reads.” (<code>Miniasm</code> layout for generating raw contigs, Layout)</li><li>mapping the raw reads back to the assembly using <code>minimap</code> again (<code>Minimap</code> for mapping of raw reads to raw contigs, Consensus)</li><li>using <code>racon</code> (‘rapid consensus’) for consensus calling (<code>Racon</code> for generating high-quality consensus sequences, Consensus)</li></ul><p>Compared with general pipelines, it achieves ‘similar or better quliaty’ while ‘being an order of magnitude faster’.</p><p>As described in the <code>miniasm</code> paper <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>, published long-read assembly pipelines all include four stages:</p><ol><li>all-vs-all raw read mapping</li><li>raw read error correction</li><li>assembly of error corrected reads (may involve all-vs-all read mapping again, but as the error rate is much reduced at this step, it is easier and faster than stage 1)</li><li>contig consensus polish</li></ol><h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><h3 id="minimap"><a class="markdownIt-Anchor" href="#minimap"></a> minimap</h3><blockquote><p>Minimap is an experimental tool to efficiently find multiple approximate mapping positions between two sets of long sequences, such as between reads and reference genomes, between genomes and between long noisy reads. By default, it is tuned to have high sensitivity to 2kb matches around 20% divergence but with low specificity. Minimap does not generate alignments as of now and because of this, it is usually tens of times faster than mainstream aligners. With four CPU cores, minimap can map 1.6Gbp PacBio reads to human in 2.5 minutes, 1Gbp PacBio E. coli reads to pre-indexed 9.6Gbp bacterial genomes in 3 minutes, to pre-indexed &gt;100Gbp nt database in ~1 hour (of which ~20 minutes are spent on loading index from the network filesystem; peak RAM: 10GB), map 2800 bacteria to themselves in 1 hour, and map 1Gbp E. coli reads against themselves in a couple of minutes.<br><br>Minimap does not replace mainstream aligners, but it can be useful when you want to quickly identify long approximate matches at moderate divergence among a huge collection of sequences. For this task, it is much faster than most existing tools.</p></blockquote><h3 id="minimap2"><a class="markdownIt-Anchor" href="#minimap2"></a> minimap2</h3><blockquote><p>Minimap2 is a versatile sequence alignment program that aligns DNA or mRNA sequences against a large reference database. Typical use cases include: (1) mapping PacBio or Oxford Nanopore genomic reads to the human genome; (2) finding overlaps between long reads with error rate up to ~15%; (3) splice-aware alignment of PacBio Iso-Seq or Nanopore cDNA or Direct RNA reads against a reference genome; (4) aligning Illumina single- or paired-end reads; (5) assembly-to-assembly alignment; (6) full-genome alignment between two closely related species with divergence below ~15%.<br><br>For ~10kb noisy reads sequences, minimap2 is tens of times faster than mainstream long-read mappers such as BLASR, BWA-MEM, NGMLR and GMAP. It is more accurate on simulated long reads and produces biologically meaningful alignment ready for downstream analyses. For &gt;100bp Illumina short reads, minimap2 is three times as fast as BWA-MEM and Bowtie2, and as accurate on simulated data. Detailed evaluations are available from the minimap2 preprint.</p></blockquote><h3 id="miniasm"><a class="markdownIt-Anchor" href="#miniasm"></a> miniasm</h3><p><a href="https://github.com/lh3/miniasm" target="_blank" rel="noopener">miniasm</a> was developed by <a href="https://lh3.github.io/" target="_blank" rel="noopener">Heng Li</a>.</p><p>From its git repo:</p><blockquote><p>Miniasm is a very fast OLC-based de novo assembler for noisy long reads. It takes all-vs-all read self-mappings (typically by minimap) as input and outputs an assembly graph in the GFA format. Different from mainstream assemblers, miniasm does not have a consensus step. It simply concatenates pieces of read sequences to generate the final unitig sequences. Thus the per-base error rate is similar to the raw input reads.<br><br>So far miniasm is in early development stage. It has only been tested on a dozen of PacBio and Oxford Nanopore (ONT) bacterial data sets. Including the mapping step, it takes about 3 minutes to assemble a bacterial genome. Under the default setting, miniasm assembles 9 out of 12 PacBio datasets and 3 out of 4 ONT datasets into a single contig. The 12 PacBio data sets are PacBio E. coli sample, ERS473430, ERS544009, ERS554120, ERS605484, ERS617393, ERS646601, ERS659581, ERS670327, ERS685285, ERS743109 and a deprecated PacBio E. coli data set. ONT data are acquired from the Loman Lab.<br><br>Miniasm confirms that at least for high-coverage bacterial genomes, it is possible to generate long contigs from raw PacBio or ONT reads without error correction. It also shows that minimap can be used as a read overlapper, even though it is probably not as sensitive as the more sophisticated overlapers such as MHAP and DALIGNER. Coupled with long-read error correctors and consensus tools, miniasm may also be useful to produce high-quality assemblies.</p></blockquote><h4 id="algorithm-overview"><a class="markdownIt-Anchor" href="#algorithm-overview"></a> Algorithm Overview</h4><blockquote><ul><li>Crude read selection. For each read, find the longest contiguous region covered by three good mappings. Get an approximate estimate of read coverage.</li><li>Fine read selection. Use the coverage information to find the good regions again but with more stringent thresholds. Discard contained reads.</li><li>Generate a string graph. Prune tips, drop weak overlaps and collapse short bubbles. These procedures are similar to those implemented in short-read assemblers.</li><li>Merge unambiguous overlaps to produce unitig sequences.</li></ul></blockquote><h4 id="limitations"><a class="markdownIt-Anchor" href="#limitations"></a> Limitations</h4><blockquote><ul><li>Consensus base quality is similar to input reads (may be fixed with a consensus tool).</li><li>Only tested on a dozen of high-coverage PacBio/ONT data sets (more testing needed).</li><li>Prone to collapse repeats or segmental duplications longer than input reads (hard to fix without error correction).</li></ul></blockquote><p>Since <code>miniasm</code> is not a stand-alone genome assembly tool, it depends on <a href="https://github.com/lh3/minimap" target="_blank" rel="noopener">minimap</a> or <a href="https://github.com/lh3/minimap2" target="_blank" rel="noopener">minimap2</a>. <code>minimap</code> had been archived by the author, and <code>minimap2</code> now is the successor. But <code>minimap</code> is also worth a try.</p><p>In this note I only used <code>minimap</code> or <code>minimap2</code> as a read overlapper for assembly. Go see the <a href="https://github.com/lh3/minimap2" target="_blank" rel="noopener">docs of minimap2</a> for full instructions.</p><h3 id="racon"><a class="markdownIt-Anchor" href="#racon"></a> Racon</h3><p><a href="https://github.com/isovic/racon" target="_blank" rel="noopener">Racon</a> is a consensus module for raw de novo DNA assembly of long uncorrected reads.</p><blockquote><p>Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step. The goal of Racon is to generate genomic consensus which is of similar or better quality compared to the output generated by assembly methods which employ both error correction and consensus steps, while providing a speedup of several times compared to those methods. It supports data produced by both Pacific Biosciences and Oxford Nanopore Technologies.<br><br>Racon can be used as a polishing tool after the assembly with either Illumina data or data produced by third generation of sequencing. The type of data inputed is automatically detected.<br><br>Racon takes as input only three files: contigs in FASTA/FASTQ format, reads in FASTA/FASTQ format and overlaps/alignments between the reads and the contigs in MHAP/PAF/SAM format. Output is a set of polished contigs in FASTA format printed to stdout. All input files can be compressed with gzip.<br><br>Racon can also be used as a read error-correction tool. In this scenario, the MHAP/PAF/SAM file needs to contain pairwise overlaps between reads with dual overlaps.<br><br>A wrapper script is also available to enable easier usage to the end-user for large datasets. It has the same interface as racon but adds two additional features from the outside. Sequences can be subsampled to decrease the total execution time (accuracy might be lower) while target sequences can be split into smaller chunks and run sequentially to decrease memory consumption. Both features can be run at the same time as well.</p></blockquote><p>My feelings (about <code>miniasm</code>):</p><ul><li>very fast</li><li>comparatively good results</li><li>The docs are not good enough</li><li>huge memory consumption (may not suitable for large genome)</li><li>bugs (at least for <code>miniasm</code>)</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Install minimap and miniasm (requiring gcc and zlib)</span><br><span class="line">git clone https://github.com/lh3/minimap &amp;&amp; (cd minimap &amp;&amp; make)</span><br><span class="line">git clone https://github.com/lh3/minimap2 &amp;&amp; (cd minimap2 &amp;&amp; make)</span><br><span class="line">git clone https://github.com/lh3/miniasm &amp;&amp; (cd miniasm &amp;&amp; make)</span><br><span class="line"></span><br><span class="line"># Install Racon (requiring gcc 4.8+ or clang 3.4+, and cmake 3.2+)</span><br><span class="line">git clone --recursive https://github.com/isovic/racon.git racon</span><br><span class="line">cd racon</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># All-vs-all PacBio read Overlap with minimap</span><br><span class="line">minimap/minimap -Sw5 -L100 -m0 -t 8 reads.fq reads.fq | gzip -1 &gt; reads.paf.gz</span><br><span class="line"># or minimap2</span><br><span class="line">minimap2/minimap2 -x ava-pb -t 8 reads.fq reads.fq | gzip -1 &gt; reads.paf.gz</span><br><span class="line"></span><br><span class="line"># Layout</span><br><span class="line">miniasm/miniasm -f reads.fq reads.paf.gz &gt; reads.gfa</span><br><span class="line"></span><br><span class="line"># Consensus</span><br><span class="line">## GFA to fasta</span><br><span class="line">awk &apos;$1 ~/S/ &#123;print &quot;&gt;&quot;$2&quot;\n&quot;$3&#125;&apos; reads.gfa &gt; reads.fasta</span><br><span class="line"></span><br><span class="line">## Correction 1</span><br><span class="line">minimap/minimap2 -t 8 reads.fasta reads.fq &gt; reads.gfa1.paf</span><br><span class="line">racon -t 8 reads.fq reads.gfa1.paf reads.fasta reads.racon1.fasta</span><br><span class="line"></span><br><span class="line">## Correction 2 (optional)</span><br><span class="line">minimap/minimap2 -t 8 reads.racon1.fasta reads.fq &gt; reads.gfa2.paf</span><br><span class="line">racon -t 8 reads.fq reads.gfa2.paf reads.racon1.fasta reads.racon2.fasta</span><br></pre></td></tr></table></figure><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><ul><li><p>OS environment: CentOS6.6  86_64  glibc-2.12. QSUB grid system. 15 Fat nodes (2TB RAM, 40 CPU) and 10 Blade nodes (156G RAM, 24 CPU).</p></li><li><p><code>minimap2</code> version: 2.8-r672</p></li><li><p><code>miniasm</code> version: 0.2-r168-dirty</p></li><li><p><code>Racon</code> version: 0.5.0</p></li></ul><h3 id="run-1-with-about-50x-data"><a class="markdownIt-Anchor" href="#run-1-with-about-50x-data"></a> run 1, with about 50X data</h3><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run1, 171224 third data</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/minimap2-2.8_x64-linux/minimap2 -t <span class="variable">$PPN</span> -x ava-pb <span class="variable">$DATADIR</span>/171224.fasta <span class="variable">$DATADIR</span>/171224.fasta | gzip -1 &gt; reads.paf.gz</span></span><br><span class="line">/home/zhangll/software/minimap/miniasm/miniasm -f $DATADIR/171224.fasta reads.paf.gz &gt; reads.gfa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> racon</span></span><br><span class="line">awk '$1 ~/S/ &#123;print "&gt;"$2"\n"$3&#125;' reads.gfa &gt; reads.fasta</span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/minimap2-2.8_x64-linux/minimap2 -t <span class="variable">$PPN</span> reads.fasta <span class="variable">$DATADIR</span>/171224.fasta | /home/zhangll/software/racon/bin/racon -t <span class="variable">$PPN</span> <span class="variable">$DATADIR</span>/171224.fastq - reads.gfa racon1.fasta</span></span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN1475310871</span><br><span class="line">Size_withoutN1475310871</span><br><span class="line">Seq_Num20186</span><br><span class="line">Mean_Size73085</span><br><span class="line">Median_Size52525</span><br><span class="line">Longest_Seq1183822</span><br><span class="line">Shortest_Seq689</span><br><span class="line">GC_Content31.66</span><br><span class="line">N5097955</span><br><span class="line">L504346</span><br><span class="line">N9033406</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><h3 id="run2-with-about-70x-data"><a class="markdownIt-Anchor" href="#run2-with-about-70x-data"></a> run2, with about 70X data</h3><p>Didn’t run <code>Racon</code>.</p><p>commands:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run2, all thid data</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TOOLDIR/minimap2-2.8_x64-linux/minimap2 -t <span class="variable">$PPN</span> -x ava-pb <span class="variable">$DATADIR</span>/third_all.fasta <span class="variable">$DATADIR</span>/third_all.fasta | gzip -1 &gt; reads.paf.gz</span></span><br><span class="line">/home/zhangll/software/minimap/miniasm/miniasm -f $DATADIR/third_all.fasta reads.paf.gz &gt; reads.gfa</span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN1592482491</span><br><span class="line">Size_withoutN1592482491</span><br><span class="line">Seq_Num23120</span><br><span class="line">Mean_Size68879</span><br><span class="line">Median_Size49376</span><br><span class="line">Longest_Seq1002424</span><br><span class="line">Shortest_Seq689</span><br><span class="line">GC_Content33.1</span><br><span class="line">N5092250</span><br><span class="line">L505029</span><br><span class="line">N9031666</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><p>The assembling size were larger than the estimated genome size (~850M) in both runs. But this pipeline is very fast.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Vaser R, Sovic I, Nagarajan N, Sikic M. Fast and accurate de novo genome assembly from long uncorrected reads. Genome Research. 2017 Jan 18:gr.214270.116. doi:10.1101/gr.214270.116 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Li H. Minimap2: versatile pairwise alignment for nucleotide sequences. arXiv:1708.01492 [q-bio]. 2017 Aug 4 [accessed 2018 Jan 10]. <a href="http://arxiv.org/abs/1708.01492" target="_blank" rel="noopener">http://arxiv.org/abs/1708.01492</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Li H. Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences. Bioinformatics. 2016;32(14):2103–2110. doi:10.1093/bioinformatics/btw152 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;miniasm + Racon&lt;/code&gt; is a long-read &lt;em&gt;de novo&lt;/em&gt; genome assembly pipeline.&lt;/p&gt;
&lt;h2 id=&quot;miniasm-racon-assembly-pipeline&quot;&gt;&lt;a cl
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="TGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/TGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="TGS genome assembly" scheme="https://yiweiniu.github.io/blog/tags/TGS-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: OPERA-LG</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-OPERA-LG/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-OPERA-LG/</id>
    <published>2018-03-29T16:18:15.000Z</published>
    <updated>2018-06-30T07:13:53.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="genome-assembly-pipeline-opera-lg"><a class="markdownIt-Anchor" href="#genome-assembly-pipeline-opera-lg"></a> Genome assembly pipeline: OPERA-LG</h1><p>tags: bio-tools, genome assembly pipeline, hybrid genome assembly, scaffloding</p><p>category: genome assembly, hyrid pipeline</p><h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>From <a href="https://sourceforge.net/p/operasf/wiki/The%20OPERA%20wiki/" target="_blank" rel="noopener">The OPERA wiki </a></p><blockquote><p>OPERA (Optimal Paired-End Read Assembler) is a sequence assembly program (<a href="http://en.wikipedia.org/wiki/Sequence_assembly" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Sequence_assembly</a>). It uses information from paired-end/mate-pair/long reads to order and orient the intermediate contigs/scaffolds assembled in a genome assembly project, in a process known as Scaffolding. OPERA is based on an exact algorithm that is guaranteed to minimize the discordance of scaffolds with the information provided by the paired-end/mate-pair/long reads (for further details see Gao et al, 2011).</p></blockquote><blockquote><p>Note that since the original publication, we have made significant changes to OPERA (v1.0 onwards) including refinements to its basic algorithm (to reduce local errors, improve efficiency etc.) and incorporated features that are important for scaffolding large genomes (multi-library support, better repeat-handling etc.), in addition to other scalability and usability improvements (bam and gzip support, smaller memory footprint). We therefore encourage you to download and use our latest version: OPERA-LG. In our benchmarks, it has significantly improved corrected N50 and reduced the number of scaffolding errors. Furthermore, our latest release contains the wrapper script OPERA-long-read that enables scaffolding with long-reads from third-generation sequencing technologies (PacBio or Oxford Nanopore). The manuscript describing the new features and algorithms is available at Genome Biology. We look forward to getting your feedback to improve it further.</p></blockquote><p>Its paper</p><blockquote><p>Gao S, Bertrand D, Chia BKH, Nagarajan N. OPERA-LG: efficient and exact scaffolding of large, repeat-rich eukaryotic genomes with performance guarantees. Genome Biology. 2016;17:102. doi:10.1186/s13059-016-0951-y</p></blockquote><p>My feelings:</p><ul><li>too many dependencies</li><li>not so easy to use</li><li>have bugs</li><li>support re-scaffolding</li><li>can’t use NGS reads and long-reads simultaneously.</li></ul><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><p>See <a href="https://sourceforge.net/p/operasf/wiki/The%20OPERA%20wiki/" target="_blank" rel="noopener">The OPERA wiki</a> for full docs.</p><p>Scripts used:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -N OPERA-LG</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -j eo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -q Test</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -l nodes=1:ppn=8</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -d /DenovoSeq/OPERA-LG</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -V</span></span><br><span class="line"></span><br><span class="line">echo Start time is `date +%Y/%m/%d--%H:%M`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffold with short reads</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># preprocess reads</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">for</span> sample <span class="keyword">in</span> 270B 500B 800B 3k_1 5k-1 5k-2 10k; <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">perl /software/OPERA-LG_v2.0.6/bin/preprocess_reads.pl --contig /DenovoSeq/MEGAHIT/megahit_out.no270/final.contigs.fa --illumina-read1 /DenovoSeq/trimmomatic/<span class="variable">$&#123;sample&#125;</span>_R_1P.fastq --illumina-read2 /DenovoSeq/trimmomatic/<span class="variable">$&#123;sample&#125;</span>_R_2P.fastq --out <span class="variable">$&#123;sample&#125;</span>.map --tool-dir /software/bwa-0.7.15 --samtools-dir /software/samtools-0.1.19</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">done</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># with all libraries</span></span></span><br><span class="line">/software/OPERA-LG_v2.0.6/bin/OPERA-LG /DenovoSeq/MEGAHIT/megahit_out.no270/final.contigs.fa 270B.map,500B.map,800B.map,3k_1.map,5k-1.map,5k-2.map,10k.map ./opera /software/samtools-0.1.19</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># without 270 library</span></span></span><br><span class="line">/software/OPERA-LG_v2.0.6/bin/OPERA-LG /DenovoSeq/MEGAHIT/megahit_out.no270/final.contigs.fa 500B.map,800B.map,3k_1.map,5k-1.map,5k-2.map,10k.map ./opera.no270 /software/samtools-0.1.19</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the first run of OPERA-LG, with 270 library, and megahit<span class="string">'s contigs</span></span></span><br><span class="line">perl /software/OPERA-LG_v2.0.6/bin/OPERA-long-read.pl --contig-file /DenovoSeq/MEGAHIT/megahit_out/final.contigs.fa --illumina-read1 10k_R1.fasta --illumina-read2 10k_R2.fasta --long-read-file av_20k.fasta --output-prefix 10k.lr --output-directory ./ --num-of-processors 40 --blasr /src/wgs-8.3rc2/Linux-amd64/bin --short-read-tooldir /software/bwa-0.7.15 --opera /software/OPERA-LG_v2.0.6/bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This the second run of OPERA-LG, re-scaffold the results of SOAP-fusion. ins_270 library</span></span><br><span class="line">perl /software/OPERA-LG_v2.0.6/bin/OPERA-long-read.pl --contig-file /DenovoSeq/MEGAHIT/small_insert.no270/SOAP-fusion/k41.scafSeq --illumina-read1 /DenovoSeq/trimmomatic/270B_R_1P.fasta --illumina-read2 /DenovoSeq/trimmomatic/270B_R_2P.fasta --long-read-file /DenovoSeq/Third_rawData/av_20k.fasta --output-prefix 270B.lr --output-directory ./270B --num-of-processors 10 --blasr /software/src/wgs-8.3rc2/Linux-amd64/bin --short-read-tooldir /software/bwa-0.7.15 --opera /software/OPERA-LG_v2.0.6/bin --samtools-dir /software/samtools-0.1.19/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> This is the third run of OPERA-LG, re-scaffold the results of SOAP-fusion. ins_500 library</span></span><br><span class="line">perl /software/OPERA-LG_v2.0.6/bin/OPERA-long-read.pl --contig-file /DenovoSeq/MEGAHIT/small_insert.no270/SOAP-fusion/k41.scafSeq --illumina-read1 /DenovoSeq/trimmomatic/500B_R_1P.fasta --illumina-read2 /DenovoSeq/trimmomatic/500B_R_2P.fasta --long-read-file /DenovoSeq/Third_rawData/av_20k.fasta --output-prefix 500B.lr --output-directory ./500B --num-of-processors 10 --blasr /software/src/wgs-8.3rc2/Linux-amd64/bin --short-read-tooldir /software/bwa-0.7.15 --opera /software/OPERA-LG_v2.0.6/bin --samtools-dir /software/samtools-0.1.19/</span><br><span class="line"></span><br><span class="line">echo Finish time is `date +%Y/%m/%d--%H:%M`</span><br></pre></td></tr></table></figure><p>The stats I got:</p><h3 id="opera"><a class="markdownIt-Anchor" href="#opera"></a> OPERA</h3><p>with all libraries</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 679262960</span><br><span class="line">Size_withoutN: 679262960</span><br><span class="line">Seq_Num: 782765</span><br><span class="line">Mean_Size: 867</span><br><span class="line">Median_Size: 429</span><br><span class="line">Longest_Seq: 61533</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.31</span><br><span class="line">N50: 1529</span><br><span class="line">N90: 348</span><br><span class="line">Gap: 0.0</span><br></pre></td></tr></table></figure><p>without ins_270 library:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 679262960</span><br><span class="line">Size_withoutN: 679262960</span><br><span class="line">Seq_Num: 782765</span><br><span class="line">Mean_Size: 867</span><br><span class="line">Median_Size: 429</span><br><span class="line">Longest_Seq: 61533</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.31</span><br><span class="line">N50: 1529</span><br><span class="line">N90: 348</span><br><span class="line">Gap: 0.0</span><br></pre></td></tr></table></figure><h3 id="opera-lg"><a class="markdownIt-Anchor" href="#opera-lg"></a> OPERA-LG</h3><p>First run with long-reads, with 270 library, and megahit’s contigs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN767662393</span><br><span class="line">Size_withoutN767662393</span><br><span class="line">Seq_Num989298</span><br><span class="line">Mean_Size775</span><br><span class="line">Median_Size428</span><br><span class="line">Longest_Seq80889</span><br><span class="line">Shortest_Seq200</span><br><span class="line">GC_Content32.64</span><br><span class="line">N501115</span><br><span class="line">N90340</span><br><span class="line">Gap0.0</span><br></pre></td></tr></table></figure><p>Second run, re-scaffold the results of SOAP-fusion. ins_270 library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 765246417</span><br><span class="line">Size_withoutN: 574675978</span><br><span class="line">Seq_Num: 377325</span><br><span class="line">Mean_Size: 2028</span><br><span class="line">Median_Size: 393</span><br><span class="line">Longest_Seq: 436254</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.42</span><br><span class="line">N50: 33478</span><br><span class="line">N90: 439</span><br><span class="line">Gap: 24.9</span><br></pre></td></tr></table></figure><p>Third run,  re-scaffold the results of SOAP-fusion. ins_500 library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 765246417</span><br><span class="line">Size_withoutN: 574675978</span><br><span class="line">Seq_Num: 377325</span><br><span class="line">Mean_Size: 2028</span><br><span class="line">Median_Size: 393</span><br><span class="line">Longest_Seq: 436254</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.42</span><br><span class="line">N50: 33478</span><br><span class="line">N90: 439</span><br><span class="line">Gap: 24.9</span><br></pre></td></tr></table></figure><p>What did this software do? The <code>scaffold N50</code> of SOAPdenovo-fusion is 33478 … What a waste of time!</p><p>This note can serve as a reference in case I will have to use it again…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;genome-assembly-pipeline-opera-lg&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#genome-assembly-pipeline-opera-lg&quot;&gt;&lt;/a&gt; Genome assembly pipel
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="TGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/TGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="scaffolding" scheme="https://yiweiniu.github.io/blog/tags/scaffolding/"/>
    
      <category term="hybrid genome assembly" scheme="https://yiweiniu.github.io/blog/tags/hybrid-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: BESST</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-BESST/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-BESST/</id>
    <published>2018-03-29T16:15:04.000Z</published>
    <updated>2018-06-30T07:10:32.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>From the introduction of <a href="https://github.com/ksahlin/BESST" target="_blank" rel="noopener">BESST git repo</a>:</p><blockquote><p>BESST is a package for scaffolding genomic assemblies.</p></blockquote><p>It paper</p><blockquote><p>Sahlin K, Chikhi R, Arvestad L. Assembly scaffolding with PE-contaminated mate-pair libraries. Bioinformatics. 2016;32(13):1925–1932. doi:10.1093/bioinformatics/btw064</p></blockquote><p>My feeling:</p><ul><li>too many steps</li><li>awkward</li><li>only support NGS reads</li><li>not so good results (at least in my case)</li></ul><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><p><a href="https://github.com/ksahlin/BESST" target="_blank" rel="noopener">BESST git repo</a> has full docs.</p><p>Scripts used:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -N BESST</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -j eo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -q Test</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -l nodes=1:ppn=20</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PBS -V</span></span><br><span class="line"></span><br><span class="line">echo Start time is `date +%Y/%m/%d--%H:%M`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> align the PE/MP reads to contigs with BWA MEM</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">for</span> sample <span class="keyword">in</span> 270B 500B 800B 5k-1 10k; <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">/software/bwa-0.7.15/bwa mem -t 40 /DenovoSeq/MEGAHIT/megahit_out/final.contigs.fa /DenovoSeq/raw_data/<span class="variable">$&#123;sample&#125;</span>_R1.fastq /DenovoSeq/raw_data/<span class="variable">$&#123;sample&#125;</span>_R2.fastq | samtools view -uS - | samtools sort -@ 8 -m 4G - -T sam_sort_tmp -o ./bwaout/<span class="variable">$&#123;sample&#125;</span>.sorted.bam</span></span><br><span class="line"><span class="meta">#</span><span class="bash">samtools index ./bwaout/<span class="variable">$&#123;sample&#125;</span>.sorted.bam</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">done</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Damn, I forgot why I use repair.sh.</span></span><br><span class="line">for sample in 3k_1 5k-2; do</span><br><span class="line">/software/bbmap/repair.sh in1=/DenovoSeq/raw_data/$&#123;sample&#125;_R1.fastq in2=/DenovoSeq/raw_data/$&#123;sample&#125;_R2.fastq out1=/DenovoSeq/raw_data/$&#123;sample&#125;_R1.fixed.fastq out2=/DenovoSeq/raw_data/$&#123;sample&#125;_R2.fixed.fastq</span><br><span class="line">/software/bwa-0.7.15/bwa mem -t 40 /DenovoSeq/MEGAHIT/megahit_out/final.contigs.fa /DenovoSeq/raw_data/$&#123;sample&#125;_R1.fixed.fastq /DenovoSeq/raw_data/$&#123;sample&#125;_R2.fixed.fastq | samtools view -uS - | samtools sort -@ 8 -m 4G - -T sam_sort_tmp -o ./bwaout/$&#123;sample&#125;.sorted.bam</span><br><span class="line">samtools index ./bwaout/$&#123;sample&#125;.sorted.bam</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> scaffold the contigs of MEGAHIT</span></span><br><span class="line">export PATH=/software/Python.2.7.13/bin:$PATH</span><br><span class="line"></span><br><span class="line">/software/BESST/runBESST -plots -q -c /DenovoSeq/MEGAHIT/megahit_out/final.contigs.fa -f ./bwaout/270B.sorted.bam ./bwaout/500B.sorted.bam ./bwaout/800B.sorted.bam ./bwaout/3k_1.sorted.bam ./bwaout/5k-1.sorted.bam ./bwaout/5k-2.sorted.bam ./bwaout/10k.sorted.bam -orientation fr fr fr rf rf rf rf</span><br><span class="line"></span><br><span class="line">/software/BESST/runBESST -plots -q -c /DenovoSeq/MEGAHIT/megahit_out.no270/final.contigs.fa -f ./bwaout/500B.sorted.bam ./bwaout/800B.sorted.bam ./bwaout/3k_1.sorted.bam ./bwaout/5k-1.sorted.bam ./bwaout/5k-2.sorted.bam ./bwaout/10k.sorted.bam -orientation  fr fr rf rf rf rf -o ./no270</span><br><span class="line"></span><br><span class="line">echo Finish time is `date +%Y/%m/%d--%H:%M`</span><br></pre></td></tr></table></figure><p>Tested with or without ins_270 library.</p><p>And the stats I got:</p><p>with ins_270 library:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 778878802</span><br><span class="line">Size_withoutN: 755401923</span><br><span class="line">Seq_Num: 811939</span><br><span class="line">Mean_Size: 959</span><br><span class="line">Median_Size: 393</span><br><span class="line">Longest_Seq: 561369</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.65</span><br><span class="line">N50: 2715</span><br><span class="line">N90: 342</span><br><span class="line">Gap: 3.01</span><br></pre></td></tr></table></figure><p>without ins_270 library:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 654690437</span><br><span class="line">Size_withoutN: 626185453</span><br><span class="line">Seq_Num: 618555</span><br><span class="line">Mean_Size: 1058</span><br><span class="line">Median_Size: 438</span><br><span class="line">Longest_Seq: 327376</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.31</span><br><span class="line">N50: 2277</span><br><span class="line">N90: 365</span><br><span class="line">Gap: 4.35</span><br></pre></td></tr></table></figure><p>Though not been fully tested, using <code>BESST</code> got worse results than <code>SOAPdenovo</code>. Then I gave up this tool.</p><p>This note can serve as a reference in case I will have to use it again…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h2&gt;
&lt;p&gt;From the introduction of &lt;a href=&quot;https://github.com/ksahlin/BE
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="NGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/NGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="NGS genome assembly" scheme="https://yiweiniu.github.io/blog/tags/NGS-genome-assembly/"/>
    
      <category term="scaffolding" scheme="https://yiweiniu.github.io/blog/tags/scaffolding/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: LINKS</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-LINKS/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-LINKS/</id>
    <published>2018-03-29T16:07:28.000Z</published>
    <updated>2018-07-09T02:23:06.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>From its <a href="http://www.bcgsc.ca/platform/bioinfo/software/links" target="_blank" rel="noopener">official site</a></p><blockquote><p>LINKS is a scalable genomics application for scaffolding or re-scaffolding genome assembly drafts with long reads, such as those produced by Oxford Nanopore Technologies Ltd and Pacific Biosciences. It provides a generic alignment-free framework for scaffolding and can work on any sequences. It is versatile and supports not only long sequences as a source of long-range information, but also MPET pairs and linked-reads, such as those from the 10X Genomics GemCode and Chromium platform, via ARCS (<a href="http://www.bcgsc.ca/platform/bioinfo/software/arcs" target="_blank" rel="noopener">http://www.bcgsc.ca/platform/bioinfo/software/arcs</a>). Fill gaps in LINKS-derived scaffolds using Sealer (<a href="http://www.bcgsc.ca/platform/bioinfo/software/sealer" target="_blank" rel="noopener">http://www.bcgsc.ca/platform/bioinfo/software/sealer</a>).</p></blockquote><p>Its paper:</p><blockquote><p>Warren RL, Yang C, Vandervalk BP, Behsaz B, Lagman A, Jones SJM, Birol I. LINKS: Scalable, alignment-free scaffolding of draft genomes with long reads. GigaScience. 2015;4:35. doi:10.1186/s13742-015-0076-3</p></blockquote><p>My feelings:</p><ul><li>easy to use</li><li>support scaffolding and re-scaffolding</li><li>Fast</li><li>comparatively good results (at least in my case, compared to BESST and OPERA-LG)</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><p>Note: this section is modified from <a href="https://github.com/bcgsc/LINKS" target="_blank" rel="noopener">LINKS git repo</a> for quick reference. Please read the entire doc if you want to use the tool.</p><h3 id="running-links"><a class="markdownIt-Anchor" href="#running-links"></a> Running LINKS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">e.g. ./LINKS -f ecoliK12_abyss_illumina_contig_baseline.fa -s K12_F2D.fof -b ecoliK12-ONT_linksSingleIterationTIG</span><br><span class="line"></span><br><span class="line">Usage: ./LINKS [v1.8.5]</span><br><span class="line">-f  sequences to scaffold (Multi-FASTA format, required)</span><br><span class="line">-s  file-of-filenames, full path to long sequence reads or MPET pairs [see below] (Multi-FASTA/fastq format, required)</span><br><span class="line">-m  MPET reads (default -m 1 = yes, default = no, optional</span><br><span class="line">! DO NOT SET IF NOT USING MPET. WHEN SET, LINKS WILL EXPECT A SPECIAL FORMAT UNDER -s</span><br><span class="line">! Paired MPET reads in their original outward orientation &lt;- -&gt; must be separated by ":"</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash">template_name</span></span><br><span class="line">  ACGACACTATGCATAAGCAGACGAGCAGCGACGCAGCACG:ATATATAGCGCACGACGCAGCACAGCAGCAGACGAC</span><br><span class="line">-d  distance between k-mer pairs (ie. target distances to re-scaffold on. default -d 4000, optional)</span><br><span class="line">Multiple distances are separated by comma. eg. -d 500,1000,2000,3000</span><br><span class="line">-k  k-mer value (default -k 15, optional)</span><br><span class="line">-t  step of sliding window when extracting k-mer pairs from long reads</span><br><span class="line">(default -t 2, optional)</span><br><span class="line">Multiple steps are separated by comma. eg. -t 10,5</span><br><span class="line">-o  offset position for extracting k-mer pairs (default -o 0, optional)</span><br><span class="line">-e  error (%) allowed on -d distance   e.g. -e 0.1  == distance +/- 10%</span><br><span class="line">(default -e 0.1, optional)</span><br><span class="line">-l  minimum number of links (k-mer pairs) to compute scaffold (default -l 5, optional) </span><br><span class="line">-a  maximum link ratio between two best contig pairs (default -a 0.3, optional)</span><br><span class="line"> *higher values lead to least accurate scaffolding*</span><br><span class="line">-z  minimum contig length to consider for scaffolding (default -z 500, optional)</span><br><span class="line">-b  base name for your output files (optional)</span><br><span class="line">-r  Bloom filter input file for sequences supplied in -s (optional, if none provided will output to .bloom)</span><br><span class="line"> NOTE: BLOOM FILTER MUST BE DERIVED FROM THE SAME FILE SUPPLIED IN -f WITH SAME -k VALUE</span><br><span class="line"> IF YOU DO NOT SUPPLY A BLOOM FILTER, ONE WILL BE CREATED (.bloom)</span><br><span class="line">-p  Bloom filter false positive rate (default -p 0.001, optional; increase to prevent memory allocation errors)</span><br><span class="line">-x  Turn off Bloom filter functionality (-x 1 = yes, default = no, optional)</span><br><span class="line">-v  Runs in verbose mode (-v 1 = yes, default = no, optional)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line">-s K12_F2D.fof specifies a file-of-filenames (text file) listing: K12_full2dONT_longread.fa (see ./test folder)</span><br><span class="line">-x When turned on (-x 1), LINKS will run with a behaviour equivalent to v1.3 (no Bloom filters).  </span><br><span class="line">This may be useful for large genome assembly drafts and when long reads are extremely high quality.</span><br></pre></td></tr></table></figure><h3 id="tips-to-minimize-memory-usage-and-additional-notes"><a class="markdownIt-Anchor" href="#tips-to-minimize-memory-usage-and-additional-notes"></a> Tips to minimize memory usage and additional notes</h3><p>The most important parameters for decreasing RAM usage are <code>-t</code> and <code>-d</code>. The largest dataset used for scaffolding by our group was a draft assembly of the white spruce genome (20 Gb)* - For this, a large sliding window, -t (200) was used and was decreased as the k-mer distance -d increased. *refer to LINKSrecipe_pglaucaPG29-WS77111.sh in the ./test folder</p><p>Because you want want to start with a low -d for scaffolding, you have to estimate how many minimum links (-l) would fit in a -d window +/- error -e given sliding window -t. For instance, it may not make sense to use -t 200, -d 500 at low coverages BUT if you have at least 10-fold coverage it might since, in principle, you should be able to derive sufficient k-mer pairs within same locus if there’s no bias in genome sequencing.</p><p>For re-scaffolding white spruce, only 1X coverage was available (since the re-scaffolding used a draft assembly instead of long reads), but even -t 200 -d 5000 (1st iteration) did merge scaffolds even though, in theory, the -e parameter will play an important role limiting linkages outside of the target range -d (+/-) -e %. This is especially true when using raw MPET for scaffolding, to limit spurious linkages by contaminating PETs.</p><p>On the data side of things, reducing the coverage (using less long reads), and limiting to only the highest quality reads would help decrease RAM usage.</p><p>In v1.5, LINKS builds a Bloom filter that comprises all k-mer of a supplied (-f) genome draft and uses it to only hash k-mer pairs from longreads having an equivalent in the Bloom filter. When LINKS runs iteratively, the bloom filter built at the first iteration is re-used thus saving execution time.</p><p>In v1.8, Users may input multiple distances using the -d parameter, separating each distance by a comma. eg. -d 500,1000,2000,4000,5000 will have for effect to extract kmer pairs at these five distance intervals.</p><p>Similarly, the window step size now accepts multiple integers, each separated by a comma and with the order matching that in -d However, the size of the array can be shorter, and the last valid -t will be propagated to subsequent distances when they are not defined. eg. -t 20,10,5 A step size of 20, 10, 5, 5, 5 bp will be used when exploring the distances supplied above.</p><p>In v1.8, a single round of scaffolding is done, using the kmer pair space extracted at the specified distances. Accordingly, v1.8 is not expected to yield the exact same results as separate iterative LINKS runs. For users comfortable with the original set up, no change is needed to make use of the previous LINKS behavior.</p><p>Simultaneous exploration of vast kmer space is expected to yield better scaffolding results.</p><p>WARNING: Specifying many distances will require large amount of RAM, especially with low -t values.</p><h2 id="in-practice"><a class="markdownIt-Anchor" href="#in-practice"></a> In practice</h2><h3 id="background"><a class="markdownIt-Anchor" href="#background"></a> background</h3><ul><li>An insect</li><li>The species: high heterogeneity, high AT, high repetition.</li><li>Genome size: male 790M, female 830M.</li></ul><h3 id="data"><a class="markdownIt-Anchor" href="#data"></a> data</h3><p>The Illumina data I used:</p><table><thead><tr><th>Source</th><th>Insert size (bp)</th><th>Avg. read size (bp)</th><th>Raw bases (G)</th><th>Raw reads (M)</th><th>Sequencing depth</th></tr></thead><tbody><tr><td>AV1, M</td><td>270</td><td>150</td><td>44.1</td><td>293.6</td><td>55.5</td></tr><tr><td>AV2, F</td><td>500</td><td>150</td><td>24.4</td><td>162.8</td><td>29.4</td></tr><tr><td>AV2, F</td><td>800</td><td>150</td><td>15.8</td><td>105.4</td><td>19.0</td></tr><tr><td>AV2, F</td><td>3k</td><td>114</td><td>10.4</td><td>91.8</td><td>12.5</td></tr><tr><td>AV2, F</td><td>5k</td><td>150</td><td>29.8</td><td>198.7</td><td>35.9</td></tr><tr><td>AV2, F</td><td>5k</td><td>114</td><td>11.5</td><td>101.2</td><td>13.8</td></tr><tr><td>AV2, F</td><td>10k</td><td>150</td><td>17.5</td><td>116.8</td><td>21.1</td></tr><tr><td>Total</td><td>-</td><td>-</td><td>153.5</td><td>1070.3</td><td>187.3</td></tr></tbody></table><p>And the PacBio data:</p><table><thead><tr><th>Source</th><th>Raw bases (G)</th><th>Raw reads (M)</th><th>Sequencing depth</th><th>Avg.read size (bp)</th><th>N50 (bp)</th><th>N90 (bp)</th><th>Note</th></tr></thead><tbody><tr><td>AV3, F</td><td>15.2</td><td>20.1</td><td>18.31</td><td>7550</td><td>10046</td><td>4558</td><td>20170111</td></tr><tr><td>AV4, F</td><td>45.2</td><td>4.6</td><td>54.46</td><td>9798</td><td>17348</td><td>5702</td><td>20171224</td></tr><tr><td>Total</td><td>60.4</td><td>24.7</td><td>72.77</td><td>9115</td><td>14630</td><td>5310</td><td>-</td></tr></tbody></table><p>Because we didn’t receive the data at the same time (first all Illumina data, then 20X PacBio data, finally another 50X PacBio data), we tried many different assembly strategies: Illumina-dominant, and PacBio-dominant. We found ‘PacBio-dominant pipelines’ produced significantly good results, so we gradually gave up other pipelines and focused on exploring PacBio assemblers.</p><p>This note is one of the attempts of ‘Illumina-dominant pipelines’, and I ran LINKS as a scaffoling tool, after runing MEGAHIT-SOAPdenovo successfully. I’ve tried so many with MEGAHIT, and I ran LINKS after every attempt. See <a href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-MEGAHIT-SOAPdenovo-fusion/">Genome Assembly Pipeline: MEGAHIT &amp; SOAPdenovo-fusion</a>. I put two representative results here as a memo.</p><p>PS: I encountered a problem and solved with the help of the author: <a href="https://github.com/bcgsc/LINKS/issues/12" target="_blank" rel="noopener">LINKS termineted with no error message when I used hybrid reads to scaffold</a>.</p><p>The <code>-t</code> and <code>-d</code> are important for RAM consumption. I’ve tried <code>-t</code> with <code>5, 10, 20</code>, and <code>-t 20</code> works. <code>-d</code> didn’t matter in my case, so I just set lots of <code>-d</code>.</p><p>Scripts I used and the stats I got:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">LINKS_HOME=/software/links_v1.8.5</span><br><span class="line">WORK_DIR=/DenovoSeq</span><br><span class="line"></span><br><span class="line">echo Start time is `date +%Y/%m/%d--%H:%M`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> re-scafflod the output of MEGAHIT small insert size and SOAP-fusion. use about 50X data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$LINKS_HOME</span>/LINKS -k 21 -f <span class="variable">$WORK_DIR</span>/MEGAHIT/small_insert.no270/SOAP-fusion/k41.scafSeq -s Pacbio.fof -b reLINKS2 -t 20 -d 4000,5000,6000,8000,10000,15000,20000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> re-scaffold the output of MEGAHIT small insert size and SOAP-fusion, use about 70X data</span></span><br><span class="line"><span class="meta">$</span><span class="bash">LINKS_HOME/LINKS -k 21 -f <span class="variable">$WORK_DIR</span>/MEGAHIT/small_insert.no270/SOAP-fusion/k41.scafSeq -s Pacbio_171231.fof -b reLINKS_171231 -t 20 -d 4000,5000,6000,8000,10000,15000,20000</span></span><br><span class="line"></span><br><span class="line">echo Finish time is `date +%Y/%m/%d--%H:%M`</span><br></pre></td></tr></table></figure><p>And the input data:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># first batch PB data, about 20X</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat Pacbio.fof</span></span><br><span class="line">/DenovoSeq/Third_rawData/av_20k.fasta</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># all PB data, about 70X</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat Pacbio_171231.fof</span></span><br><span class="line">/DenovoSeq/Third_rawData/third_all.fasta</span><br></pre></td></tr></table></figure><p>The stats I got:</p><p>re-scaffloding the output of MEGAHIT small insert size and SOAP-fusion, use ~20X PB data:</p><table><thead><tr><th></th><th>MEGAHIT</th><th>SOAP-fusion</th><th>LINKS</th></tr></thead><tbody><tr><td>Size_includeN</td><td>582099585</td><td>765246417</td><td>776147223</td></tr><tr><td>Size_withoutN</td><td>582099585</td><td>574675978</td><td>574675978</td></tr><tr><td>Seq_Num</td><td>575808</td><td>377325</td><td>370033</td></tr><tr><td>Mean_Size</td><td>1010</td><td>2028</td><td>2097</td></tr><tr><td>Median_Size</td><td>433</td><td>393</td><td>389</td></tr><tr><td>Longest_Seq</td><td>55064</td><td>436254</td><td>621272</td></tr><tr><td>Shortest_Seq</td><td>200</td><td>200</td><td>200</td></tr><tr><td>GC_Content</td><td>31.43</td><td>31.42</td><td>31.42</td></tr><tr><td>N50</td><td>2158</td><td>33478</td><td>42519</td></tr><tr><td>N90</td><td>358</td><td>439</td><td>444</td></tr><tr><td>Gap</td><td>0</td><td>24.9</td><td>25.96</td></tr></tbody></table><p>re-scaffolding the output of MEGAHIT small insert size and SOAP-fusion, use ~70X PB data.</p><table><thead><tr><th></th><th>MEGAHIT</th><th>SOAP-fusion</th><th>LINKS</th></tr></thead><tbody><tr><td>Size_includeN</td><td>582099585</td><td>765246417</td><td>798803587</td></tr><tr><td>Size_withoutN</td><td>582099585</td><td>574675978</td><td>574675978</td></tr><tr><td>Seq_Num</td><td>575808</td><td>377325</td><td>359653</td></tr><tr><td>Mean_Size</td><td>1010</td><td>2028</td><td>2221</td></tr><tr><td>Median_Size</td><td>433</td><td>393</td><td>384</td></tr><tr><td>Longest_Seq</td><td>55064</td><td>436254</td><td>732454</td></tr><tr><td>Shortest_Seq</td><td>200</td><td>200</td><td>200</td></tr><tr><td>GC_Content</td><td>31.43</td><td>31.42</td><td>31.42</td></tr><tr><td>N50</td><td>2158</td><td>33478</td><td>68195</td></tr><tr><td>N90</td><td>358</td><td>439</td><td>453</td></tr><tr><td>Gap</td><td>0</td><td>24.9</td><td>28.06</td></tr></tbody></table><p>The last run took about <code>27 hours</code>.</p><p>As can be seen, adding 50X PacBio data did not help a lot. After this, we started to use ‘PacBio-dominant pipelines’ and have tried many different assemblers. But, LINKS is a good scaffolding tool if you assemble the genome with illumina data and want to further scaffold with &lt;20X long-reads.</p><p>This note can serve as a reference in case I will have to use it again.</p><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180307: createt the note.</li><li>20180709: update the ‘background information’.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intro&quot;&gt;&lt;/a&gt; Intro&lt;/h2&gt;
&lt;p&gt;From its &lt;a href=&quot;http://www.bcgsc.ca/platform/bioinfo/software
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="hybrid pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/hybrid-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="scaffolding" scheme="https://yiweiniu.github.io/blog/tags/scaffolding/"/>
    
      <category term="hybrid genome assembly" scheme="https://yiweiniu.github.io/blog/tags/hybrid-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Genome Assembly Pipeline: MEGAHIT &amp; SOAPdenovo-fusion</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-MEGAHIT-SOAPdenovo-fusion/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Genome-assembly-pipeline-MEGAHIT-SOAPdenovo-fusion/</id>
    <published>2018-03-29T15:54:59.000Z</published>
    <updated>2018-07-09T02:32:52.286Z</updated>
    
    <content type="html"><![CDATA[<p><code>MEGAHIT</code> can be used to assemble contigs, and <code>SOAPdenovo-fusion</code> can be used for scaffolding. Since they were developed by the same team, I just put them together.</p><p>This note is more about <code>MEGAHIT</code> and its performance, because you can choose not to use <code>SOAPdevovo-fusion</code>. <code>SOAPdenovo-fusion</code> had comparatively  good performance in my case, so why not give it a try?</p><h2 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h2><p>From <a href="https://github.com/voutcn/megahit" target="_blank" rel="noopener">MEGAHIT git repo</a></p><blockquote><p>MEGAHIT is a single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph (SdBG) to achieve low memory assembly. MEGAHIT can optionally utilize a CUDA-enabled GPU to accelerate its SdBG contstruction. The GPU-accelerated version of MEGAHIT has been tested on NVIDIA GTX680 (4G memory) and Tesla K40c (12G memory) with CUDA 5.5, 6.0 and 6.5. MEGAHIT v1.0 or greater also supports IBM Power PC and has been tested on IBM POWER8.</p></blockquote><p>Its paper</p><blockquote><p>Li D, Liu C-M, Luo R, Sadakane K, Lam T-W. MEGAHIT: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph. Bioinformatics. 2015;31(10):1674–1676. doi:10.1093/bioinformatics/btv033</p></blockquote><p>My feelings:</p><ul><li>very easy to use</li><li>fast enough</li><li>better than SOAPdenovo2</li><li>no need to designate k-mer</li></ul><h2 id="general-usage"><a class="markdownIt-Anchor" href="#general-usage"></a> General usage</h2><p>See <a href="https://github.com/voutcn/megahit/wiki" target="_blank" rel="noopener">MEGAHIT wiki</a> for full docs.</p><ul><li><a href="https://github.com/voutcn/megahit/wiki/Assembly-Tips" target="_blank" rel="noopener">Assembly Tips</a></li><li><a href="https://github.com/voutcn/megahit/wiki/An-example-of-real-assembly" target="_blank" rel="noopener">An example of real assembly</a></li></ul><h2 id="in-practice-megahit"><a class="markdownIt-Anchor" href="#in-practice-megahit"></a> In practice - MEGAHIT</h2><ul><li>An insect</li><li>The species: high heterogeneity, high AT, high repetition.</li><li>Genome size: male 790M, female 830M.</li></ul><h3 id="data"><a class="markdownIt-Anchor" href="#data"></a> data</h3><p>The Illumina data I used:</p><table><thead><tr><th>Source</th><th>Insert size (bp)</th><th>Avg. read size (bp)</th><th>Raw bases (G)</th><th>Raw reads (M)</th><th>Sequencing depth</th></tr></thead><tbody><tr><td>AV1, M</td><td>270</td><td>150</td><td>44.1</td><td>293.6</td><td>55.5</td></tr><tr><td>AV2, F</td><td>500</td><td>150</td><td>24.4</td><td>162.8</td><td>29.4</td></tr><tr><td>AV2, F</td><td>800</td><td>150</td><td>15.8</td><td>105.4</td><td>19.0</td></tr><tr><td>AV2, F</td><td>3k</td><td>114</td><td>10.4</td><td>91.8</td><td>12.5</td></tr><tr><td>AV2, F</td><td>5k</td><td>150</td><td>29.8</td><td>198.7</td><td>35.9</td></tr><tr><td>AV2, F</td><td>5k</td><td>114</td><td>11.5</td><td>101.2</td><td>13.8</td></tr><tr><td>AV2, F</td><td>10k</td><td>150</td><td>17.5</td><td>116.8</td><td>21.1</td></tr><tr><td>Total</td><td>-</td><td>-</td><td>153.5</td><td>1070.3</td><td>187.3</td></tr></tbody></table><p>I’ve tried <code>MEGAHIT</code> with raw/trimmed data, with/without ins_270 library, with all (PE and MPE)/PE libraries, and here are the scripts I used and stats received. The reason why I tried with/without ins_270 library was because it’s from a male but other libraries were from females.</p><p>The reason why I tried with all (PE and MPE)/PE libraries was because I ran <code>MEGAHIT</code> with all data I had, and then the author recommended only to use PE libraries. See the discussions with the authors.</p><ul><li><a href="https://github.com/aquaskyline/SOAPdenovo2/issues/27" target="_blank" rel="noopener">Segmentation fault with scaff step when use different MEGAHIT’s output</a></li><li><a href="https://github.com/aquaskyline/SOAPdenovo2/issues/26" target="_blank" rel="noopener">How to use SOAPdenovo-fusion scaffold the output of MEGAHIT?</a></li></ul><h3 id="run1-all-raw-data"><a class="markdownIt-Anchor" href="#run1-all-raw-data"></a> run1, all raw data</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/software/megahit_v1.1.1_LINUX_CPUONLY_x86_64-bin/megahit -t 20 --no-mercy -1 /DenovoSeq/raw_data/270B_R1.fastq,/DenovoSeq/raw_data/500B_R1.fastq,/DenovoSeq/raw_data/800B_R1.fastq,/DenovoSeq/raw_data/3k_1_R1.fastq,/DenovoSeq/raw_data/5k-1_R1.fastq,/DenovoSeq/raw_data/5k-2_R1.fastq,/DenovoSeq/raw_data/10k_R1.fastq -2 /DenovoSeq/raw_data/270B_R2.fastq,/DenovoSeq/raw_data/500B_R2.fastq,/DenovoSeq/raw_data/800B_R2.fastq,/DenovoSeq/raw_data/3k_1_R2.fastq,/DenovoSeq/raw_data/5k-1_R2.fastq,/DenovoSeq/raw_data/5k-2_R2.fastq,/DenovoSeq/raw_data/10k_R2.fastq -o megahit_out1</span><br></pre></td></tr></table></figure><p>and the stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 894816039</span><br><span class="line">Size_withoutN: 894816039</span><br><span class="line">Seq_Num: 1292253</span><br><span class="line">Mean_Size: 692</span><br><span class="line">Median_Size: 418</span><br><span class="line">Longest_Seq: 42542</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.9</span><br><span class="line">N50: 834</span><br><span class="line">N90: 333</span><br></pre></td></tr></table></figure><h3 id="run2-all-trimmed-data-by-trimmomatic"><a class="markdownIt-Anchor" href="#run2-all-trimmed-data-by-trimmomatic"></a> run2, all trimmed data (by Trimmomatic)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/software/megahit_v1.1.1_LINUX_CPUONLY_x86_64-bin/megahit -t 38 --no-mercy -1 /DenovoSeq/trimmomatic/270B_R_1P.fastq,/DenovoSeq/trimmomatic/500B_R_1P.fastq,/DenovoSeq/trimmomatic/800B_R_1P.fastq,/DenovoSeq/trimmomatic/3k_1_R_1P.fastq,/DenovoSeq/trimmomatic/5k-1_R_1P.fastq,/DenovoSeq/trimmomatic/5k-2_R_1P.fastq,/DenovoSeq/trimmomatic/10k_R_1P.fastq -2 /DenovoSeq/trimmomatic/270B_R_2P.fastq,/DenovoSeq/trimmomatic/500B_R_2P.fastq,/DenovoSeq/trimmomatic/800B_R_2P.fastq,/DenovoSeq/trimmomatic/3k_1_R_2P.fastq,/DenovoSeq/trimmomatic/5k-1_R_2P.fastq,/DenovoSeq/trimmomatic/5k-2_R_2P.fastq,/DenovoSeq/trimmomatic/10k_R_2P.fastq</span><br></pre></td></tr></table></figure><p>and the stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 767662393</span><br><span class="line">Size_withoutN: 767662393</span><br><span class="line">Seq_Num: 989298</span><br><span class="line">Mean_Size: 775</span><br><span class="line">Median_Size: 428</span><br><span class="line">Longest_Seq: 80889</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.64</span><br><span class="line">N50: 1115</span><br><span class="line">N90: 340</span><br></pre></td></tr></table></figure><h3 id="run3-all-raw-data-without-ins_270"><a class="markdownIt-Anchor" href="#run3-all-raw-data-without-ins_270"></a> run3, all raw data, without ins_270</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/software/megahit_v1.1.1_LINUX_CPUONLY_x86_64-bin/megahit -t 20 --no-mercy -1 /DenovoSeq/raw_data/500B_R1.fastq,/DenovoSeq/raw_data/800B_R1.fastq,/DenovoSeq/raw_data/3k_1_R1.fastq,/DenovoSeq/raw_data/5k-1_R1.fastq,/DenovoSeq/raw_data/5k-2_R1.fastq,/DenovoSeq/raw_data/10k_R1.fastq -2 /DenovoSeq/raw_data/500B_R2.fastq,/DenovoSeq/raw_data/800B_R2.fastq,/DenovoSeq/raw_data/3k_1_R2.fastq,/DenovoSeq/raw_data/5k-1_R2.fastq,/DenovoSeq/raw_data/5k-2_R2.fastq,/DenovoSeq/raw_data/10k_R2.fastq -o megahit_out.no2701</span><br></pre></td></tr></table></figure><p>and the stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 800012379</span><br><span class="line">Size_withoutN: 800012379</span><br><span class="line">Seq_Num: 1045419</span><br><span class="line">Mean_Size: 765</span><br><span class="line">Median_Size: 422</span><br><span class="line">Longest_Seq: 52915</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.64</span><br><span class="line">N50: 1074</span><br><span class="line">N90: 340</span><br></pre></td></tr></table></figure><h3 id="run4-all-trimmed-data-without-ins_270"><a class="markdownIt-Anchor" href="#run4-all-trimmed-data-without-ins_270"></a> run4, all trimmed data, without ins_270</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 679262960</span><br><span class="line">Size_withoutN: 679262960</span><br><span class="line">Seq_Num: 782765</span><br><span class="line">Mean_Size: 867</span><br><span class="line">Median_Size: 429</span><br><span class="line">Longest_Seq: 61533</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 32.31</span><br><span class="line">N50: 1529</span><br><span class="line">N90: 348</span><br></pre></td></tr></table></figure><h3 id="run5-use-only-with-all-pe-libraries"><a class="markdownIt-Anchor" href="#run5-use-only-with-all-pe-libraries"></a> run5, use only with all PE libraries</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/software/megahit_v1.1.1_LINUX_CPUONLY_x86_64-bin/megahit -t 40 --no-mercy -1 /DenovoSeq/trimmomatic/270B_R_1P.fastq,/DenovoSeq/trimmomatic/500B_R_1P.fastq,/DenovoSeq/trimmomatic/800B_R_1P.fastq -2 /DenovoSeq/trimmomatic/270B_R_2P.fastq,/DenovoSeq/trimmomatic/500B_R_2P.fastq,/DenovoSeq/trimmomatic/800B_R_2P.fastq -o small_insert</span><br></pre></td></tr></table></figure><p>and the stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 672319141</span><br><span class="line">Size_withoutN: 672319141</span><br><span class="line">Seq_Num: 777747</span><br><span class="line">Mean_Size: 864</span><br><span class="line">Median_Size: 428</span><br><span class="line">Longest_Seq: 71939</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.93</span><br><span class="line">N50: 1505</span><br><span class="line">N90: 346</span><br></pre></td></tr></table></figure><h3 id="run6-use-only-with-all-pe-libraries-but-ins_270"><a class="markdownIt-Anchor" href="#run6-use-only-with-all-pe-libraries-but-ins_270"></a> run6, use only with all PE libraries but ins_270</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/software/megahit_v1.1.1_LINUX_CPUONLY_x86_64-bin/megahit -t 40 --no-mercy -1 /DenovoSeq/trimmomatic/500B_R_1P.fastq,/DenovoSeq/trimmomatic/800B_R_1P.fastq -2 /DenovoSeq/trimmomatic/500B_R_2P.fastq,/DenovoSeq/trimmomatic/800B_R_2P.fastq -o small_insert.no270</span><br></pre></td></tr></table></figure><p>and the stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 582099585</span><br><span class="line">Size_withoutN: 582099585</span><br><span class="line">Seq_Num: 575808</span><br><span class="line">Mean_Size: 1010</span><br><span class="line">Median_Size: 433</span><br><span class="line">Longest_Seq: 55064</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.43</span><br><span class="line">N50: 2158</span><br><span class="line">N90: 358</span><br></pre></td></tr></table></figure><h3 id="conclusions"><a class="markdownIt-Anchor" href="#conclusions"></a> conclusions</h3><p>Though not been fully tested, I can draw some simple conclusions</p><ul><li>trimmed data generates better results than raw data. (but the way trimming data will influce the results)</li><li>using only PE libraries generates better results than using all libraries (PE, MPE)</li></ul><h2 id="in-practice-soapdenovo-fusion"><a class="markdownIt-Anchor" href="#in-practice-soapdenovo-fusion"></a> In practice - SOAPdenovo-fusion</h2><p>I’ve asked the author that <a href="https://github.com/aquaskyline/SOAPdenovo2/issues/26" target="_blank" rel="noopener">How to use SOAPdenovo-fusion scaffold the output of MEGAHIT?</a>.</p><p>I first tried <code>SOAPdenovo-fusion</code> with/without ins_270 library, and found not using ins_270 library got better results (tested with <code>k-mer=63</code>). Then I tested different kmer: <code>37, 41, 43, 45, 55, 61, 63, 71, 75</code> and found that <code>kmer=41</code> got best results. I’ve also tried with/without <code>-F</code> parameter, but I didn’t understand the diference completely.</p><p>I just put the config, scripts and stats here when using <code>kmer = 41</code>.</p><p>config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#maximal read length</span><br><span class="line">max_rd_len=151</span><br><span class="line">[LIB]</span><br><span class="line">avg_ins=500</span><br><span class="line">reverse_seq=0</span><br><span class="line">asm_flags=2</span><br><span class="line">#in which order the reads are used while scaffolding</span><br><span class="line">rank=1</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 3 for short insert size)</span><br><span class="line">pair_num_cutoff=3</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 32 for short insert size)</span><br><span class="line">map_len=32</span><br><span class="line">#a pair of fastq file, read 1 file should always be followed by read 2 file</span><br><span class="line">q1=/DenovoSeq/trimmomatic/500B_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/500B_R_2P.fastq</span><br><span class="line">[LIB]</span><br><span class="line">#average insert size</span><br><span class="line">avg_ins=800</span><br><span class="line">#if sequence needs to be reversed</span><br><span class="line">reverse_seq=0</span><br><span class="line">#in which part(s) the reads are used</span><br><span class="line">asm_flags=2</span><br><span class="line">#in which order the reads are used while scaffolding</span><br><span class="line">rank=3</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 3 for short insert size)</span><br><span class="line">pair_num_cutoff=3</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 32 for short insert size)</span><br><span class="line">map_len=32</span><br><span class="line">#a pair of fastq file, read 1 file should always be followed by read 2 file</span><br><span class="line">q1=/DenovoSeq/trimmomatic/800B_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/800B_R_2P.fastq</span><br><span class="line">[LIB]</span><br><span class="line">avg_ins=3000</span><br><span class="line">reverse_seq=1</span><br><span class="line">asm_flags=2</span><br><span class="line">rank=3</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 5 for large insert size)</span><br><span class="line">pair_num_cutoff=4</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 35 for large insert size)</span><br><span class="line">map_len=35</span><br><span class="line">q1=/DenovoSeq/trimmomatic/3k_1_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/3k_1_R_2P.fastq</span><br><span class="line">[LIB]</span><br><span class="line">avg_ins=5000</span><br><span class="line">reverse_seq=1</span><br><span class="line">asm_flags=2</span><br><span class="line">rank=4</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 5 for large insert size)</span><br><span class="line">pair_num_cutoff=5</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 35 for large insert size)</span><br><span class="line">map_len=35</span><br><span class="line">q1=/DenovoSeq/trimmomatic/5k-1_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/5k-1_R_2P.fastq</span><br><span class="line">[LIB]</span><br><span class="line">avg_ins=5000</span><br><span class="line">reverse_seq=1</span><br><span class="line">asm_flags=2</span><br><span class="line">rank=4</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 5 for large insert size)</span><br><span class="line">pair_num_cutoff=5</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 35 for large insert size)</span><br><span class="line">map_len=35</span><br><span class="line">q1=/DenovoSeq/trimmomatic/5k-2_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/5k-2_R_2P.fastq</span><br><span class="line">[LIB]</span><br><span class="line">avg_ins=10000</span><br><span class="line">reverse_seq=1</span><br><span class="line">asm_flags=2</span><br><span class="line">rank=5</span><br><span class="line"># cutoff of pair number for a reliable connection (at least 5 for large insert size)</span><br><span class="line">pair_num_cutoff=5</span><br><span class="line">#minimum aligned length to contigs for a reliable read location (at least 35 for large insert size)</span><br><span class="line">map_len=35</span><br><span class="line">q1=/DenovoSeq/trimmomatic/10k_R_1P.fastq</span><br><span class="line">q2=/DenovoSeq/trimmomatic/10k_R_2P.fastq</span><br></pre></td></tr></table></figure><h3 id="run1-without-f"><a class="markdownIt-Anchor" href="#run1-without-f"></a> run1, without <code>-F</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-fusion -D -s config -p 40 -K 41 -g k41 -c ../final.contigs.fa</span><br><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-127mer map -s config -p 40 -g k41</span><br><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-127mer scaff -p 40 -g k41</span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 765246417</span><br><span class="line">Size_withoutN: 574675978</span><br><span class="line">Seq_Num: 377325</span><br><span class="line">Mean_Size: 2028</span><br><span class="line">Median_Size: 393</span><br><span class="line">Longest_Seq: 436254</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.42</span><br><span class="line">N50: 33478</span><br><span class="line">N90: 439</span><br><span class="line">Gap: 24.9</span><br></pre></td></tr></table></figure><h3 id="run2-with-f"><a class="markdownIt-Anchor" href="#run2-with-f"></a> run2, with <code>-F</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-fusion -D -s config -p 40 -K 41 -g k41_1 -c ../final.contigs.fa</span><br><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-127mer map -s config -p 40 -g k41_1</span><br><span class="line">/software/SOAPdenovo2-r241/SOAPdenovo-127mer scaff -p 40 -g k41_1 -F</span><br></pre></td></tr></table></figure><p>stats:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Size_includeN: 764869730</span><br><span class="line">Size_withoutN: 579451220</span><br><span class="line">Seq_Num: 377325</span><br><span class="line">Mean_Size: 2027</span><br><span class="line">Median_Size: 393</span><br><span class="line">Longest_Seq: 436104</span><br><span class="line">Shortest_Seq: 200</span><br><span class="line">GC_Content: 31.45</span><br><span class="line">N50: 33463</span><br><span class="line">N90: 439</span><br><span class="line">Gap: 24.24</span><br></pre></td></tr></table></figure><p>It seems that <code>-F</code> parameter didn’t help much (the %gap).</p><p>This note can be a reference in case I will have to use it again.</p><h2 id="change-log"><a class="markdownIt-Anchor" href="#change-log"></a> Change log</h2><ul><li>20180308: create the note.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;MEGAHIT&lt;/code&gt; can be used to assemble contigs, and &lt;code&gt;SOAPdenovo-fusion&lt;/code&gt; can be used for scaffolding. Since they were dev
      
    
    </summary>
    
      <category term="genome assembly" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/"/>
    
      <category term="NGS pipeline" scheme="https://yiweiniu.github.io/blog/categories/genome-assembly/NGS-pipeline/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="genome assembly pipeline" scheme="https://yiweiniu.github.io/blog/tags/genome-assembly-pipeline/"/>
    
      <category term="NGS genome assembly" scheme="https://yiweiniu.github.io/blog/tags/NGS-genome-assembly/"/>
    
  </entry>
  
  <entry>
    <title>Upstream Analysis of TCR/BCR Repertoires in RNA-seq Data</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Upstream-analysis-of-TCR-BCR-repertoires-in-RNA-seq-data/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Upstream-analysis-of-TCR-BCR-repertoires-in-RNA-seq-data/</id>
    <published>2018-03-29T15:25:12.000Z</published>
    <updated>2018-04-23T10:27:55.758Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Bacground</strong>: because the transcriptome data I recently worked with is highly related with immune. So I want to dig out something about immune.</p><p>When I viewed <a href="https://github.com/crazyhottommy/RNA-seq-analysis#immnune-related" target="_blank" rel="noopener">RNAseq analysis notes from Tommy Tang</a>, I found <a href="https://github.com/mandricigor/imrep/wiki" target="_blank" rel="noopener">ImReP</a>. It’s a tool designed for profiling TCR/BCR repertoire in regular RNA-seq data. That was something I nerver heard before.</p><p>Then I found more tools through the paper of <code>ImRep</code> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. They are:</p><ul><li><code>MiXCR</code> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li><li><code>TRUST</code> <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li><li><code>TraCeR</code> <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></li><li><code>V'DJer</code> <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></li><li><code>IgBlast-basedpipeline</code> <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></li><li><code>iSSAKE</code> <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></li></ul><p>And the paper of <code>ImRep</code> introduce them as follows:</p><blockquote><p>TRUST and TraCeR do not support the analysis of BCR sequences and were excluded from the comparison based for the IGH data. iSSAKE is no longer supported and was not recommended for use. Unfortunately, we obtained empty output after running V’DJer, and increasing coverage in the simulated data did not solve the problem. Alternative approaches, such as IMSEQ, cannot be applied directly to RNA-Seq reads because they were originally designed for targeted sequencing of B or T cell receptor loci. Thus, to independently assess and compare accuracy with ImReP, we only ran IMSEQ with the simulated reads derived from BCR or TCR transcripts (Figure S1). Scripts and commands to run all tools used in this study are provided in the Extended Experimental Procedures and are available online at <a href="https://github.com/smangul1/Profiling-adaptive-immune-repertoires-across-multiple-humantissues-by-RNA-Sequencing" target="_blank" rel="noopener">https://github.com/smangul1/Profiling-adaptive-immune-repertoires-across-multiple-humantissues-by-RNA-Sequencing</a>. ImReP consistently outperformed existing methods on IGH data in both recall and precision rates for the majority of simulated parameters. ImReP and MiXCR show similar performance on TCRA data and outperform other methods. Notably, ImReP was the only method with acceptable performance on IGH data at 50bp read length, reconstructing with a higher precision rate significantly more CDR3 clonotypes than other methods.</p></blockquote><p>Because I only have regular RNA-seq data (non-enriched and/or randomly-shred ©DNA libraries), <code>ImRep</code> and <code>MiXCR</code> were the only two software I want to try.</p><h2 id="mixcr"><a class="markdownIt-Anchor" href="#mixcr"></a> MiXCR</h2><h3 id="intro"><a class="markdownIt-Anchor" href="#intro"></a> Intro</h3><blockquote><p>MiXCR is a universal framework that processes big immunome data from raw sequences to quantitated clonotypes. MiXCR efficiently handles paired- and single-end reads, considers sequence quality, corrects PCR errors and identifies germline hypermutations. The software supports both partial- and full-length profiling and employs all available RNA or DNA information, including sequences upstream of V and downstream of J gene segments. (<a href="https://mixcr.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://mixcr.readthedocs.io/en/latest/</a>)</p></blockquote><p><code>MiXCR</code> has very nice docs: <a href="https://mixcr.readthedocs.io/en/latest" target="_blank" rel="noopener">https://mixcr.readthedocs.io/en/latest</a>. See them for full instructions.</p><blockquote><p>Typical MiXCR workflow consists of three main processing steps:</p><ul><li>align: align sequencing reads to reference V, D, J and C genes of T- or B- cell receptors</li><li>assemble: assemble clonotypes using alignments obtained on previous step (in order to extract specific gene regions e.g. CDR3)</li><li>export: export alignment (<code>exportAlignments</code>) or clones (<code>exportClones</code>) to human-readable text file</li></ul></blockquote><img src="/blog/2018/03/Upstream-analysis-of-TCR-BCR-repertoires-in-RNA-seq-data/mixcr_work_1521857914_11153.png" title="mixcr_workflow"><p><strong>Enriched RepSeq Data</strong></p><blockquote><p>Here is a very simple usage example that will extract repertoire data (in the form of clonotypes list) from raw sequencing data of enriched RepSeq library:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mixcr align -r log.txt input_R1.fastq.gz input_R2.fastq.gz alignments.vdjca</span><br><span class="line">mixcr assemble -r log.txt alignments.vdjca clones.clns</span><br><span class="line">mixcr exportClones clones.clns clones.txt</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>this will produce a tab-delimited list of clones (<code>clones.txt</code>) assembled by their CDR3 sequences with extensive information on their abundances, V, D and J genes, mutations in germline regions, topology of VDJ junction etc.</p></blockquote><p><strong>Repertoire extraction from RNA-Seq</strong></p><blockquote><p>MiXCR is equally effective in extraction of repertoire information from non-enriched data, like RNA-Seq or WGS. This example illustrates usage for RNA-Seq:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixcr align -p rna-seq -r log.txt input_R1.fastq.gz input_R2.fastq.gz alignments.vdjca</span><br><span class="line">mixcr assemblePartial alignments.vdjca alignment_contigs.vdjca</span><br><span class="line">mixcr assemble -r log.txt alignment_contigs.vdjca clones.clns</span><br><span class="line">mixcr exportClones clones.clns clones.txt</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h3><ul><li>download the latest stable <code>MiXCR</code> build from <a href="https://github.com/milaboratory/mixcr/releases/latest" target="_blank" rel="noopener">release page</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unzip mixcr-2.1.9.zip &amp;&amp; cd mixcr-2.1.9</span><br><span class="line">$ $ ./mixcr -h</span><br><span class="line">Usage: mixcr [options] [command] [command options]</span><br><span class="line">  Options:</span><br><span class="line">    -h, --help</span><br><span class="line">       Displays this help message.</span><br></pre></td></tr></table></figure><h3 id="run"><a class="markdownIt-Anchor" href="#run"></a> Run</h3><p>Pipelines from <a href="https://github.com/milaboratory/mixcr" target="_blank" rel="noopener">https://github.com/milaboratory/mixcr</a> and <a href="http://mixcr.readthedocs.io/en/latest/rnaseq.html" target="_blank" rel="noopener">http://mixcr.readthedocs.io/en/latest/rnaseq.html</a> are not exactly the same. I used the latter.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">path2MiXCR=$TOOLDIR/mixcr-2.1.9/mixcr</span><br><span class="line">MiXCR_output=$&#123;WORKDIR&#125;/MiXCR/human/$&#123;sample&#125;</span><br><span class="line"></span><br><span class="line">PPN=20</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR align -t <span class="variable">$PPN</span> -r <span class="variable">$MiXCR_output</span>/log.txt -p rna-seq -s hsa -OallowPartialAlignments=<span class="literal">true</span> <span class="variable">$WORKDIR</span>/clean_fastq/human/<span class="variable">$&#123;sample&#125;</span>_R1.fastq.gz <span class="variable">$WORKDIR</span>/clean_fastq/human/<span class="variable">$&#123;sample&#125;</span>_R2.fastq.gz <span class="variable">$MiXCR_output</span>/alignments.vdjca</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR assemblePartial -r <span class="variable">$MiXCR_output</span>/log.txt <span class="variable">$MiXCR_output</span>/alignments.vdjca <span class="variable">$MiXCR_output</span>/alignments_rescued_1.vdjca</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR assemblePartial -r <span class="variable">$MiXCR_output</span>/log.txt <span class="variable">$MiXCR_output</span>/alignments_rescued_1.vdjca <span class="variable">$MiXCR_output</span>/alignments_rescued_2.vdjca</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR extendAlignments -r <span class="variable">$MiXCR_output</span>/log.txt <span class="variable">$MiXCR_output</span>/alignments_rescued_2.vdjca <span class="variable">$MiXCR_output</span>/alignments_rescued_2_extended.vdjca</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR assemble -r <span class="variable">$MiXCR_output</span>/log.txt -t <span class="variable">$PPN</span> <span class="variable">$MiXCR_output</span>/alignments_rescued_2_extended.vdjca <span class="variable">$MiXCR_output</span>/clones.clns</span></span><br><span class="line"><span class="meta">$</span><span class="bash">path2MiXCR exportClones <span class="variable">$MiXCR_output</span>/clones.clns <span class="variable">$MiXCR_output</span>/clones.txt</span></span><br></pre></td></tr></table></figure><p>And the output looks like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> head -n 3 clones.txt</span></span><br><span class="line">cloneIdcloneCountcloneFractionclonalSequenceclonalSequenceQualityallVHitsWithScoreallDHitsWithScoreallJHitsWithScoreallCHitsWithScoreallVAlignmentsallDAlignmentsallJAlignmentsallCAlignmentsnSeqFR1minQualFR1nSeqCDR1minQualCDR1nSeqFR2minQualFR2nSeqCDR2minQualCDR2nSeqFR3minQualFR3  nSeqCDR3minQualCDR3nSeqFR4minQualFR4aaSeqFR1aaSeqCDR1aaSeqFR2aaSeqCDR2aaSeqFR3aaSeqCDR3aaSeqFR4refPoints</span><br><span class="line">01300.008044056679660912TGCTGCTCATATGCAGGCAGCTACACTTGGGTGTTCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFIGLV2-11*00(498.3)IGLJ3*00(155.3)IGLC2*00(628.6),IGLC3*00(628.3),IGLC7*00(558)324|352|374|0|28||140.020|30|58|26|36||50.0;;TGCTGCTCATATGCAGGCAGCTACACTTGGGTGTTC37CCSYAGSYTWVF:::::::::0:-2:28:::::26:0:36:::</span><br><span class="line">1620.003836396262607512TGCAGCTCATATACAAGCAGCAGCACTTTCGTCTTCFFFFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNIGLV2-14*00(599.8)IGLJ1*00(118.3)IGLC1*00(446.2)324|355|374|0|31|SC351T|139.024|30|58|30|36||30.0TGCAGCTCATATACAAGCAGCAGCACTTTCGTCTTC37CSSYTSSSTFVF:::::::::0:1:31:::::30:-4:36:::</span><br></pre></td></tr></table></figure><p>No ideas what to do next… I will try some post-analysis tools to explore the clonetypes.</p><h2 id="imrep"><a class="markdownIt-Anchor" href="#imrep"></a> ImRep</h2><h3 id="intro-2"><a class="markdownIt-Anchor" href="#intro-2"></a> Intro</h3><blockquote><p>ImReP is a method for rapid and accurate profiling of the adaptive immune repertoires from regular RNA-Seq data.</p></blockquote><img src="/blog/2018/03/Upstream-analysis-of-TCR-BCR-repertoires-in-RNA-seq-data/imrep_work_1521858447_27255.png" title="imrep_workflow"><h3 id="install-2"><a class="markdownIt-Anchor" href="#install-2"></a> Install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mandricigor/imrep.git &amp;&amp; cd imrep</span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> python imrep.py -h</span></span><br><span class="line"></span><br><span class="line">usage: python2 imrep.py [-h] [--fastq] [--bam] [--chrFormat2] [--hg38]</span><br><span class="line">                        [-a ALLREADS] [--digGold] [-s SPECIES] [-o OVERLAPLEN]</span><br><span class="line">                        [--noOverlapStep] [--extendedOutput] [-c CHAINS]</span><br><span class="line">                        [--noCast] [-f FILTERTHRESHOLD]</span><br><span class="line">                        [--minOverlap1 MINOVERLAP1]</span><br><span class="line">                        [--minOverlap2 MINOVERLAP2] [--misMatch1 MISMATCH1]</span><br><span class="line">                        [--misMatch2 MISMATCH2]</span><br><span class="line">                        reads_file output_clones</span><br></pre></td></tr></table></figure><h3 id="run-2"><a class="markdownIt-Anchor" href="#run-2"></a> Run</h3><p>Then I was caught in an embarrassing situation.</p><p><code>ImRep</code> now is designed to handle two cases:</p><ul><li>When you have saved <strong>mapped and unmapped</strong> reads in one <code>BAM</code> file, <code>ImRep</code> can accept one <code>BAM</code> as input.</li></ul><blockquote><p>Given the bam file with mapped and unmapped reads, you can run ImReP using this command.</p><blockquote><p><code>python imrep.py --bam example/toyExample.bam example/toyExample.cdr3</code></p></blockquote></blockquote><ul><li>When you forgot to save unmapped reads, <code>ImRep</code> can accept <code>BAM</code> file with mapped reads and all raw <code>FASTQ</code> files as input.</li></ul><blockquote><p>Forgot to save unmapped reads, we got you covered. Use <code>--digGold</code> and <code>-a</code> options. For example:</p><blockquote><p><code>python imrep.py --digGold -a example/toyExample_allReads.fastq example/toyExample_onlyMapped.bam example/toyExample.cdr3</code></p></blockquote></blockquote><p>I’ve aligned the <code>FASTQ</code> files to genome with <code>STAR</code>, and saved unmapped reads in <code>FASTQ</code> format (using <code>--outReadsUnmapped Fastx</code>).</p><p>And the author said:</p><blockquote><p>Some mapping tools produce partially-mapped reads (i.e. STAR). In case read is mapped to BCR or TCR genes and is partially mapped to V or J gene, such read may be used to assemble full-length CDR3 sequences. Considering only unmapped reads will result in missing such reads.</p></blockquote><p>So the first case doesn’t suit me, I have to follow the second.</p><p>And the questions are:</p><ul><li>Can I feed <code>ImRep</code> with the <code>BAM</code> and unmapped reads? not all raw reads.</li><li>It seems <code>ImRep</code> only accepts one single <code>FATSQ</code> as input, should I cat two <code>FASTQ</code> of pair-end data? Or it just works for single-end data?</li></ul><p>I reported a issue to the author: <a href="https://github.com/mandricigor/imrep/issues/32" target="_blank" rel="noopener">unmapped reads in fastq/fasta format and pair-end data</a>.</p><p>And he suggested:</p><blockquote><p>Please merge PE into one file. Also to use --digGold, you need to provide original reads, not the unmapped reads. Please let me know how it goes. If this doesn’t’ work for you, we can implement the option to allow to supply bam with mapped and FASTQ with unmapped (this is on our TODO list anyway). Thanks, Serghei</p></blockquote><p>I should run <code>STAR</code> with <code>--outSamUnmapped Within</code> option hereafter. And I’ll not plan to re-align the reads for now.</p><p>Moreover, using <code>MiXCR</code>, I can use post-analysis tools such as <code>VDJtools</code> easily.</p><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180324: create the note.</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Mangul S, Mandric I, Yang HT, Strauli N, Montoya D, Rotman J, Wey WVD, Ronas JR, Statz B, Zelikovsky A, et al. Profiling adaptive immune repertoires across multiple human tissues by RNA Sequencing. bioRxiv. 2017 Mar 25:089235. doi:10.1101/089235 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Bolotin DA, Poslavsky S, Mitrophanov I, Shugay M, Mamedov IZ, Putintseva EV, Chudakov DM. MiXCR: software for comprehensive adaptive immunity profiling. Nature Methods. 2015;12(5):380–381. doi:10.1038/nmeth.3364 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Li B, Li T, Wang B, Dou R, Pignon J-C, Choueiri TK, Signoretti S, Liu JS, Liu XS. Ultrasensitive detection of TCR hypervariable region in solid-tissue RNA-seq data. bioRxiv. 2016 Sep 5:073395. doi:10.1101/073395 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Stubbington MJT, Lönnberg T, Proserpio V, Clare S, Speak AO, Dougan G, Teichmann SA. T cell fate and clonality inference from single-cell transcriptomes. Nature Methods. 2016;13(4):329–332. doi:10.1038/nmeth.3800 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>Mose LE, Selitsky SR, Bixby LM, Marron DL, Iglesia MD, Serody JS, Perou CM, Vincent BG, Parker JS. Assembly-based inference of B-cell receptor repertoires from short read RNA sequencing data with V’DJer. Bioinformatics. 2016;32(24):3729–3734. doi:10.1093/bioinformatics/btw526 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>Strauli NB, Hernandez RD. Statistical inference of a convergent antibody repertoire response to influenza vaccine. Genome Medicine. 2016;8:60. doi:10.1186/s13073-016-0314-z <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p>Warren RL, Nelson BH, Holt RA. Profiling model T-cell metagenomes with short reads. Bioinformatics (Oxford, England). 2009;25(4):458–464. doi:10.1093/bioinformatics/btp010 <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Bacground&lt;/strong&gt;: because the transcriptome data I recently worked with is highly related with immune. So I want to dig out som
      
    
    </summary>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/"/>
    
      <category term="immune" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/immune/"/>
    
      <category term="TCR/BCR" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/immune/TCR-BCR/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/tags/RNA-seq/"/>
    
      <category term="immune" scheme="https://yiweiniu.github.io/blog/tags/immune/"/>
    
      <category term="TCR/BCR" scheme="https://yiweiniu.github.io/blog/tags/TCR-BCR/"/>
    
  </entry>
  
  <entry>
    <title>Tools for Analysis TEs in RNA-seq Data</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/</id>
    <published>2018-03-21T12:42:15.000Z</published>
    <updated>2018-06-30T07:08:15.367Z</updated>
    
    <content type="html"><![CDATA[<p>I observed large fraction reads from intronic regions in my total RNA-seq data. Considering that many <a href="https://en.wikipedia.org/wiki/Alu_element" target="_blank" rel="noopener">Alu elements</a> are located in introns, I want to check the <a href="https://en.wikipedia.org/wiki/Transposable_element" target="_blank" rel="noopener">TEs</a> in RNA-seq data.</p><p>I will first go through tools avaiable for analysis TEs in RNA-seq data, then use two of them to quantify TEs in test or real data.</p><h2 id="tools-avaiable"><a class="markdownIt-Anchor" href="#tools-avaiable"></a> Tools avaiable</h2><p>Tools for the analysis of TEs (or REs) in RNA-seq data can be divided into three categories based on their function/purpose:</p><ol><li>Quantification of TEs (also compare the expression of TEs from different conditions)<ul><li>RepEnrich, TEtranscripts, SalmonTE</li></ul></li><li>Analyze TE involved transcript (find them, quantification, compare)<ul><li>LIONS, CLIFinder</li></ul></li><li>others<ul><li>IM-Fusion</li></ul></li></ol><p>I will introduce them by the order of their publication dates.</p><h3 id="repenrich"><a class="markdownIt-Anchor" href="#repenrich"></a> <a href="https://github.com/nskvir/RepEnrich" target="_blank" rel="noopener">RepEnrich</a></h3><blockquote><p>RepEnrich is a method to estimate repetitive element enrichment using high-throughput sequencing data.</p></blockquote><p>Its paper:</p><blockquote><p>Criscione SW, Zhang Y, Thompson W, Sedivy JM, Neretti N. Transcriptional landscape of repetitive elements in normal and cancer human cells. BMC Genomics. 2014;15:583. doi:10.1186/1471-2164-15-583</p></blockquote><p><code>RepEnrich</code> uses the repeatmasker files which can be downloaded from <a href="http://www.repeatmasker.org/genomicDatasets/RMGenomicDatasets.html" target="_blank" rel="noopener">repeatmasker.org</a> or  <a href="http://genome.ucsc.edu/cgi-bin/hgTables" target="_blank" rel="noopener">UCSC genome table browser</a>. It first sets up the annotations, then maps the <code>FASTQ</code> files to genome using <code>Bowtie1</code>, and finally computes count of TEs. Examples in the docs are very detailed and also provide <code>R</code> codes of using <code>edgeR</code> for differential enrichment analysis.</p><blockquote><p><code>RepEnrich</code> read mapping strategy. Reads are mapped to the genome using the Bowtie1 aligner. Reads mapping uniquely to the genome are assigned to subfamilies of repetitive elements based on their degree of overlap to RepeatMasker annotated genomic instances of each repetitive element subfamily. Reads mapping to multiple locations are separately mapped to repetitive element assemblies – referred to as repetitive element psuedogenomes – built from RepeatMasker annotated genomic instances of repetitive element subfamilies.</p></blockquote><img src="/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/repenrich__1521546095_26949.jpg" title="RepEnrich_read_mapping_strategy"><p>In the <code>RepEnrich</code> paper, the authors also analyzed data from ChIP-seq, they found:</p><blockquote><p>We show that many of the Long Terminal Repeat retrotransposons in humans are transcriptionally active in a cell line-specific manner. Cancer cell lines display increased RNA Polymerase II binding to retrotransposons than cell lines derived from normal tissue. Consistent with increased transcriptional activity of retrotransposons in cancer cells we found significantly higher levels of L1 retrotransposon RNA expression in prostate tumors compared to normal-matched controls.</p></blockquote><h3 id="tetoolkittetranscripts"><a class="markdownIt-Anchor" href="#tetoolkittetranscripts"></a> <a href="https://github.com/mhammell-laboratory/tetoolkit" target="_blank" rel="noopener">TEToolkit/TEtranscripts</a></h3><blockquote><p>TEToolkit is a software package that utilizes both unambiguously (uniquely) and ambiguously (multi-) mapped reads to perform differential enrichment analyses from high throughput sequencing experiments. Currently, most expression analysis software packates are not optimized for handling the complexities involved in quantifying highly repetitive regions of the genome, especially transposable elements (TE), from short sequencing reads. Although transposon elements make up between 20 to 80% of many eukaryotic genomes and contribute significantly to the cellular transcriptome output, the difficulty in quantifying their abundances from high throughput sequencing experiments has led them to be largely ignored in most studies. The TEToolkit provides a noticeable improvement in the recovery of TE transcripts from RNA-Seq experiments and identification of peaks associated with repetitive regions of the genome.</p></blockquote><p>Its paper:</p><blockquote><p>Jin Y, Tam OH, Paniagua E, Hammell M. TEtranscripts: a package for including transposable elements in differential expression analysis of RNA-seq datasets. Bioinformatics. 2015;31(22):3593–3599. doi:10.1093/bioinformatics/btv422</p></blockquote><p><code>TEToolkit</code> includes two tools:</p><ul><li><code>TEtranscripts</code> quantifies both gene and transposable element (TE) transcript abundances from RNA-Seq experiments, utilizing both uniquely and ambiguously mapped short read sequences. It processes the short reads alignments (BAM files) and proportionally assigns read counts to the corresponding gene or TE based on the user-provided annotation files (GTF files).</li><li><code>TEpeaks</code> identifies regions enriched for protein binding or modification to repetitive DNA and RNA sequences. It has been utilized in a variety of high throughput sequencing experiments, such as ChIP-Seq, CLIP-Seq and RIP-Seq. The tool performs peak calling utilizing a method that extends the approach implemented by MACS, utilizing ambiguously mapped reads and bin-correlation normalization to identify narrow enriched repetitive regions typically missed by standard approaches. Differential peak enrichment can also be performed to identify regions of differential protein-association in high throughput sequencing experiments.</li></ul><p><code>TEtranscripts</code> is suitable for my purpose. It uses BAM files generated by other software, and the author recommended that users identify the optimal parameters for their particular genome and alignment program in order to get the best results.</p><blockquote><p><code>TEtranscripts</code> flow chart. Reads mapping to TEs are assigned in two different modes: uniq (reads mapping uniquely in the genome), and multi (reads mapping to multiple insertions of TEs). In the multi mode, an iterative algorithm is used to optimally distribute ambiguously mapped reads. Figure was downloaded from <a href="http://hammelllab.labsites.cshl.edu/software/#TEToolkit" target="_blank" rel="noopener">here</a>.</p></blockquote><img src="/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/tetranscri_1521545833_29749.png" title="TEtranscripts_flow_chart"><h3 id="rprofilerop"><a class="markdownIt-Anchor" href="#rprofilerop"></a> <a href="https://github.com/smangul1/rop/wiki" target="_blank" rel="noopener">rprofile/rop</a></h3><p><code>rprofile</code> is part of <code>rop</code>, which is designed to find all the origin of RNA-seq reads (mapped/unmapped, human/non-human, etc.).</p><blockquote><p><code>rprofile</code> is disigned to profile repetitive elements of the human genome from RNA-Seq data.</p></blockquote><p>Its paper:</p><blockquote><p>Mangul S, Yang HT, Strauli N, Gruhl F, Porath H, Hsieh K, Chen L, Daley T, Christenson S, Andersen AW, et al. Comprehensive analysis of RNA-sequencing to find the source of 1 trillion reads across diverse adult human tissues. bioRxiv. 2017 Jun 12:053041. doi:10.1101/053041</p></blockquote><p>It uses <code>BAM</code> file to profile REs in mapped reads. Not accurate, not for quantification, just for wider snapshot of RE fraction in RNA-seq data.</p><p>The annotation of TEs <code>rprofile</code> used now is just the one generated by <code>TEtranscripts</code>, only <code>hg19</code> available. But we can create other TE annotations using <code>makeTEgtf.pl</code> script in <code>TETookit</code>.</p><h3 id="lions"><a class="markdownIt-Anchor" href="#lions"></a> <a href="https://github.com/ababaian/LIONS" target="_blank" rel="noopener">LIONS</a></h3><p>Introduction from Git repo:</p><blockquote><p>LIONS is a bioinformatic analysis pipeline which brings together a few pieces of software and some home-brewed scripts to annotate a paired-end RNAseq library <strong>to detect TE-intiated transcripts</strong>.</p></blockquote><p>Its paper:</p><blockquote><p>Babaian A, Lever J, Gagnier L, Mager DL. LIONS: Analysis Suite for Detecting and Quantifying Transposable Element Initiated Transcription from RNA-seq. bioRxiv. 2017 Jun 14:149864. doi:10.1101/149864</p></blockquote><p>The last paragraph of the “Backgroud” part describes it more clear:</p><blockquote><p>To quantitatively measure and compare the contribution of TE promoters to normal and cancer  transcriptomes we developed a tool that incorporates features of previous methods but significantly  builds upon them. We were motivated to use paired-end RNA-seq data alone, a broadly  available data- type, to rapidly measure TE-initiations and transcriptome contributions. With a defined set of TE- initiated transcripts in each library, commonalities and differences between sets of data (biological  replicates) can be determined.</p></blockquote><p>Its workflow:</p><img src="/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/lions_work_1521546174_11152.png" title="LIONS_workflow"><p>This tool has not been published yet (<code>20180320</code>). There are limited docs in its Git repo and so many dependencies (it bases on the transcriptome assembled by <code>cufflinks</code>, so I doubt its accuracy).</p><h3 id="im-fusion"><a class="markdownIt-Anchor" href="#im-fusion"></a> <a href="https://github.com/NKI-CCB/imfusion" target="_blank" rel="noopener">IM-Fusion</a></h3><blockquote><p>IM-Fusion is a tool for identifying transposon insertion sites in insertional mutagenesis screens using single- and paired-end RNA-sequencing data. It essentially identifies insertion sites from gene-transposon fusions in the RNA-sequencing data, which represent splicing events between the transposon and endogeneous genes.<br><br><br>IM-Fusion also identifies candidate genes for a given screen using a statistical test (based on the Poisson distribution) that identifies Commonly Targeted Genes (CTGs) – genes that are more frequently affected by insertions than would be expected by chance. To further narrow down a list of CTGs, which may contain hundreds of genes, IM-Fusion also tests if insertions in a CTG have a significant effect on the expression of the gene, which is a strong indicator of them having an actual biological effect.</p></blockquote><p>Its paper:</p><blockquote><p>de Ruiter JR, Kas SM, Schut E, Adams DJ, Koudijs MJ, Wessels LFA, Jonkers J. Identifying transposon insertions and their effects from RNA-sequencing data. Nucleic Acids Research. 2017;45(12):7064–7077. doi:10.1093/nar/gkx461</p></blockquote><p>The abstract from its paper:</p><blockquote><p>Insertional mutagenesis using engineered transposons is a potent forward genetic screening technique used to identify cancer genes in mouse model systems. In the analysis of these screens, transposon insertion sites are typically identified by targeted DNA-sequencing and subsequently assigned to predicted target genes using heuristics. As such, these approaches provide no direct evidence that inser- tions actually affect their predicted targets or how transcripts of these genes are affected. To address this, we developed IM-Fusion, an approach that identifies insertion sites from gene-transposon fusions in standard single- and paired-end RNA-sequencing data. We demonstrate IM-Fusion on two separate transposon screens of 123 mammary tumors and 20 B-cell acute lymphoblastic leukemias, respectively. We show that IM-Fusion accurately identifies trans- poson insertions and their true target genes. Fur- thermore, by combining the identified insertion sites with expression quantification, we show that we can determine the effect of a transposon insertion on its target gene(s) and prioritize insertions that have a significant effect on expression. We expect that IM-Fusion will significantly enhance the accuracy of cancer gene discovery in forward genetic screens and provide initial insight into the biological effects of insertions on candidate cancer genes.</p></blockquote><p>Overview of <code>IM-Fusion</code>:</p><img src="/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/imfusion_o_1521548556_18711.png" title="IM-Fusion_Overview"><p>I do not know what is “Insertional mutagenesis using engineered transposons”. So I do not know when to use this tool. It seems that <code>IM-Fusion</code> does not suit me.</p><h3 id="clifinder"><a class="markdownIt-Anchor" href="#clifinder"></a> <a href="https://github.com/GReD-Clermont/CLIFinder" target="_blank" rel="noopener">CLIFinder</a></h3><blockquote><p>L1 Chimeric Transcripts (LCTs) are initiated by repeated LINE-1 element antisense promoters and include the L1 5′UTR sequence in antisense orientation followed by the adjacent genomic region. LCTs have been characterized mainly using bioinformatics approaches to query dbEST. To take advantage of NGS data to unravel the transcriptome composition, we developed Chimeric LIne Finder (CLIFinder), a new bioinformatics tool. Using stranded paired-end RNA-seq data, we demonstrated that CLIFinder can identify genome-wide transcribed chimera sequences corresponding to potential LCTs. Moreover, CLIFinder can be adapted to study transcription from other repeat types.<br><br>CLIFinder v0.4.1 is <strong>a Galaxy tool</strong>, specifically designed to identify  potential LCTs from one or several oriented RNA-seq paired-end reads in the human genome.<br><br>CLIFinder v0.4.1 is customizable to detect transcripts initiated by different types of repeat elements.</p></blockquote><p>Its paper:</p><blockquote><p>Pinson M-E, Pogorelcnik R, Court F, Arnaud P, Vaurs-Barriere C. CLIFinder: Identification of LINE-1 Chimeric Transcripts in RNA-seq data. Bioinformatics. 2017 Oct 23 [accessed 2017 Nov 2]. <a href="https://academic.oup.com/bioinformatics/article/doi/10.1093/bioinformatics/btx671/4562333" target="_blank" rel="noopener">https://academic.oup.com/bioinformatics/article/doi/10.1093/bioinformatics/btx671/4562333</a>. doi:10.1093/bioinformatics/btx671</p></blockquote><p>It is a <code>Galaxy</code> tool, so…(we do not have <code>Galaxy</code> installed on the computer cluster.)</p><h3 id="salmonte"><a class="markdownIt-Anchor" href="#salmonte"></a> <a href="https://github.com/hyunhwaj/SalmonTE" target="_blank" rel="noopener">SalmonTE</a></h3><blockquote><p>SalmonTE is an ultra-Fast and Scalable Quantification Pipeline of Transpose Element (TE) Abundances.</p></blockquote><p>Its paper:</p><blockquote><p>Jeong H-H, Yalamanchili HK, Guo C, Shulman JM, Liu Z. An ultra-fast and scalable quantification pipeline for transposable elements from next generation sequencing data. In: Biocomputing 2018. WORLD SCIENTIFIC; 2017. p. 168–179. <a href="http://www.worldscientific.com/doi/abs/10.1142/9789813235533_0016" target="_blank" rel="noopener">http://www.worldscientific.com/doi/abs/10.1142/9789813235533_0016</a>. doi:10.1142/9789813235533_0016</p></blockquote><p>Below is its working pipeline, clear and simple!</p><img src="/blog/2018/03/Tools-for-analysis-TEs-in-RNA-seq-data/salmonte_p_1521548399_15951.png" title="SalmonTE_pipeline"><p>Pros. from its paper:</p><blockquote><p>In contrast to TEtranscripts, SalmonTE starts with raw RNA-seq files, and does not need any additional pre-processing for a given sequence file. Moreover, TEtranscripts requires a modied GTF files based on RepeatMasker database. SalmonTE only needs the FASTA file of cDNA (complementary DNA) sequences of each TE.</p></blockquote><p><code>SalmonTE</code> is based on <a href="https://github.com/COMBINE-lab/salmon" target="_blank" rel="noopener">Salmon</a>, which is a very fantastic tool for RNA-seq quantification. I will give it a try.</p><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><ul><li><p><strong>TE quantification</strong>:</p><ul><li><code>RepEnrich</code>: map <code>FASTQ</code> files to the genome using <code>Bowtie1</code>, use repeat annotation from <a href="http://www.repeatmasker.org/genomicDatasets/RMGenomicDatasets.html" target="_blank" rel="noopener">repeatmasker.org</a> or <a href="http://genome.ucsc.edu/cgi-bin/hgTables" target="_blank" rel="noopener">UCSC genome table browser</a>, can also analyze ChIP-seq data.</li><li><code>TEtranscripts</code>: map <code>FASTQ</code> files to the genome using any alignment software (but need to tune the parameters), use a custom <code>GTF</code> file for repeat and gene annotation.</li><li><code>SalmonTE</code>: no need to align reads to genome, use <code>Salmon</code> for TE quantification, only four species’ reference available now (hs, mm, dm, dr, <code>20180320</code>), base on annotation of Repbase (a website I do not like…), not easy to create customized  reference.</li></ul></li><li><p><strong>TE involved transcript</strong>:</p><ul><li><code>LIONS</code>: limited docs.</li><li><code>CLIFincer</code>: a Galaxy tool</li></ul></li><li><p><strong>Other</strong>:</p><ul><li><code>IM-Fusion</code></li></ul></li></ul><p>A little thoughts: all above tools for TE quantification may be inaccurate (the intrinsic drawback of short-reads mapping). Even <code>SalmonTE</code> does not need alignment, it may also deviate from reality. These tools maybe more suit for compasion of different conditions.</p><h2 id="using-tetranscripts-for-te-quantification"><a class="markdownIt-Anchor" href="#using-tetranscripts-for-te-quantification"></a> Using <code>TEtranscripts</code> for TE quantification</h2><h3 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h3><p>Download <code>zip</code> file from tetoolkit <a href="https://github.com/mhammell-laboratory/tetoolkit/releases" target="_blank" rel="noopener">release page</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> unzip tetoolkit-1.5.0.zip &amp;&amp; <span class="built_in">cd</span> tetoolkit-1.5.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install using Python 2.7 from Anaconda, failed, don<span class="string">'t know why, maybe something related to PYTHONPATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python setup.py install</span></span><br><span class="line">Processing dependencies for TEToolkit==1.5.0</span><br><span class="line">Searching for pysam&gt;=0.8</span><br><span class="line">Reading http://pypi.python.org/simple/pysam/</span><br><span class="line">Couldn't find index page for 'pysam' (maybe misspelled?)</span><br><span class="line">Scanning index of all packages (this may take a while)</span><br><span class="line">Reading http://pypi.python.org/simple/</span><br><span class="line">No local packages or download links found for pysam&gt;=0.8</span><br><span class="line">error: Could not find suitable distribution for Requirement.parse('pysam&gt;=0.8')</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> install using original Python 2.7, it worked</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /software/Python.2.7.13/bin/python setup.py  install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/software/Python.2.7.13/bin/TEtranscripts -h</span></span><br><span class="line">usage: TEtranscripts [-h] -t treatment sample [treatment sample ...] -c</span><br><span class="line">                     control sample [control sample ...] --GTF genic-GTF-file</span><br><span class="line">                     --TE TE-GTF-file [--format [input file format]]</span><br><span class="line">                     [--stranded [option]] [--mode [TE counting mode]]</span><br><span class="line">                     [--project [name]] [-p [pvalue]] [-f [foldchange]]</span><br><span class="line">                     [--minread [min_read]] [-n [normalization]] [--sortByPos]</span><br><span class="line">                     [-i [iteration]] [--maxL [maxL]] [--minL [minL]]</span><br><span class="line">                     [-L [fragLength]] [--verbose [verbose]] [--version]</span><br><span class="line">Required arguments:</span><br><span class="line">  -t | --treatment [treatment sample 1 treatment sample 2...]</span><br><span class="line">     Sample files in group 1 (e.g. treatment/mutant), separated by space</span><br><span class="line">  -c | --control [control sample 1 control sample 2 ...]</span><br><span class="line">     Sample files in group 2 (e.g. control/wildtype), separated by space</span><br><span class="line">  --GTF genic-GTF-file  GTF file for gene annotations</span><br><span class="line">  --TE TE-GTF-file      GTF file for transposable element annotations</span><br><span class="line"></span><br><span class="line">Identifying differential transcription of gene and transposable elements.</span><br></pre></td></tr></table></figure><p>So <code>TEtranscripts</code> is mainly for compare two conditions.</p><h3 id="prepare-annotations"><a class="markdownIt-Anchor" href="#prepare-annotations"></a> Prepare annotations</h3><p>Download RepeatMasker tracks from UCSC Table Browser for <a href="http://genome.ucsc.edu/cgi-bin/hgTables?hgsid=661002703_YPeG8TMraFo0XjOX8Af2dM6VOPnp&amp;clade=mammal&amp;org=Pig&amp;db=0&amp;hgta_group=varRep&amp;hgta_track=rmsk&amp;hgta_table=rmsk&amp;hgta_regionType=genome&amp;position=&amp;hgta_outputType=primaryTable&amp;hgta_outFileName=susScr11_rmsk.gz" target="_blank" rel="noopener">pig: susScr11</a> and <a href="http://genome.ucsc.edu/cgi-bin/hgTables?hgsid=661002703_YPeG8TMraFo0XjOX8Af2dM6VOPnp&amp;clade=mammal&amp;org=Rhesus&amp;db=0&amp;hgta_group=varRep&amp;hgta_track=rmsk&amp;hgta_table=rmsk&amp;hgta_regionType=genome&amp;position=&amp;hgta_outputType=primaryTable&amp;hgta_outFileName=rheMac8_rmsk.gz" target="_blank" rel="noopener">rhesus: rheMac8</a>.</p><p>Then use <code>makeTEgtf.pl</code> from <a href="http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/TE_GTF/" target="_blank" rel="noopener">here</a> to make <code>GTF</code> files for TE.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> perl ~/software/tetoolkit-1.5.0/makeTEgtf.pl</span></span><br><span class="line"></span><br><span class="line"> Usage: makeTEgtf.pl -c [chrom column] -s [start column] -e [stop/end column] </span><br><span class="line">                     -o [strand column] -n [source] -t [TE name column] </span><br><span class="line">                     (-f [TE family column] -C [TE class column] -1)</span><br><span class="line">                     [INFILE]</span><br><span class="line"></span><br><span class="line"> Output is printed to STDOUT</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> head -5 susScr11_rmsk</span></span><br><span class="line"><span class="meta">#</span><span class="bash">binswScoremilliDivmilliDelmilliInsgenoNamegenoStartgenoEndgenoLeftstrandrepNamerepClassrepFamilyrepStartrepEndrepLeftid</span></span><br><span class="line">2204401733845chr17549626575498174-198832358-L1B_SSLINEL1-3164380818761</span><br><span class="line">242171867111chr19227432792275321-182055211-L1MA9LINEL1-322708252541</span><br><span class="line">276229411060chr1117440307117440687-156889845-L2cLINEL2-511290825081</span><br><span class="line">3499153273chr1142603227142607372-131723160-L1_SSLINEL1-5681326432</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pig</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> perl ~/software/tetoolkit-1.5.0/makeTEgtf.pl -c 6 -s 7 -e 8 -o 10 -t 11 -n susScr11_rmsk -f 13 -C 12 -S 2 susScr11_rmsk &gt; susScr11_rmsk.gtf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> monkey</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> perl ~/software/tetoolkit-1.5.0/makeTEgtf.pl -c 6 -s 7 -e 8 -o 10 -t 11 -n susScr11_rmsk -f 13 -C 12 -S 2 rheMac8_rmsk &gt; rheMac8_rmsk.gtf</span></span><br></pre></td></tr></table></figure><h3 id="mapping-reads-to-genome-using-star"><a class="markdownIt-Anchor" href="#mapping-reads-to-genome-using-star"></a> Mapping reads to genome using <code>STAR</code></h3><p>There are detailed discussions about the parameters:</p><ul><li><a href="https://github.com/mhammell-laboratory/tetoolkit/issues/16" target="_blank" rel="noopener">Question about the alignments preparation</a></li><li><a href="https://github.com/alexdobin/STAR/issues/243" target="_blank" rel="noopener">Question reagarding a parameter in STAR</a></li></ul><p>I have over 70 samples and have aligned reads to the genomes using <code>STAR</code> before. I do not want to align again…</p><p>The author provided some test files at <a href="http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/test_data/" target="_blank" rel="noopener">this location</a>. I will download BAM files of human for test.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GTF</span></span><br><span class="line">wget http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/test_data/testdata_GTF/hg19_rmsk_TE.gtf.gz</span><br><span class="line">wget http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/test_data/testdata_GTF/hg19_refGene.gtf.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> BAM</span></span><br><span class="line">wget http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/test_data/testdata_PE/test_data_PE_control.bam</span><br><span class="line">wget http://labshare.cshl.edu/shares/mhammelllab/www-data/TEToolkit/test_data/testdata_PE/test_data_PE_treatment.bam</span><br></pre></td></tr></table></figure><h3 id="quantification"><a class="markdownIt-Anchor" href="#quantification"></a> Quantification</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/software/Python.2.7.13/bin/TEtranscripts --sortByPos --mode multi --TE hg19_rmsk_TE.gtf --GTF hg19_refGene.gtf --project pairedEnd_test -t test_data_PE_treatment.bam -c test_data_PE_control.bam 2&gt; <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p>Then got the following errors:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">INFO  @ Wed, 21 Mar 2018 18:47:20: </span><br><span class="line">Reading sample files ...</span><br><span class="line"> </span><br><span class="line">Error occured when reading first line of sample file test_data_PE_treatment.bam.</span><br><span class="line">Error: 'samtools returned with error 1: stdout=, stderr=[bam_sort] Use -T PREFIX / -o FILE to specify temporary and final output files\nUsage: samtools sort [options...] [in.bam]\nOptions:\n  -l INT     Set compression level, from 0 (uncompressed) to 9 (best)\n  -m INT     Set maximum memory per thread; suffix K/M/G recognized [768M]\n  -n         Sort by read name\n  -o FILE    Write final output to FILE rather than standard output\n  -T PREFIX  Write temporary files to PREFIX.nnnn.bam\n      --input-fmt-option OPT[=VAL]\n               Specify a single input file format option in the form\n               of OPTION or OPTION=VALUE\n  -O, --output-fmt FORMAT[,OPT[=VAL]]...\n               Specify output format (SAM, BAM, CRAM)\n      --output-fmt-option OPT[=VAL]\n               Specify a single output file format option in the form\n               of OPTION or OPTION=VALUE\n      --reference FILE\n               Reference sequence FASTA FILE [null]\n  -@, --threads INT\n               Number of additional threads to use [0]\n'</span><br><span class="line">[Exception type: SamtoolsError, raised in utils.py:75]</span><br></pre></td></tr></table></figure><p>Other users also found this bug: <a href="https://github.com/mhammell-laboratory/tetoolkit/issues/11" target="_blank" rel="noopener">Problem with samtools</a>. It was caused by <code>pysam (&gt;0.9)</code> and <code>samtools (&gt;1.3)</code>. A solution is sorting the <code>BAM</code> files according to read names rather than by coordinates then feeding to <code>TEtranscripts</code> for now.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> samtools sort -@4 -O BAM -n test_data_PE_treatment.bam -o test_data_PE_treatment.sortedByReadname.bam</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> samtools sort -@4 -O BAM -n test_data_PE_control.bam -o test_data_PE_control.sortedByReadname.bam</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ~/software/Python.2.7.13/bin/TEtranscripts --mode multi --TE hg19_rmsk_TE.gtf --GTF hg19_refGene.gtf --project pairedEnd_test -t test_data_PE_treatment.sortedByReadname.bam -c test_data_PE_control.sortedByReadname.bam 2&gt; <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p>There are four outputs of the above command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pairedEnd_test.cntTable        # the count table (genes along with TEs)</span><br><span class="line">pairedEnd_test_DESeq.R        # the R codes for DE analysis</span><br><span class="line">pairedEnd_test_gene_TE_analysis.txt    # analysis result of DEseq</span><br><span class="line">pairedEnd_test_sigdiff_gene_TE.txt    # significant genes and TEs</span><br></pre></td></tr></table></figure><p>We can also use the count table for DE analysis.</p><h2 id="using-salmonte-for-te-quantification"><a class="markdownIt-Anchor" href="#using-salmonte-for-te-quantification"></a> Using <code>SalmonTE</code> for TE quantification</h2><h3 id="install-2"><a class="markdownIt-Anchor" href="#install-2"></a> Install</h3><p>Install <code>Python3</code> modules:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install snakemake docopt pandas</span></span><br></pre></td></tr></table></figure><p>Install <code>R</code> packages:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install.packages(c(<span class="string">"tidyverse"</span>, <span class="string">"cowplot"</span>, <span class="string">"scales"</span>, <span class="string">"WriteXLS"</span>))</span><br><span class="line"><span class="keyword">source</span>(<span class="string">"https://bioconductor.org/biocLite.R"</span>)</span><br><span class="line">biocLite(c(<span class="string">"DESeq2"</span>, <span class="string">"tximport"</span>))</span><br></pre></td></tr></table></figure><p>Clone the repository</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/hyunhwaj/SalmonTE</span></span><br></pre></td></tr></table></figure><p>Add <code>PATH</code> of <code>SalmonTE</code> to your <code>.bashrc</code> file:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/PATH_OF_SALMON_TE/</span><br></pre></td></tr></table></figure><p>After sweating my blood (trying different <code>R</code> versions, different <code>gcc</code> versions, using <code>callr 1.0</code> rather than <code>callr 2.0</code>）, I installed all dependent <code>R</code> packages  … I hate installing software.</p><h3 id="build-index"><a class="markdownIt-Anchor" href="#build-index"></a> Build index</h3><p><code>SalmonTE</code> now (<code>20180320</code>) provides pre-built reference for four species: human (hs), <em>Mus musculus</em> (mm), <em>Danio rerio</em> (dr), <em>Fruit fly</em> (dm).</p><p>It provides a doc about <a href="https://github.com/hyunhwaj/SalmonTE/wiki/How-to-build-a-customized-index" target="_blank" rel="noopener">How to build a customized index</a>, but when the species is not included in Repbase, it is not easy to create a index.</p><p>I asked the author about this: <a href="https://github.com/hyunhwaj/SalmonTE/issues/9" target="_blank" rel="noopener">build index from species which is not available in Repbase</a>, and there is no good solutions so far. There is also a thread talking about this: <a href="https://github.com/hyunhwaj/SalmonTE/issues/5" target="_blank" rel="noopener">reference</a>.</p><p>Well, I will just try <code>SalmonTE</code> for human.</p><h3 id="quantification-2"><a class="markdownIt-Anchor" href="#quantification-2"></a> Quantification</h3><p>Then, I encountered another problem: <a href="https://github.com/hyunhwaj/SalmonTE/issues/9#issuecomment-374853104" target="_blank" rel="noopener">SalmonTE only recognize .fastq and .fastq.gz extensions</a>, but all my files end with <code>.fq.gz</code>. Even by using <code>ln -s</code> to create files with <code>.fastq.gz</code> extensions, it still went wrong.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 /software/SalmonTE/SalmonTE.py quant --reference=hs clean_fastq/human</span></span><br><span class="line">2018-03-21 14:53:13,061 Starting quantification mode</span><br><span class="line">2018-03-21 14:53:13,061 Collecting FASTQ files...</span><br><span class="line">2018-03-21 14:53:13,062 Failed to read clean_fastq/human</span><br></pre></td></tr></table></figure><p>This problem was also reported by other users: <a href="https://github.com/hyunhwaj/SalmonTE/issues/4" target="_blank" rel="noopener">Nothing to be done</a>, and it has not been solved. So I have to change the name my files…I have lots files.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> output count</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 /software/SalmonTE/SalmonTE.py quant --reference=hs --outpath=SalmonTE/human/count --num_threads=16 clean_fastq/human</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> output TPM</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 /software/SalmonTE/SalmonTE.py quant --reference=hs --outpath=SalmonTE/human/TPM --num_threads=16 --exprtype=TPM clean_fastq/human</span></span><br></pre></td></tr></table></figure><p>It was very fast. Using 16 threads, 22 samples took about 150 minutes.</p><p>The output count/TPM are just like what <code>Salmon</code> does. All samples are put into one file named <code>EXPR.csv</code>. We can use this file for downstream analysis.</p><p>Good.</p><h2 id="change-notes"><a class="markdownIt-Anchor" href="#change-notes"></a> Change notes</h2><ul><li>20180322: create the note.</li><li>20180323: add <code>rprofile</code>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I observed large fraction reads from intronic regions in my total RNA-seq data. Considering that many &lt;a href=&quot;https://en.wikipedia.org/w
      
    
    </summary>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/"/>
    
      <category term="TE" scheme="https://yiweiniu.github.io/blog/categories/RNA-seq/TE/"/>
    
    
      <category term="bio-tools" scheme="https://yiweiniu.github.io/blog/tags/bio-tools/"/>
    
      <category term="RNA-seq" scheme="https://yiweiniu.github.io/blog/tags/RNA-seq/"/>
    
      <category term="TE" scheme="https://yiweiniu.github.io/blog/tags/TE/"/>
    
  </entry>
  
  <entry>
    <title>Set up Jupyter Notebook on the Server</title>
    <link href="https://yiweiniu.github.io/blog/2018/03/set-up-Jupyter-Notebook-on-the-server/"/>
    <id>https://yiweiniu.github.io/blog/2018/03/set-up-Jupyter-Notebook-on-the-server/</id>
    <published>2018-03-20T07:17:40.000Z</published>
    <updated>2018-06-29T02:04:16.880Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jupyter/notebook" target="_blank" rel="noopener">Jupyter Notebook</a> can be a good place to save work environment.</p><p>I want to set up a Jupyter Notebook on the server, then I can visit it through my browser (Win10 x64).</p><p>I have installed 64-bit <a href="https://www.anaconda.com/download/#linux" target="_blank" rel="noopener">Anaconda</a>, and it already includes the Jupyter Notebook.</p><p>First, generate configuration files</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ~/software/anaconda3/bin/jupyter notebook --generate-config</span></span><br></pre></td></tr></table></figure><p>Second, generate password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt;&gt; from IPython.lib import passwd</span><br><span class="line">&gt;&gt;&gt; passwd()</span><br><span class="line">Enter password: </span><br><span class="line">Verify password: </span><br><span class="line">&apos;sha1:44b701133f2c:803e8dc59ceafe9a54b4ae1efb79dd9a1ca83192&apos;</span><br><span class="line">&gt;&gt;&gt; exit()</span><br></pre></td></tr></table></figure><p>Third, edit the configuration file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>modified like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c.NotebookApp.ip=&apos;*&apos; # the notebook can be visited by any IP address</span><br><span class="line">c.NotebookApp.password = u&apos;sha:ce...&apos; # password generated before</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port =8889 # any port will be fine</span><br><span class="line">c.NotebookApp.notebook_dir = u&apos;/home/niuyw/Jupyter_Notebook&apos; # notebook directory</span><br><span class="line">c.IPKernelApp.pylab = &apos;inline&apos;</span><br></pre></td></tr></table></figure><p>Fourth, start the Jupyter Notebook</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/software/anaconda3/bin/jupyter notebook</span><br></pre></td></tr></table></figure><p>Fifth, start <code>SSH</code> in the local machine (I use <code>git bash</code>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -N -f -L localhost:8888:localhost:8889 niuyw@192.168.71.41</span></span><br><span class="line">niuyw@192.168.71.41's password:</span><br></pre></td></tr></table></figure><p>Sixth, open the browser <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> to visit the Notebook:</p><p>like this:</p><img src="/blog/2018/03/set-up-Jupyter-Notebook-on-the-server/jupyter_lo_1520580260_2831.png" title="Jupyter_interface"><p>Enter the password and enjoy!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/jupyter/notebook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jupyter Notebook&lt;/a&gt; can be a good place to save work enviro
      
    
    </summary>
    
      <category term="Python" scheme="https://yiweiniu.github.io/blog/categories/Python/"/>
    
    
      <category term="Jupyter, Python" scheme="https://yiweiniu.github.io/blog/tags/Jupyter-Python/"/>
    
  </entry>
  
  <entry>
    <title>构建自己的笔记管理系统</title>
    <link href="https://yiweiniu.github.io/blog/2018/02/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yiweiniu.github.io/blog/2018/02/构建自己的笔记管理系统/</id>
    <published>2018-02-17T12:05:53.000Z</published>
    <updated>2018-05-07T06:57:38.121Z</updated>
    
    <content type="html"><![CDATA[<p>下面提到的笔记管理方法，说是笔记管理，也可以勉强说是知识管理。毕竟知识是复杂的，并非所有的知识（或经验）都能方便地整理成能存储在目前的计算机中的格式。所以，还是说笔记管理更合适。笔记整理，实际上是一个分类工作，最本质的难度也在这里。夸张一点说，科学就是关于分类的学科，当你搞清楚了不同乱七八糟的层级关系时，你就理解了它是怎么工作的……嗯，扯远了。</p><p>说明一下，本人研究生二年级在读，专业是生物信息学。所以下面的内容可能更适合与我处境类似的朋友，毕竟大家需求千差万别。</p><p>作为一只“科研狗”，做笔记当然是很重要的啦。做过笔记的好孩子都知道，整理笔记是一项非常非常花时间，但十分“划算”的工作。俗话说，好记性不如烂笔头。除了在有需要时进行查询，做笔记也是一个“学而时习之”，整理思路，归纳方法的过程。另外，收藏不等于知道（可惜一直记不住）！</p><p>用过不少的笔记管理工具，比如为知笔记、有道云笔记、印象笔记、OneNote、Endnote 等。但一直没有找到一个满意的解决方法，在不断不断……不断地折腾中，最近找到了一套差强人意的方法。整理一下分享给大家，希望能有些帮助。</p><h3 id="有哪些笔记需要管理"><a class="markdownIt-Anchor" href="#有哪些笔记需要管理"></a> 有哪些笔记需要管理</h3><p>有哪些笔记需要整理呢？想了一下，格式可谓……十分复杂。</p><ul><li>文献：虽然不想看……</li><li>网页：随着自媒体（比如博客、公众号等）的兴起，网页可能已经成为了最大也最复杂的知识来源。</li><li>其他：比如自己做的 PPT，网上下载的 PPT，excel，word 等。</li></ul><p>文献管理比较简单，找一个心仪的工具来专门管理就好了，反正这个也（几乎）必须由专门软件来管理。</p><p>网页比较复杂，所以印象笔记等工具提供的网页剪辑功能才十分诱人，鼠标右键 -&gt; 保存到我的……，别人辛苦整理好的笔记（博客）就到了我的笔记里。虽然我也经常用这种方式，有时候保存书签（网页地址），有时候保存网页内容（防止网页链接死掉，经常发生！）。但是经常觉得别人的理解并非我的理解，里面没有我自己的经验。在工作中，非常典型的场景是，当需要解决一个问题时，我可能查询浏览了数个甚至几十上百个网页，它们都或多或少地帮助了我，但是可能并非所有内容都那么“有用”。所以经常有先保存再整理的冲动，虽然大多数时候也就仅仅只是……冲动，空余时间都喂了狗了……</p><p>其他就更复杂了，许多情况下，文本（纯文本、富文本）并非最好的展示方式，比如你总得做工作汇报和文献讨论吧……这些 PPT 放在哪，怎么管理，当然，不嫌累的话可以把 PPT 导出图片，然后再整理到别的文本中。这只是举个例子，实际情况更加复杂。</p><h3 id="对笔记管理方案的需求"><a class="markdownIt-Anchor" href="#对笔记管理方案的需求"></a> 对笔记管理方案的需求</h3><p>我对笔记管理主要有下面这些需求：</p><ul><li>轻便。依赖环境越简单越好，工具越轻便越好。</li><li>方便同步。我对移动端等的同步需求不大，毕竟在小屏幕上看笔记的需求不大，工作时肯定以个人电脑为主。我指的同步包括但不限于：云同步（同步到公共服务器或私有服务器）、拷贝到其他存储媒介等。</li><li>可移植。解决方法要容易移植，比如不用花很多时间就能分别在工作电脑和个人电脑上搭建。笔记要容易移植，每个笔记都是独立的文件，用户可以不通过笔记管理软件而通过资源管理器自由查看更改这些文件。这一点和方便同步其实有些重合。</li><li>支持 markdown。markdown 是一种轻量级的标记语言，非常方便书写。</li></ul><p>关于为什么对 markdown 有执念，网上已经有很多讨论了。语法非常简单，强烈建议学习一下，连我都会用……</p><ul><li><a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown——入门指南</a></li><li><a href="http://news.cnblogs.com/n/139649/" target="_blank" rel="noopener">为什么我们要学习 Markdown 的三个理由</a></li><li><a href="https://www.jianshu.com/p/qqgjln" target="_blank" rel="noopener">为什么作家应该用 Markdown 保存自己的文稿</a></li><li><a href="http://www.ituring.com.cn/article/23" target="_blank" rel="noopener">怎样使用Markdown</a></li></ul><p>另外，最重要的一点：<strong>尽量不依赖商业软件</strong>。商业软件当然具有各种优势，比如印象笔记的网页剪辑，为知笔记非常的用户友好，有道云对 markdown 的支持，OneNote 多层级的管理系统及自由书写的快感。但是，依赖商业软件让人非常“不爽”，比如程序是个黑盒子，公司对于产品的态度及支持一直在变化，买了会员后万一公司哪天倒闭了呢，格式不友好（不兼容其他平台，不便导出等）……总之，就是想自己折腾，哈哈。</p><p>其他的一些小的需求比如：界面美观，使用简单，开源，支持全文搜索，标签，时间线等。不过这些都不是主要的。</p><h3 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h3><p>先说方法，用过这些工具朋友应该已经知道怎么做了。</p><ul><li><a href="https://www.zotero.org/" target="_blank" rel="noopener">Zotero</a>：文献和笔记管理软件</li><li><a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">VNote</a>：一个基于 markdown 的本地笔记管理软件。</li><li>坚果云：一个非常方便的云同步平台</li><li>火狐浏览器 + 一些插件：书签管理</li><li>资源管理器：就是……文件夹</li><li>markdonw 书写（非必需，但是建议）</li><li>其他</li></ul><h4 id="用-zotero-管理文献和笔记"><a class="markdownIt-Anchor" href="#用-zotero-管理文献和笔记"></a> 用 Zotero 管理文献（和笔记）</h4><p>许多人（身边的朋友，不在身边的朋友……）都用 Endnote 管理文献，不在此讨论 Endnote 的不好了。毕竟工具不是关键，只要能到罗马，黑猫白猫都行。</p><p>Zotero 有哪些优势呢？</p><ul><li>免费（Zotero 同步空间存储收费，但是可以用其他同步方式，比如坚果云）</li><li>简单</li><li>漂亮</li><li>导入文献太方便了，仅仅需要鼠标左键（方便收集文献）</li><li>导出文献到 word 方便（方便写论文时插入文献）</li><li>可以配合坚果云实现“完美”同步</li><li>不仅仅可以管理文献，还有笔记、网页等</li><li>支持插件，比如谷歌学术插件，可以很方便地更新文献的引用次数。</li><li>群组，可以很方便地把整理好的文献分享给他人</li><li>好像还能导入 Endnote 文献，我没用过。</li></ul><p>举个例子，下面是我收集的关于从 RNA-seq 数据中探索 splicing 的工具：可以看到左边是目录，右边不仅仅有文献，还有网页，每个条目下又可以建立笔记、链接等。<code>Extra</code> 列是用 <a href="https://github.com/beloglazov/zotero-scholar-citations" target="_blank" rel="noopener">Zotero Scholar Citations</a> 插件获取的文献引用次数。</p><img src="/blog/2018/02/构建自己的笔记管理系统/zotero_rna_1518862657_29629.png" title="zotero_example"><p>总之一句话来形容喜欢的话，我已经几乎离不开了 Zotero 了。每天工作时最先（手动）打开的两个软件，一个是火狐浏览器，一个是 Zotero。</p><p>网上有很多关于 Zotero 的教程了，比如这个系列：<a href="https://www.douban.com/group/topic/45562674/" target="_blank" rel="noopener">Zotero入门六篇</a>。再比如配合坚果云的同步教程：<a href="http://help.jianguoyun.com/?p=2538" target="_blank" rel="noopener">用坚果云作为Zotero云存储的设置方法</a>、<a href="http://blog.jianguoyun.com/?p=2579" target="_blank" rel="noopener">如何在Zotero中设置webdav连接到坚果云？</a>。有时候，我们只是不知道用什么合适的关键词去搜索，许多问题早就被解决了。</p><h4 id="用-vnote-管理笔记"><a class="markdownIt-Anchor" href="#用-vnote-管理笔记"></a> 用 VNote 管理笔记</h4><p><a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">VNote</a>，这是一个最近（大约半个月前）才发现的良品工具，作者解决的问题其实我也一直想解决，可惜技术上水平不够。能发现这样优秀的工具实在是荣幸。不多说，看作者的介绍，或者下载下来试一下~</p><ul><li><a href="https://tamlok.github.io/vnote/" target="_blank" rel="noopener">VNote 项目主页</a></li><li><a href="https://www.jianshu.com/p/c57bb900b322" target="_blank" rel="noopener">VNote: 一个舒适的Markdown笔记软件</a></li><li><a href="https://www.jianshu.com/p/3b8e0e70cd48" target="_blank" rel="noopener">靡不有初，鲜克有终——写在VNote半周岁</a></li><li><a href="https://www.v2ex.com/t/370895?p=2" target="_blank" rel="noopener">VNote：一个更懂程序员和 Markdown 的笔记</a></li></ul><p>举个例子，我正在写的这篇笔记就是用 VNote + markdown 写的：</p><img src="/blog/2018/02/构建自己的笔记管理系统/vnote_exam_1518867139_16744.png" title="vnote_example"><h4 id="用坚果云同步到云端"><a class="markdownIt-Anchor" href="#用坚果云同步到云端"></a> 用坚果云同步到云端</h4><p>使用很简单，不用学，直接用。这是一张来自其<a href="http://help.jianguoyun.com/" target="_blank" rel="noopener">帮助中心</a>的截图，可以说非常接近事实：</p><img src="/blog/2018/02/构建自己的笔记管理系统/坚果云是什么_1518862125_29173.png" title="jianguo_intro"><h4 id="用火狐浏览器和插件同步书签"><a class="markdownIt-Anchor" href="#用火狐浏览器和插件同步书签"></a> 用火狐浏览器和插件同步书签</h4><p>正如上面提到的，许多许多的知识来自于网页，有些时候我们不需要保存整个网页的内容，只需要（暂时）保存它们的地址。那么，好用的书签管理肯定最方便了。</p><p>我采用的方式是：Firefox + Xmarks Bookmark Sync + Bookmark Dupes 来管理书签：</p><ul><li>Firefox，亦即火狐娘（有些傲娇，但功能十分强大，故称娘 <sup>_</sup>）</li><li>EverSync，同步书签到云端</li><li>Bookmark Dupes，整理重复的书签及文件夹</li></ul><h4 id="用资源管理器管其他的"><a class="markdownIt-Anchor" href="#用资源管理器管其他的"></a> 用资源管理器管其他的</h4><p>这个无需赘言，对于像我这样对电脑有强迫症的人来说，目录最好井井有序，不然肯定会抓狂的（有时也用 <a href="http://www.voidtools.com/" target="_blank" rel="noopener">everything</a>）。关于整理电脑，网上也有一些建议，无聊时候可以搜搜看，有些还是挺有帮助的。</p><h3 id="操作方案"><a class="markdownIt-Anchor" href="#操作方案"></a> 操作方案</h3><p>除了书签管理（在火狐浏览器中完成）和文献管理（在 Zotero 中完成），下面是我在电脑上对笔记管理采用的目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">笔记整理    # 存放笔记的根目录，也是同步的目录</span><br><span class="line">├── VNote    # VNote 的根目录（笔记整理的主要文件夹，软件自动整理）</span><br><span class="line">└── 工作    # 存放工作汇报（主要是 PPT ）的目录</span><br><span class="line">└── 文献    # 存放文献讨论的（主要是 PPT ）的目录</span><br><span class="line">└── 笔记    # 存放一些其他的笔记（比如偶尔整理的 word，excel 等）</span><br></pre></td></tr></table></figure><p>比如这是放文献汇报 PPT 的文件夹，PPT 都以日期命名，方便查找：</p><img src="/blog/2018/02/构建自己的笔记管理系统/笔记_文献_1518864554_16842.png" title="笔记_文献"><p>以后做笔记都尽量整理到这些目录中，然后只需要备份整个文件夹就可以了（再安装几个反正我也会装的软件……）。拷贝到 U 盘，移动硬盘，或者通过坚果云同步：</p><img src="/blog/2018/02/构建自己的笔记管理系统/坚果云_同步_1518867432_27209.png" title="笔记_文献"><h3 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h3><ul><li>我的方法不一定适用，只是我自己目前觉得好用的方法。欢迎交流讨论~</li><li>学习是一个积年累月的过程，笔记整理只是其中很小的一个部分。保持无知，不断坚持，共勉。</li><li>感谢那些我无法一一列出但十分需要感谢的来自网络的知识的作者，以及一些与我讨论的朋友，谢谢他们的分享！</li></ul><h2 id="更新日志"><a class="markdownIt-Anchor" href="#更新日志"></a> 更新日志</h2><ul><li>20180217：创建笔记。</li><li>20180507：修改用火狐浏览器同步书签部分。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面提到的笔记管理方法，说是笔记管理，也可以勉强说是知识管理。毕竟知识是复杂的，并非所有的知识（或经验）都能方便地整理成能存储在目前的计算机中的格式。所以，还是说笔记管理更合适。笔记整理，实际上是一个分类工作，最本质的难度也在这里。夸张一点说，科学就是关于分类的学科，当你搞
      
    
    </summary>
    
      <category term="mixture" scheme="https://yiweiniu.github.io/blog/categories/mixture/"/>
    
    
      <category term="VNote" scheme="https://yiweiniu.github.io/blog/tags/VNote/"/>
    
      <category term="Zotero" scheme="https://yiweiniu.github.io/blog/tags/Zotero/"/>
    
      <category term="markdown" scheme="https://yiweiniu.github.io/blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hugo 建站记录</title>
    <link href="https://yiweiniu.github.io/blog/2018/02/Hugo-%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://yiweiniu.github.io/blog/2018/02/Hugo-建站记录/</id>
    <published>2018-02-17T05:37:25.000Z</published>
    <updated>2018-02-17T12:36:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p><p>根据官网的一些文档及网上的教程，尝试用 Hugo 搭建一个静态的博客站点。下面的操作在 win10 64 位家庭版中完成。bash 命令在 git bash 中操作。</p><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>在 <a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">Hugo Releases</a> 页面下载了最新的 v0.36 win64 位压缩包，解压后将其添加到环境变量中。</p><h3 id="生成站点"><a class="markdownIt-Anchor" href="#生成站点"></a> 生成站点</h3><p>使用 Hugo 快速生成站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hugo new site <span class="built_in">test</span></span></span><br><span class="line">Congratulations! Your new Hugo site is created in D:\hugo.</span><br><span class="line"></span><br><span class="line">Just a few more steps and you're ready to go:</span><br><span class="line"></span><br><span class="line">1. Download a theme into the same-named folder.</span><br><span class="line">   Choose a theme from https://themes.gohugo.io/, or</span><br><span class="line">   create your own with the "hugo new theme &lt;THEMENAME&gt;" command.</span><br><span class="line">2. Perhaps you want to add some content. You can add single files</span><br><span class="line">   with "hugo new &lt;SECTIONNAME&gt;\&lt;FILENAME&gt;.&lt;FORMAT&gt;".</span><br><span class="line">3. Start the built-in live server via "hugo server".</span><br><span class="line"></span><br><span class="line">Visit https://gohugo.io/ for quickstart guide and full documentation.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> $ <span class="built_in">cd</span> <span class="built_in">test</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">archetypes/  config.toml  content/  data/  layouts/  static/  themes/</span><br></pre></td></tr></table></figure><p><code>config.toml</code>是网站的配置文件，包括 <code>baseurl</code>, <code>title</code>, <code>copyright</code> 等等网站参数。</p><p>这几个文件夹的作用分别是：</p><ul><li>archetypes：包括内容类型，在创建新内容时自动生成内容的配置</li><li>content：包括网站内容，全部使用markdown格式</li><li>data：存放 Hugo 生成网站时的配置文件</li><li>layouts：包括了网站的模版，决定内容如何呈现</li><li>static：包括了css, js, fonts, media等，决定网站的外观</li><li>themes：主题</li></ul><h3 id="添加主题"><a class="markdownIt-Anchor" href="#添加主题"></a> 添加主题</h3><p>按照一般方法这一步应该添加主题，然后添加文章，然后就可以预览站点了。</p><p>这里选用了 <a href="https://github.com/gcushen/hugo-academic" target="_blank" rel="noopener">Academic</a> 这一主题。这是一个适合做个人简历的主题（学院风格）。按照它的方式进行安装，跳过了初始化网站的过程，直接从 git 上克隆一个版本过来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/sourcethemes/academic-kickstart.git hugo</span></span><br><span class="line">Cloning into 'hugo'...</span><br><span class="line">remote: Counting objects: 77, done.</span><br><span class="line">remote: Total 77 (delta 0), reused 0 (delta 0), pack-reused 77</span><br><span class="line">Unpacking objects: 100% (77/77), done.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hugo/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化主题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init --recursive</span></span><br><span class="line">Submodule 'themes/academic' (https://github.com/gcushen/hugo-academic.git) registered for path 'themes/academic'</span><br><span class="line">Cloning into 'D:/知识库/hugo/themes/academic'...</span><br><span class="line">Submodule path 'themes/academic': checked out 'b02f5ecedabe4494dabee522db3ab843472afa41'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选，更新主题</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote --merge</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>修改一下网站的顶层配置文件，进行相应的配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configuration of Academic</span></span><br><span class="line"><span class="comment"># Documentation: https://sourcethemes.com/academic/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The URL of your website.</span></span><br><span class="line"><span class="comment"># End your URL with a `/` trailing slash, e.g. `https://example.com/`.</span></span><br><span class="line"><span class="attr">baseurl</span> = <span class="string">"https://yiweiniu.github.io/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Title of your site</span></span><br><span class="line"><span class="attr">title</span> = <span class="string">"Yiwei Niu"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your copyright notice - appears in site footer.</span></span><br><span class="line"><span class="comment"># To display a copyright symbol, type `&amp;copy;`.</span></span><br><span class="line"><span class="attr">copyright</span> = <span class="string">"&amp;copy; 2018 Yiwei Niu"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">theme</span> = <span class="string">"academic"</span></span><br><span class="line"><span class="attr">enableEmoji</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">footnotereturnlinkcontents</span> = <span class="string">"&lt;sup&gt;^&lt;/sup&gt;"</span></span><br><span class="line"><span class="attr">ignoreFiles</span> = [<span class="string">"\\.Rmd$"</span>, <span class="string">"\\.Rmarkdown$"</span>, <span class="string">"_files$"</span>, <span class="string">"_cache$"</span>]</span><br><span class="line"><span class="attr">preserveTaxonomyNames</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">paginate</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable comments by entering your Disqus shortname</span></span><br><span class="line"><span class="attr">disqusShortname</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable analytics by entering your Google Analytics tracking ID</span></span><br><span class="line"><span class="attr">googleAnalytics</span> = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default language to use (if you setup multilingual support)</span></span><br><span class="line"><span class="attr">defaultContentLanguage</span> = <span class="string">"en"</span></span><br><span class="line"><span class="attr">defaultContentLanguageInSubdir</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[outputs]</span></span><br><span class="line">  home = [ "HTML", "CSS", "RSS" ]</span><br><span class="line">  section = [ "HTML", "RSS" ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure BlackFriday Markdown rendering.</span></span><br><span class="line"><span class="comment">#   See: https://gohugo.io/readfiles/bfconfig/</span></span><br><span class="line"><span class="section">[blackfriday]</span></span><br><span class="line">  hrefTargetBlank = true  # `true` opens external links in a new tab.</span><br><span class="line">  fractions = true  # `false` disables smart fractions (e.g. 5/12 formatted as a fraction).</span><br><span class="line">  smartypants = true  # `false` disables all smart punctuation substitutions (e.g. smart quotes, dashes, fractions).</span><br><span class="line"></span><br><span class="line"><span class="section">[params]</span></span><br><span class="line">  <span class="comment"># Color theme.</span></span><br><span class="line">  <span class="comment">#   Choose from `default`, `ocean`, `forest`, `coffee`, `dark`, or `1950s`.</span></span><br><span class="line">  color_theme = "default"</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font style.</span></span><br><span class="line">  <span class="comment">#   Choose from `default`, `classic`, or `playfair`.</span></span><br><span class="line">  font = "default"</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Your details.</span></span><br><span class="line">  name = "Yiwei Niu"</span><br><span class="line">  role = "PhD candidate"</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Organizations/Affiliations.</span></span><br><span class="line">  <span class="comment">#   Separate multiple entries with a comma, using the form: `[ &#123;name="Org1", url=""&#125;, &#123;name="Org2", url=""&#125; ]`.</span></span><br><span class="line">  organizations = [ &#123; name = "Institute of Biophysics, Chinese Academy of Sciences", url = "http://www.ibp.cas.cn/" &#125; ]</span><br><span class="line"></span><br><span class="line">  gravatar = false  # Get your avatar from Gravatar.com? (true/false)</span><br><span class="line">  avatar = "portrait.jpg"  # Specify an avatar image (in `static/img/` folder) or delete value to disable avatar.</span><br><span class="line">  email = "xiaohuwangwang@qq.com"</span><br><span class="line">  address = "15 Datun Road, Chaoyang District, Beijing, 100101, China"</span><br><span class="line">  office_hours = ""</span><br><span class="line">  phone = ""</span><br><span class="line">  skype = ""</span><br><span class="line">  telegram = ""</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable Keybase in Contact widget by entering your keybase.io username.</span></span><br><span class="line">  keybase = ""</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Discussion link (e.g. link to a forum, mailing list, or chat).</span></span><br><span class="line">  <span class="comment">#   Uncomment line below to use.</span></span><br><span class="line">  <span class="comment">#   discussion = &#123; name = "Discuss", url = "https://discourse.gohugo.io" &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Diplay a logo in navigation bar rather than title (optional).</span></span><br><span class="line">  <span class="comment">#   To enable, place an image in `static/img/` and reference its filename below. To disable, set the value to "".</span></span><br><span class="line">  logo = ""</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable/disable map in Contact widget.</span></span><br><span class="line">  <span class="comment"># To show your address on a map in the contact widget, you need to enter your latitude, longitude and choose</span></span><br><span class="line">  <span class="comment"># a map provider below.</span></span><br><span class="line">  <span class="comment"># To use Google Maps, set `map = 1` and enter your API key that can be obtained here:</span></span><br><span class="line">  <span class="comment">#   https://developers.google.com/maps/documentation/javascript/get-api-key</span></span><br><span class="line">  <span class="comment"># To use OpenStreetMap tiles, set `map = 2`.</span></span><br><span class="line">  <span class="comment"># To use OpenStreetMap on a high traffic site, set `map = 3` and enter your API key that can be obtained here:</span></span><br><span class="line">  <span class="comment">#   https://www.mapbox.com/studio/account/tokens</span></span><br><span class="line">  <span class="comment"># To get your coordinates, right-click on Google Maps and choose "What's here?". The coords will show up at the bottom.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Map provider:</span></span><br><span class="line">  <span class="comment">#   0: No map</span></span><br><span class="line">  <span class="comment">#   1: Google Maps</span></span><br><span class="line">  <span class="comment">#   2: OpenStreetMap (Mapnik)</span></span><br><span class="line">  <span class="comment">#   3: OpenStreetMap (Mapbox)</span></span><br><span class="line">  map = 0</span><br><span class="line">  map_api_key = ""</span><br><span class="line">  latitude = "37.4275"</span><br><span class="line">  longitude = "-122.1697"</span><br><span class="line">  zoom = 15</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Date and time format (refer to Go's date format: http://fuckinggodateformat.com )</span></span><br><span class="line">  <span class="comment">#   Examples: "Mon, Jan 2, 2006" or "2006-01-02"</span></span><br><span class="line">  date_format = "Jan 2, 2006"</span><br><span class="line">  <span class="comment">#   Examples: "3:04 pm" or "15:04"</span></span><br><span class="line">  time_format = "3:04 PM"</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Show estimated reading time for posts?</span></span><br><span class="line">  reading_time = false</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Display comment count? Requires commenting to be enabled.</span></span><br><span class="line">  comment_count = true</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Display next/previous section pager?</span></span><br><span class="line">  section_pager = false</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable global LaTeX math rendering?</span></span><br><span class="line">  <span class="comment">#   If false, you can enable it locally on a per page basis.</span></span><br><span class="line">  math = false</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Highlight.js options</span></span><br><span class="line">  <span class="comment">#   highlight</span></span><br><span class="line">  <span class="comment">#     Enable global source code highlighting?  If false, you can</span></span><br><span class="line">  <span class="comment">#     override it for a particular page in that page's preamble.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#     Example: highlight = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   highlight_languages</span></span><br><span class="line">  <span class="comment">#     Add support for highlighting additional languages. Support for</span></span><br><span class="line">  <span class="comment">#     languages mentioned here will be included in all pages. You</span></span><br><span class="line">  <span class="comment">#     can also set this variable for a particular page in that</span></span><br><span class="line">  <span class="comment">#     page's preamble.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#     Example: highlight_languages = ["go", "lisp", "ocaml"]</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   highlight_style</span></span><br><span class="line">  <span class="comment">#     Choose a different CSS style for highlighting source</span></span><br><span class="line">  <span class="comment">#     code. Setting this option in a page's preamble has no</span></span><br><span class="line">  <span class="comment">#     effect.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#     Example: highlight_style = "github-gist"</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   For the list of supported languages and styles, see:</span></span><br><span class="line">  <span class="comment">#   https://cdnjs.com/libraries/highlight.js/</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   For more info on the highlighting options, see:</span></span><br><span class="line">  <span class="comment">#   https://sourcethemes.com/academic/post/writing-markdown-latex/#highlighting-options</span></span><br><span class="line">  highlight = true</span><br><span class="line">  highlight_languages = []</span><br><span class="line">  <span class="comment"># highlight_style = "github"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable native social sharing buttons?</span></span><br><span class="line">  sharing = true</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Link custom CSS and JS assets</span></span><br><span class="line">  <span class="comment">#   (relative to /static/css and /static/js respectively)</span></span><br><span class="line">  custom_css = []</span><br><span class="line">  custom_js  = []</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Publication types.</span></span><br><span class="line">  <span class="comment">#   Used to categorize publications.</span></span><br><span class="line">  <span class="comment">#   The index of the publication type in the list is used as its unique numerical identifier.</span></span><br><span class="line">  <span class="comment">#   The numeric ID is used in a publication's frontmatter to categorize it.</span></span><br><span class="line">  <span class="comment">#   The language can be edited below.</span></span><br><span class="line">  <span class="comment">#   For multilingual sites, `publication_types` can be copied to each language section at the end of this file and</span></span><br><span class="line">  <span class="comment">#   translated.</span></span><br><span class="line">  publication_types = [</span><br><span class="line">    'Uncategorized',  # 0</span><br><span class="line">    'Conference paper',  # 1</span><br><span class="line">    'Journal article',  # 2</span><br><span class="line">    'Manuscript',  # 3</span><br><span class="line">    'Report',  # 4</span><br><span class="line">    'Book',  # 5</span><br><span class="line">    'Book section'  # 6</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Configuration of talk pages.</span></span><br><span class="line"><span class="section">  [params.talks]</span></span><br><span class="line">    <span class="comment"># Show talk time?</span></span><br><span class="line">    time = true</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Configuration of publication pages.</span></span><br><span class="line"><span class="section">  [params.publications]</span></span><br><span class="line">    <span class="comment"># Date format (refer to Go's date format: http://fuckinggodateformat.com )</span></span><br><span class="line">    <span class="comment">#   Examples: "Mon, Jan 2, 2006" or "2006-01-02"</span></span><br><span class="line">    date_format = "January, 2006"</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Configuration of project pages.</span></span><br><span class="line"><span class="section">  [params.projects]</span></span><br><span class="line">    <span class="comment"># List publications and talks related to the project?</span></span><br><span class="line">    list_children = true</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Publication list format.</span></span><br><span class="line">    <span class="comment">#   0 = Simple</span></span><br><span class="line">    <span class="comment">#   1 = Detailed</span></span><br><span class="line">    <span class="comment">#   2 = APA</span></span><br><span class="line">    <span class="comment">#   3 = MLA</span></span><br><span class="line">    publication_format = 2</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Social/Academic Networking</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Icon pack "fa" includes the following social network icons:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   twitter, weibo, linkedin, github, facebook, pinterest, google-plus,</span></span><br><span class="line">  <span class="comment">#   youtube, instagram, soundcloud</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   For email icon, use "fa" icon pack, "envelope" icon, and</span></span><br><span class="line">  <span class="comment">#   "mailto:your@email.com" as the link.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   Full list: https://fortawesome.github.io/Font-Awesome/icons/</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># Icon pack "ai" includes the following academic network icons:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   google-scholar, arxiv, orcid, researchgate, mendeley</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#   Full list: https://jpswalsh.github.io/academicons/</span></span><br><span class="line"></span><br><span class="line"><span class="section">  [[params.social]]</span></span><br><span class="line">    icon = "envelope"</span><br><span class="line">    icon_pack = "fa"</span><br><span class="line">    link = "mailto:xiaohuwangwang@qq.com"</span><br><span class="line"></span><br><span class="line"><span class="section">  [[params.social]]</span></span><br><span class="line">    icon = "twitter"</span><br><span class="line">    icon_pack = "fa"</span><br><span class="line">    link = "https://twitter.com/ywniu"</span><br><span class="line"></span><br><span class="line"><span class="section">  [[params.social]]</span></span><br><span class="line">    icon = "weibo"</span><br><span class="line">    icon_pack = "fa"</span><br><span class="line">    link = "//weibo.com/u/3049858680"</span><br><span class="line"></span><br><span class="line"><span class="section">  [[params.social]]</span></span><br><span class="line">    icon = "google-scholar"</span><br><span class="line">    icon_pack = "ai"</span><br><span class="line">    link = "https://scholar.google.com.hk/citations?user=JMK-4AEAAAAJ&amp;hl=en"</span><br><span class="line"></span><br><span class="line"><span class="section">  [[params.social]]</span></span><br><span class="line">    icon = "github"</span><br><span class="line">    icon_pack = "fa"</span><br><span class="line">    link = "//github.com/YiweiNiu"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Navigation Links</span></span><br><span class="line"><span class="comment">#   To link a homepage widget, specify the URL as a hash `#` followed by the filename of the</span></span><br><span class="line"><span class="comment">#     desired widget in your `content/home/` folder.</span></span><br><span class="line"><span class="comment">#   The weight parameter defines the order that the links will appear in.</span></span><br><span class="line"><span class="section">[params.menus]</span></span><br><span class="line">  <span class="comment"># Align the main menu to the right of the page? (true/false)</span></span><br><span class="line">  align_right = true</span><br><span class="line"></span><br><span class="line"><span class="section">[[menu.main]]</span></span><br><span class="line">  name = "Home"</span><br><span class="line">  url = "#about"</span><br><span class="line">  weight = 1</span><br><span class="line"></span><br><span class="line"><span class="section">[[menu.main]]</span></span><br><span class="line">  name = "Publications"</span><br><span class="line">  url = "#publications_selected"</span><br><span class="line">  weight = 2</span><br><span class="line"></span><br><span class="line"><span class="section">[[menu.main]]</span></span><br><span class="line">  name = "Projects"</span><br><span class="line">  url = "#projects"</span><br><span class="line">  weight = 3</span><br><span class="line"></span><br><span class="line"><span class="section">[[menu.main]]</span></span><br><span class="line">  name = "Contact"</span><br><span class="line">  url = "#contact"</span><br><span class="line">  weight = 4</span><br><span class="line"></span><br><span class="line"><span class="section">[[menu.main]]</span></span><br><span class="line">  name = "Blog"</span><br><span class="line">  url = "https://YiweiNiu.github.io/blog/"</span><br><span class="line">  weight = 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Taxonomies.</span></span><br><span class="line"><span class="section">[taxonomies]</span></span><br><span class="line">  tag = "tags"</span><br><span class="line">  category = "categories"</span><br><span class="line">  publication_type = "publication_types"</span><br><span class="line"></span><br><span class="line"><span class="comment"># Languages</span></span><br><span class="line"><span class="comment">#   Create a [languages.X] block for each language you want, where X is the language ID.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure the English version of the website.</span></span><br><span class="line"><span class="section">[Languages.en]</span></span><br><span class="line">  languageCode = "en-us"</span><br></pre></td></tr></table></figure><h3 id="本地预览"><a class="markdownIt-Anchor" href="#本地预览"></a> 本地预览</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hugo server</span></span><br></pre></td></tr></table></figure><h3 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h3><p>先在 git 上建立了一个空的 repo，名字为 <code>YiweiNiu.github.io</code>。</p><p>在站点根目录执行 Hugo 命令生成最终页面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hugo --theme=academic --baseUrl=<span class="string">"https://yiweiniu.github.io/"</span></span></span><br></pre></td></tr></table></figure><p>（注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 <code>draft=true</code> 再重新生成。）</p><p>所有静态页面都会生成到 <code>public</code> 目录，将 pubilc 目录里所有文件 <code>push</code> 到刚创建的 Repository 的 <code>master</code> 分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> public</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin https://github.com/yiweiniu/yiweiniu.github.io.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"first commit"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><p>浏览器里访问：<code>https://yiweiniu.github.io/</code> 即可查看。</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><p><a href="https://gohugo.io/documentation/" target="_blank" rel="noopener">Hugo Documentation</a><br><a href="http://www.gohugo.org/" target="_blank" rel="noopener">Hugo中文文档</a><br><a href="http://www.worldhello.net/gotgithub/03-project-hosting/050-homepage.html" target="_blank" rel="noopener">GotGitHub - 建立主页</a><br><a href="https://sourcethemes.com/academic/docs/" target="_blank" rel="noopener">Academic theme</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://gohugo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hugo&lt;/a&gt; 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;/p&gt;
&lt;p&gt;根据官网的一些文档及网上的教程，尝试用 Hug
      
    
    </summary>
    
      <category term="mixture" scheme="https://yiweiniu.github.io/blog/categories/mixture/"/>
    
    
      <category term="Hugo" scheme="https://yiweiniu.github.io/blog/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 建站记录</title>
    <link href="https://yiweiniu.github.io/blog/2018/02/Hexo-%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://yiweiniu.github.io/blog/2018/02/Hexo-建站记录/</id>
    <published>2018-02-07T08:58:25.000Z</published>
    <updated>2018-07-10T05:46:36.264Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个轻便的博客框架。根据官网的一些文档及网上的教程，尝试用 Hexo 搭建一个静态的博客站点。下面的操作在 win10 64 位家庭版中完成。bash 命令在 git bash 中操作。</p><h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><h4 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h4><p>首先需要安装 git 和 npm，git 已经安装好了。到 npm <a href="https://www.npmjs.com/" target="_blank" rel="noopener">官网</a> 下载并安装 npm。</p><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo -v</span></span><br><span class="line">hexo: 3.5.0</span><br><span class="line">hexo-cli: 1.0.4</span><br><span class="line">os: Windows_NT 10.0.16299 win32 x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 9.5.0</span><br><span class="line">v8: 6.2.414.46-node.18</span><br><span class="line">uv: 1.19.1</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">ares: 1.13.0</span><br><span class="line">modules: 59</span><br><span class="line">nghttp2: 1.29.0</span><br><span class="line">napi: 2</span><br><span class="line">openssl: 1.0.2n</span><br><span class="line">icu: 60.1</span><br><span class="line">unicode: 10.0</span><br><span class="line">cldr: 32.0</span><br><span class="line">tz: 2017c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建站</span></span><br><span class="line">hexo init hexo</span><br><span class="line">cd hexo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="配置站点"><a class="markdownIt-Anchor" href="#配置站点"></a> 配置站点</h4><p>打开 <code>_config.yml</code>  文件，修改一些基本配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Yiwei</span> <span class="string">Niu's</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">to</span> <span class="string">share,</span> <span class="string">to</span> <span class="string">learn</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">a</span> <span class="string">beginner,</span> <span class="string">a</span> <span class="string">learner</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Yiwei</span> <span class="string">Niu</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://yiweiniu.github.io/blog</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h4 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h4><p>选择了 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next</a> 这一主题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>将 <code>_config.yml</code> 中 <code>theme</code> 设置为 next。</p><h4 id="生成"><a class="markdownIt-Anchor" href="#生成"></a> 生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h4 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h4><p>先在 git 上建立了一个空的 repo，名字为 blog。然后修改 <code>_config.yml</code> 文件，注意这里设置的 branch 名字。第一个 branch 名字 为 <code>gh-pages</code>，这样命名是默认的项目主页。利用新的 <code>hexo-deployer-git</code> 就可以很方便地将网站和源码同时放在 git 上，这样即便更换电脑也可以从源码拉取代码，重新生成网站。参考自: <a href="https://www.zhihu.com/question/21193762/answer/172097576" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  - type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git@github.com:YiweiNiu/blog.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>首先需要配置 ssh 公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成</span><br><span class="line">ssh-keygen -t rsa (一路回车)</span><br></pre></td></tr></table></figure><p>打开 git 网站，在设置部分添加 ssh keys，然后将 <code>~/.ssh/id_rsa.pub</code> 中的内容复制到其中。</p><p>接下来就可以部署到 git 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"># 部署</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="本地调试"><a class="markdownIt-Anchor" href="#本地调试"></a> 本地调试</h4><p>可以在本地调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">npm install hexo-server --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行本地服务器</span></span><br><span class="line">hexo s [-p 4000]</span><br></pre></td></tr></table></figure><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置。默认端口为 4000，可以用 <code>-p</code> 设置端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><h3 id="高级"><a class="markdownIt-Anchor" href="#高级"></a> 高级</h3><h4 id="添加标签页面"><a class="markdownIt-Anchor" href="#添加标签页面"></a> 添加「标签」页面</h4><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line">  - Testing</span><br><span class="line">  - Another Tag</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>tags</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>编辑刚新建的页面，将页面的 <code>type</code> 设置为 <code>tags</code> ，主题将自动为这个页面显示标签云。页面内容如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-02-07 17:14:22</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="添加分类页面"><a class="markdownIt-Anchor" href="#添加分类页面"></a> 添加「分类」页面</h4><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试文章</span><br><span class="line">categories: Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>hexo new page</code> 新建一个页面，命名为 <code>categories</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>编辑刚新建的页面，将页面的 <code>type</code> 设置为 <code>categories</code> ，主题将自动为这个页面显示分类。页面内容如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-02-07 17:14:06</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="设置页面文章的篇数"><a class="markdownIt-Anchor" href="#设置页面文章的篇数"></a> 设置页面文章的篇数</h4><p>我想在首页及 archive/tag 页面展示不同的文章数，参考这里进行了设置：<a href="http://theme-next.iissnan.com/faqs.html#setting-page-size" target="_blank" rel="noopener">如何设置页面文章的篇数？</a></p><p>首先检查这几个插件是否安装上了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-index</span><br><span class="line">npm install --save hexo-generator-archive</span><br><span class="line">npm install --save hexo-generator-tag</span><br></pre></td></tr></table></figure><p>然后打开站点的 <code>_config.yml</code> 添加下面的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="资源文件夹"><a class="markdownIt-Anchor" href="#资源文件夹"></a> 资源文件夹</h4><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过打开 <code>_config.yml</code>  文件，修改 <code>post_asset_folder</code>  选项设为 <code>true</code>，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 <code>markdown</code> 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><p>通过常规的 <code>markdown</code> 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在 <code>Hexo2</code> 时代，社区创建了很多插件来解决这个问题。但是，随着 <code>Hexo3</code> 的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img zotero_</span>rna<span class="emphasis">_1518862657_</span>29629.png zotero_example %&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：图片标题不能以下划线起始 <code>_</code>，不知道为什么。</p><h4 id="置顶文章"><a class="markdownIt-Anchor" href="#置顶文章"></a> 置顶文章</h4><p>突然发现有时候有博客置顶的功能。参考这篇博客：<a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">解决Hexo置顶问题</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的 <code>Front-matter</code> 中加上 <code>top: true</code> 即可。</p><h4 id="改变-markdown-渲染器"><a class="markdownIt-Anchor" href="#改变-markdown-渲染器"></a> 改变 Markdown 渲染器</h4><p>由于使用 <a href="https://github.com/tamlok/vnote" target="_blank" rel="noopener">VNote</a> 做笔记，顺便发布到博客上。<code>VNote</code> 默认的 Markdown 渲染器是 <code>markdown-it</code>，而 <code>Hexo</code> 的渲染器是 <code>GFM</code>。并且 <code>GFM</code> 不支持上标、下标、脚注等。为了二者能保持一致，所以我想更换 <code>Hexo</code> 默认的渲染器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save # 卸载原有渲染器</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save    # 安装新的</span><br></pre></td></tr></table></figure><p>编辑站点的 <code>_config.yml</code>，配置插件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-renderer-markdown-it-plus config</span></span><br><span class="line"><span class="comment">## Docs: https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus</span></span><br><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line"><span class="attr">    highlight:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    html:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    xhtmlOut:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    breaks:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    langPrefix:</span></span><br><span class="line"><span class="attr">    linkify:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    typographer:</span></span><br><span class="line"><span class="attr">    quotes:</span> <span class="string">“”‘’</span></span><br><span class="line"><span class="attr">    pre_class:</span> <span class="string">highlight</span></span><br><span class="line"><span class="attr">    plugins:</span></span><br><span class="line"><span class="attr">        - plugin:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">markdown-it-mark</span></span><br><span class="line"><span class="attr">            enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>查看 <a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus" target="_blank" rel="noopener">hexo-renderer-markdown-it-plus</a> 了解更多。</p><h4 id="文章加密"><a class="markdownIt-Anchor" href="#文章加密"></a> 文章加密</h4><p>当然，这种加密方式非常不安全，只能阻挡普通的浏览者。参考：<a href="https://www.iots.vip/post/hexo-password-crack.html" target="_blank" rel="noopener">hexo文章密码访问的&quot;破解&quot;方法</a>。</p><p>既然是博客，加密其实也没有多大意义。所以这节内容是为了玩一玩。</p><p>安装 <code>hexo-blog-encrypt</code> 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure><p>启用文章加密功能，修改站点的 <code>_config.yml</code> 文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在想要加密的文章头部加上对应字段，如 password, abstract, message 等：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line"><span class="code">    - fdsafsdaf</span></span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.    # 文章摘要</span><br><span class="line">message: Welcome to my blog, enter password to read.    # 密码提示</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="添加站点地图"><a class="markdownIt-Anchor" href="#添加站点地图"></a> 添加站点地图</h4><p>配置站点地图，主要用于 SEO 优化。主要参考了这篇博客：<a href="http://lindaxiao-hust.github.io/2016/04/06/hexo-next-sitemap/" target="_blank" rel="noopener">next添加sitemap</a></p><p>安装 <code>hexo-generator-sitemap</code> 插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>提交 sitemap 到 Google</p><blockquote><p>这块在<a href="http://theme-next.iissnan.com/third-party-services.html#google-webmaster-tools" target="_blank" rel="noopener">官方文档</a>里面有提到（官方文档其实很容易上手，跟着官方走还是很容易的，有些地方可能不够详细，但是网上关于next的配置博客也不少，如<a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank" rel="noopener">｜Hexo优化｜如何向google提交sitemap（详细）</a>，这里给出傻瓜式详细步骤：</p><blockquote><ol><li>进入 <a href="https://www.google.com/webmasters/verification/home?hl=en" target="_blank" rel="noopener">Google Webmaster Central</a></li><li>点击骚红色的”ADD A PROPERTY”</li><li>在弹出来的小框中加入你的站点地址 <a href="http://yoursite.com" target="_blank" rel="noopener">http://yoursite.com</a> ，然后点击”Continue”</li><li>Tab栏选择”Alternate methods”，选中HTML tag可以看见<br><code>&lt;meta name=&quot;google-site-verification&quot; content=&quot;xxxxxxxxxxxxxxxxxx&quot; /&gt; #复制content的值</code></li><li>打开next主题的配置文件_config.yml，找到google_site_verification字段（找不到就新建）：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;#</span> <span class="string">Google</span> <span class="string">Webmaster</span> <span class="string">tools</span> <span class="string">verification</span> <span class="string">setting</span></span><br><span class="line"><span class="string">&gt;&gt;#</span> <span class="attr">See:</span> <span class="attr">https://www.google.com/webmasters/</span></span><br><span class="line"><span class="string">&gt;&gt;google_site_verification:</span> <span class="string">xxxxxxxxxxxxxxxxxx</span> <span class="comment">#4中content的值</span></span><br><span class="line"><span class="string">&gt;&gt;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><ol start="6"><li>执行命令重新发布站点<br><code>hexo d -g</code></li><li>回到4中的 Google Webmaster Central 页面，点击骚红色的”VERIFY”，done！</li></ol></blockquote></blockquote><h4 id="添加蜘蛛协议"><a class="markdownIt-Anchor" href="#添加蜘蛛协议"></a> 添加蜘蛛协议</h4><p><code>robots.txt</code> 是搜索引擎中访问网站的时候要查看的第一个文件。<code>robots.txt</code> 文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</p><p>在站点 <code>source</code> 文件夹下新建 <code>robots.txt</code> 文件，文件内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /categories/</span><br><span class="line"></span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Sitemap: https://yiweiniu.github.io/blog/sitemap.xml</span><br></pre></td></tr></table></figure><h4 id="添加谷歌统计"><a class="markdownIt-Anchor" href="#添加谷歌统计"></a> 添加谷歌统计</h4><p>注册 <a href="http://www.google.cn/intl/zh-CN_ALL/analytics/learn/index.html" target="_blank" rel="noopener">Google Analytics</a>。</p><p>在全局 _config.yml 文件中添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span> <span class="string">UA-[TrackingID]-1</span></span><br></pre></td></tr></table></figure><h3 id="配置主题"><a class="markdownIt-Anchor" href="#配置主题"></a> 配置主题</h3><p>下面的配置基于 <code>Next v6.0.6</code>，不同版本可能会有一定差异。</p><p>下面如果需要修改配置文件，都是在 <code>themes/next</code> 下的 <code>_config.yml</code>，这种站点配置和主题配置分离的方式非常灵活方便。</p><h4 id="选择-scheme"><a class="markdownIt-Anchor" href="#选择-scheme"></a> 选择 Scheme</h4><blockquote><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><h4 id="侧栏菜单"><a class="markdownIt-Anchor" href="#侧栏菜单"></a> 侧栏菜单</h4><p>打开 <code>themes/next</code> 下的 <code>_config.yml</code> 文件，搜索 <code>menu</code> 关键字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  about: https://yiweiniu.github.io/ || user</span><br></pre></td></tr></table></figure><h4 id="添加头像"><a class="markdownIt-Anchor" href="#添加头像"></a> 添加头像</h4><p>打开 <code>themes/next</code> 下的 <code>_config.yml</code> 文件，搜索 <code>Sidebar Avatar</code> 关键字，去掉 <code>avatar</code> 前面的<code>#</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line"><span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure><h4 id="侧边栏社交链接"><a class="markdownIt-Anchor" href="#侧边栏社交链接"></a> 侧边栏社交链接</h4><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。<br>链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  E-Mail:</span> <span class="attr">mailto:xiaohuwangwang@qq.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/YiweiNiu</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  Weibo:</span> <span class="attr">http://weibo.com/u/3049858680</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line"><span class="attr">  Twitter:</span> <span class="attr">https://twitter.com/ywniu</span> <span class="string">||</span> <span class="string">twitter</span></span><br></pre></td></tr></table></figure><h4 id="阅读更多"><a class="markdownIt-Anchor" href="#阅读更多"></a> 阅读更多</h4><p>在文章中使用 <code>&lt; !--more--&gt;</code> 手动进行截断。这种方法可以根据文章的内容，自己在合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，使用灵活，也是 <code>Hexo</code> 推荐的方法。</p><p>自动形成摘要，在主题配置文件中添加。默认截取的长度为 150 字符，可以根据需要自行设定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><h4 id="显示文章字数统计阅读时长"><a class="markdownIt-Anchor" href="#显示文章字数统计阅读时长"></a> 显示文章字数统计,阅读时长</h4><p>在你站点的根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>修改<strong>站点</strong>配置 <code>_config.yml</code>，添加下面的内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># word count</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>修改<strong>主题</strong>配置 <code>themes/next</code> 下的 <code>_config.yml</code>，搜索关键字 <code>post_wordcount</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h4 id="修改网页底部"><a class="markdownIt-Anchor" href="#修改网页底部"></a> 修改网页底部</h4><p>在图标库中找到你自己喜欢的图标，打开 <code>themes/next</code> 下的 <code>_config.yml</code>，搜索关键字 <code>authoricon</code>，替换图标名。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line"><span class="attr">  since:</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line"><span class="attr">  icon:</span> </span><br><span class="line">    <span class="comment"># Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mars</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line"><span class="attr">    animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line"><span class="attr">    color:</span> <span class="string">"#808080"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, will be used `author` from Hexo main config.</span></span><br><span class="line"><span class="attr">  copyright:</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line"><span class="attr">  powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line"><span class="attr">    version:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># -------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Any custom text can be defined here.</span></span><br><span class="line">  <span class="comment">#custom_text: Hosted by &lt;a target="_blank" href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启版权声明"><a class="markdownIt-Anchor" href="#开启版权声明"></a> 开启版权声明</h4><p>主题配置文件下,搜索关键字 <code>post_copyright</code>，<code>enable</code> 改为 <code>true</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">&lt;a</span> <span class="string">href="https://creativecommons.org/licenses/by-nc-sa/4.0/"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">target="_blank"&gt;CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span><span class="string">&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h4 id="浏览进度"><a class="markdownIt-Anchor" href="#浏览进度"></a> 浏览进度</h4><p>浏览页面的时候显示当前浏览进度</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="评论系统-disqus"><a class="markdownIt-Anchor" href="#评论系统-disqus"></a> 评论系统 DISQUS</h4><p>先到 Disqus 网站配置一下，在右上角有一个齿轮的标记 setting，在下拉列表中选择 add disqus to site，需要填写 Site URL，Site Name，Site Shortname，完事后就注册了一个账号。<br>编辑 主题配置文件， 将 <code>disqus</code> 下的 <code>enable</code> 设定为 <code>true</code>，同时提供您的 <code>shortname</code>。<code>count</code> 用于指定是否显示评论数量。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  shortname:</span> <span class="string">disqus_short_name</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="内容分享"><a class="markdownIt-Anchor" href="#内容分享"></a> 内容分享</h4><p>在网站 <a href="https://www.addthis.com" target="_blank" rel="noopener">AddThis</a> 上注册账号。 可以使用 Google/Facebook/Twitter 账号进行第三方登陆。从菜单获得 AddThis id：More… --&gt; General --&gt; ID。在 主题配置文件 中，把 <code>#Share</code> 下的 <code>#add_this_id</code> 取消注释， 改为 <code>add_this_id: put_your_add_this_id_here</code>。</p><h4 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h4><p>添加百度/谷歌/本地 自定义站点内容搜索<br>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>编辑 站点配置文件，新增以下内容到任意位置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>编辑 主题配置文件，启用本地搜索功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h4 id="数据统计"><a class="markdownIt-Anchor" href="#数据统计"></a> 数据统计</h4><p>编辑 主题配置文件 中的 <code>busuanzi_count</code> 的配置项。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views/Visitors of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure><p>当 <code>enable: true</code> 时，代表开启全局开关。若 <code>site_uv</code>、<code>site_pv</code>、<code>page_pv</code> 的值均为 <code>false</code> 时，不蒜子仅作记录而不会在页面上显示。</p><h3 id="日常使用"><a class="markdownIt-Anchor" href="#日常使用"></a> 日常使用</h3><h4 id="创建新文章"><a class="markdownIt-Anchor" href="#创建新文章"></a> 创建新文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建新文章</span></span><br><span class="line">hexo new "xxx xxx xxx"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成站点并部署</span></span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h4 id="更新-next-主题"><a class="markdownIt-Anchor" href="#更新-next-主题"></a> 更新 <code>Next</code> 主题</h4><p>先备份 <code>themes/next</code> 下的 <code>_config.yml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>再把 <code>_config.yml</code> 拷贝回去。</p><h4 id="更新-hexo-及插件"><a class="markdownIt-Anchor" href="#更新-hexo-及插件"></a> 更新 <code>hexo</code> 及插件</h4><p>更新 <code>hexo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g hexo</span><br></pre></td></tr></table></figure><p>更新插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><h4 id="更换电脑"><a class="markdownIt-Anchor" href="#更换电脑"></a> 更换电脑</h4><p>有哪些文件需要同步？</p><ul><li>blog<ul><li>scaffolds<ul><li><a href="http://draft.md" target="_blank" rel="noopener">draft.md</a></li><li><a href="http://page.md" target="_blank" rel="noopener">page.md</a></li><li><a href="http://post.md" target="_blank" rel="noopener">post.md</a></li></ul></li><li>source<ul><li>_posts</li><li>about</li><li>categories</li><li>tags</li></ul></li><li>themes<ul><li>next</li></ul></li><li>_config.yml</li></ul></li></ul><p>在尝试使用 git 同步博客的原始时，发现会遇到各种问题。觉得不如用坚果云选择性同步这几个文件夹。然后在另一台电脑上搭建博客环境、安装相关插件后。同步这些文件，然后重新生成、部署站点。如果遇到问题，参考这篇笔记。</p><p>最后……样式虽然重要，内容才是一切。</p><h3 id="更新历史"><a class="markdownIt-Anchor" href="#更新历史"></a> 更新历史</h3><ul><li>20180207：创建笔记，记录了建站的过程</li><li>20180320：更新了 <code>Next</code> 主题，并修改相应内容</li><li>20180322：调整了笔记结构，增加了文章加密，站点地图等部分</li><li>20180324：增加了“改变 Markdown 渲染器”，更改了“更换电脑”部分</li><li>20180328：由于 <code>hexo-neat</code> 报错，移除了“静态资源压缩”部分</li><li>20180330：增加“设置页面文章的篇数”,&quot;文章置顶&quot;部分</li><li>20180404：将主题更新到了 6.1.0，更新了“修改网页底部”部分</li><li>20180710：添加了“添加谷歌统计”部分</li></ul><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 文档</a></li><li><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next git repo</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next 文档</a></li><li><a href="https://www.jianshu.com/p/3ff20be8574c" target="_blank" rel="noopener">Hexo-Next-主题优化</a></li><li><a href="https://iassas.com/archives/d6a90b9.html" target="_blank" rel="noopener">Blog更新&amp;配置文件详解</a></li><li><a href="http://hujichn.github.io/2016/04/06/Win10%E4%B8%8A%E5%88%A9%E7%94%A8github+hexo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Win10上利用github+hexo建立博客的方法</a></li><li><a href="https://jdhao.github.io/2017/02/26/hexo-install-use-issue/" target="_blank" rel="noopener">Hexo 安装及使用中遇到的问题及解决办法</a></li><li><a href="http://lindaxiao-hust.github.io/2016/04/06/hexo-next-sitemap/" target="_blank" rel="noopener">next添加sitemap</a></li><li><a href="https://www.zhihu.com/question/21193762/answer/172097576" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></li><li><a href="http://knowhard.com/2017/10/01/Hexo-Theme-NexT/#2-next-%E5%8D%87%E7%BA%A7" target="_blank" rel="noopener">Hexo 主题 —— NexT 设置</a></li><li><a href="http://shanchuantian.com/2016/10/05/2016-10-05%E3%80%90%E5%B7%A5%E5%85%B7%E3%80%91%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">【工具】用hexo搭建博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个轻便的博客框架。根据官网的一些文档及网上的教程，尝试用 Hexo 搭建一个静态的博客站点。下面的操作在 win10 64 
      
    
    </summary>
    
      <category term="mixture" scheme="https://yiweiniu.github.io/blog/categories/mixture/"/>
    
    
      <category term="Hexo" scheme="https://yiweiniu.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
</feed>
